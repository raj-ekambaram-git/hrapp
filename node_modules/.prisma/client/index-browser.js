
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.7.1
 * Query Engine version: 272861e07ab64f234d3ffc4094e32bd61775599c
 */
Prisma.prismaVersion = {
  client: "4.7.1",
  engine: "272861e07ab64f234d3ffc4094e32bd61775599c"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val


/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.AccountConfigScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  accountId: 'accountId',
  configKey: 'configKey',
  configValue: 'configValue',
  status: 'status',
  createdBy: 'createdBy',
  createdDate: 'createdDate',
  lastUpdateDate: 'lastUpdateDate'
});

exports.Prisma.AccountScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  description: 'description',
  ein: 'ein',
  bankId: 'bankId',
  email: 'email',
  phone: 'phone',
  status: 'status',
  createdDate: 'createdDate',
  lastUpdateDate: 'lastUpdateDate'
});

exports.Prisma.AddressScalarFieldEnum = makeEnum({
  id: 'id',
  type: 'type',
  address1: 'address1',
  addressName: 'addressName',
  address2: 'address2',
  address3: 'address3',
  county: 'county',
  city: 'city',
  state: 'state',
  zipCode: 'zipCode',
  country: 'country',
  primary: 'primary',
  createdDate: 'createdDate',
  lastUpdateDate: 'lastUpdateDate',
  status: 'status',
  accountId: 'accountId',
  userId: 'userId',
  vendorId: 'vendorId'
});

exports.Prisma.AppConfigScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  configKey: 'configKey',
  configValue: 'configValue',
  status: 'status',
  createdBy: 'createdBy',
  createdDate: 'createdDate',
  lastUpdateDate: 'lastUpdateDate'
});

exports.Prisma.CalendarScalarFieldEnum = makeEnum({
  dateDimId: 'dateDimId',
  dateActual: 'dateActual',
  epoch: 'epoch',
  daySuffix: 'daySuffix',
  dayName: 'dayName',
  dayOfWeek: 'dayOfWeek',
  dayOfMonth: 'dayOfMonth',
  dayOfQuarter: 'dayOfQuarter',
  dayOfYear: 'dayOfYear',
  weekOfMonth: 'weekOfMonth',
  weekOfYear: 'weekOfYear',
  weekOfYearISO: 'weekOfYearISO',
  monthActual: 'monthActual',
  monthName: 'monthName',
  monthNameAbbreviated: 'monthNameAbbreviated',
  quarterActual: 'quarterActual',
  yearActual: 'yearActual',
  firstDayOfWeek: 'firstDayOfWeek',
  lastDayOfWeek: 'lastDayOfWeek',
  firstDayOfMonth: 'firstDayOfMonth',
  lastDayOfMonth: 'lastDayOfMonth',
  firstDayOfQuarter: 'firstDayOfQuarter',
  lastDayOfQuarter: 'lastDayOfQuarter',
  firstDayOfYear: 'firstDayOfYear',
  lastDayOfYear: 'lastDayOfYear',
  mmyyyy: 'mmyyyy',
  mmddyyyy: 'mmddyyyy',
  mmdd: 'mmdd',
  weekend: 'weekend',
  currentWeekDates: 'currentWeekDates'
});

exports.Prisma.InvoiceItemScalarFieldEnum = makeEnum({
  id: 'id',
  description: 'description',
  type: 'type',
  unitPrice: 'unitPrice',
  currency: 'currency',
  quantity: 'quantity',
  uom: 'uom',
  total: 'total',
  status: 'status',
  generalNote: 'generalNote',
  userId: 'userId',
  timesheetEntryId: 'timesheetEntryId',
  invoiceId: 'invoiceId',
  fromDate: 'fromDate',
  toDate: 'toDate',
  createdDate: 'createdDate',
  lastUpdateDate: 'lastUpdateDate'
});

exports.Prisma.InvoiceScalarFieldEnum = makeEnum({
  id: 'id',
  description: 'description',
  type: 'type',
  vendorId: 'vendorId',
  accountId: 'accountId',
  projectId: 'projectId',
  invoiceDate: 'invoiceDate',
  dueDte: 'dueDte',
  transactionId: 'transactionId',
  notes: 'notes',
  invoiceEmailTo: 'invoiceEmailTo',
  total: 'total',
  paidAmount: 'paidAmount',
  status: 'status',
  paymentTerms: 'paymentTerms',
  createdDate: 'createdDate',
  lastUpdateDate: 'lastUpdateDate'
});

exports.Prisma.JsonNullValueFilter = makeEnum({
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
});

exports.Prisma.JsonNullValueInput = makeEnum({
  JsonNull: Prisma.JsonNull
});

exports.Prisma.NotesScalarFieldEnum = makeEnum({
  id: 'id',
  type: 'type',
  typeId: 'typeId',
  notes: 'notes',
  createdBy: 'createdBy',
  createdDate: 'createdDate',
  lastUpdateDate: 'lastUpdateDate'
});

exports.Prisma.ProjectResourceScalarFieldEnum = makeEnum({
  id: 'id',
  projectId: 'projectId',
  userId: 'userId',
  unitPrice: 'unitPrice',
  currency: 'currency',
  quantity: 'quantity',
  billable: 'billable',
  uom: 'uom',
  budgetAllocated: 'budgetAllocated',
  usedBudget: 'usedBudget',
  remainingBudget: 'remainingBudget',
  isTimesheetApprover: 'isTimesheetApprover',
  fromDate: 'fromDate',
  toDate: 'toDate'
});

exports.Prisma.ProjectScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  referenceCode: 'referenceCode',
  description: 'description',
  type: 'type',
  invoiceCycle: 'invoiceCycle',
  addressId: 'addressId',
  vendorId: 'vendorId',
  accountId: 'accountId',
  budget: 'budget',
  remainingBudgetToAllocate: 'remainingBudgetToAllocate',
  usedBudget: 'usedBudget',
  totalHours: 'totalHours',
  averageRate: 'averageRate',
  timeSheetNotesRequired: 'timeSheetNotesRequired',
  status: 'status',
  contactName: 'contactName',
  contactEmail: 'contactEmail',
  contactPhone: 'contactPhone',
  createdDate: 'createdDate',
  lastUpdateDate: 'lastUpdateDate'
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.TimesheetEntriesScalarFieldEnum = makeEnum({
  id: 'id',
  timesheetId: 'timesheetId',
  projectId: 'projectId',
  status: 'status',
  approvedDate: 'approvedDate',
  approvedBy: 'approvedBy',
  entries: 'entries',
  unitPrice: 'unitPrice',
  createdDate: 'createdDate',
  lastUpdateDate: 'lastUpdateDate'
});

exports.Prisma.TimesheetScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  type: 'type',
  userId: 'userId',
  status: 'status',
  createdDate: 'createdDate',
  lastUpdateDate: 'lastUpdateDate',
  startDate: 'startDate'
});

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserAttributesScalarFieldEnum = makeEnum({
  id: 'id',
  userAttributeKey: 'userAttributeKey',
  userAttributeValue: 'userAttributeValue',
  createdDate: 'createdDate',
  lastUpdateDate: 'lastUpdateDate',
  userId: 'userId'
});

exports.Prisma.UserScalarFieldEnum = makeEnum({
  id: 'id',
  firstName: 'firstName',
  lastName: 'lastName',
  role: 'role',
  email: 'email',
  phone: 'phone',
  accountId: 'accountId',
  vendorId: 'vendorId',
  isTimeSheetEnabled: 'isTimeSheetEnabled',
  status: 'status',
  password: 'password',
  passwordExpired: 'passwordExpired',
  passwordRetries: 'passwordRetries',
  passwordSalt: 'passwordSalt',
  lastSignIn: 'lastSignIn',
  createdDate: 'createdDate',
  lastUpdateDate: 'lastUpdateDate'
});

exports.Prisma.VendorScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  description: 'description',
  email: 'email',
  phone: 'phone',
  type: 'type',
  accountId: 'accountId',
  ein: 'ein',
  bankDetails: 'bankDetails',
  status: 'status',
  createdDate: 'createdDate',
  accountContactName: 'accountContactName',
  accountContactEmail: 'accountContactEmail',
  accountContactPhone: 'accountContactPhone',
  lastUpdateDate: 'lastUpdateDate'
});
exports.AccountStatus = makeEnum({
  Active: 'Active',
  Inactive: 'Inactive',
  Fraud: 'Fraud'
});

exports.AddressStatus = makeEnum({
  A: 'A',
  I: 'I',
  D: 'D'
});

exports.AddressType = makeEnum({
  D: 'D',
  U: 'U',
  A: 'A',
  V: 'V'
});

exports.ConfigStatus = makeEnum({
  Active: 'Active',
  Inactive: 'Inactive',
  MarkForDelete: 'MarkForDelete'
});

exports.Currency = makeEnum({
  USD: 'USD',
  INR: 'INR'
});

exports.InvoiceCycle = makeEnum({
  Weekly: 'Weekly',
  BiWeekly: 'BiWeekly',
  Monthly: 'Monthly',
  Quarterly: 'Quarterly',
  HalfYearly: 'HalfYearly',
  Yearly: 'Yearly'
});

exports.InvoiceItemType = makeEnum({
  General: 'General',
  Project: 'Project',
  Staffing: 'Staffing',
  Timesheet: 'Timesheet'
});

exports.InvoiceStatus = makeEnum({
  Draft: 'Draft',
  Submitted: 'Submitted',
  Pending: 'Pending',
  PartiallyPaid: 'PartiallyPaid',
  Paid: 'Paid',
  Cancelled: 'Cancelled'
});

exports.InvoiceType = makeEnum({
  Staffing: 'Staffing',
  Product: 'Product',
  Project: 'Project',
  Timesheet: 'Timesheet'
});

exports.NotesType = makeEnum({
  Timesheet: 'Timesheet',
  Account: 'Account',
  Invoice: 'Invoice',
  Project: 'Project',
  User: 'User',
  TimesheetEntry: 'TimesheetEntry'
});

exports.PaymentTerms = makeEnum({
  Net30: 'Net30',
  Net45: 'Net45',
  Net60: 'Net60',
  Net90: 'Net90'
});

exports.ProjectStatus = makeEnum({
  Created: 'Created',
  Open: 'Open',
  Closed: 'Closed',
  Settled: 'Settled'
});

exports.Role = makeEnum({
  SUPER_ADMIN: 'SUPER_ADMIN',
  ACCOUNT_ADMIN: 'ACCOUNT_ADMIN',
  ACCOUNT_VENDOR_REP: 'ACCOUNT_VENDOR_REP',
  ACCOUNT_USER: 'ACCOUNT_USER',
  ACCOUNT_VENDOR_EMPLOYEE: 'ACCOUNT_VENDOR_EMPLOYEE',
  ACCOUNT_VENDOR_CONTRACTOR: 'ACCOUNT_VENDOR_CONTRACTOR',
  ACCOUNT_MANAGER: 'ACCOUNT_MANAGER',
  DEVELOPER: 'DEVELOPER'
});

exports.TimesheetStatus = makeEnum({
  Draft: 'Draft',
  Saved: 'Saved',
  Submitted: 'Submitted',
  Approved: 'Approved',
  Rejected: 'Rejected',
  Invoiced: 'Invoiced'
});

exports.TimesheetType = makeEnum({
  Weekly: 'Weekly',
  Monthly: 'Monthly',
  Quarterly: 'Quarterly'
});

exports.UnitOfMeasure = makeEnum({
  Hours: 'Hours',
  Item: 'Item'
});

exports.UserAttributeKeys = makeEnum({
  default: 'default',
  rate: 'rate',
  startDate: 'startDate',
  endDate: 'endDate'
});

exports.UserStatus = makeEnum({
  Active: 'Active',
  Inactive: 'Inactive'
});

exports.VendorStatus = makeEnum({
  Approved: 'Approved',
  Rejected: 'Rejected',
  Active: 'Active',
  Inactive: 'Inactive',
  Fraud: 'Fraud'
});

exports.VendorType = makeEnum({
  Staffing: 'Staffing',
  Product: 'Product',
  Project: 'Project'
});

exports.Prisma.ModelName = makeEnum({
  Address: 'Address',
  Account: 'Account',
  Vendor: 'Vendor',
  ProjectResource: 'ProjectResource',
  Invoice: 'Invoice',
  InvoiceItem: 'InvoiceItem',
  Project: 'Project',
  User: 'User',
  UserAttributes: 'UserAttributes',
  Timesheet: 'Timesheet',
  Calendar: 'Calendar',
  TimesheetEntries: 'TimesheetEntries',
  Notes: 'Notes',
  AppConfig: 'AppConfig',
  AccountConfig: 'AccountConfig'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
