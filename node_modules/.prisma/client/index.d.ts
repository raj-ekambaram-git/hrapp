
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model Address
 * 
 */
export type Address = {
  id: number
  type: AddressType
  address1: string
  address2: string | null
  address3: string | null
  county: string | null
  city: string
  state: string
  zipCode: string
  country: string
  primary: boolean
  createdDate: Date
  lastUpdateDate: Date
  status: AddressStatus
  accountId: number
  userId: number | null
  vendorId: number | null
}

/**
 * Model Account
 * 
 */
export type Account = {
  id: number
  name: string
  description: string
  ein: string
  bankId: number | null
  email: string
  phone: string
  status: AccountStatus
  createdDate: Date
  lastUpdateDate: Date
}

/**
 * Model Vendor
 * 
 */
export type Vendor = {
  id: number
  name: string
  description: string | null
  email: string
  phone: string
  type: VendorType
  accountId: number | null
  ein: string
  bankDetails: string | null
  status: VendorStatus
  createdDate: Date
  accountContactName: string | null
  accountContactEmail: string | null
  accountContactPhone: string | null
  lastUpdateDate: Date
}

/**
 * Model ProjectResource
 * 
 */
export type ProjectResource = {
  id: number
  projectId: number | null
  userId: number | null
  unitPrice: Prisma.Decimal | null
  currency: Currency | null
  quantity: number | null
  uom: UnitOfMeasure | null
  budgetAllocated: Prisma.Decimal | null
}

/**
 * Model Invoice
 * 
 */
export type Invoice = {
  id: number
  description: string
  type: InvoiceType
  vendorId: number | null
  accountId: number | null
  projectId: number | null
  invoiceDate: Date
  dueDte: Date | null
  transactionId: string | null
  notes: string | null
  total: Prisma.Decimal
  paidAmount: Prisma.Decimal | null
  status: InvoiceStatus
  paymentTerms: PaymentTerms
  createdDate: Date
  lastUpdateDate: Date
  userId: number | null
}

/**
 * Model InvoiceItem
 * 
 */
export type InvoiceItem = {
  id: number
  description: string | null
  type: InvoiceItemType
  unitPrice: Prisma.Decimal
  currency: Currency
  quantity: number
  uom: UnitOfMeasure
  total: Prisma.Decimal
  status: InvoiceStatus
  generalNote: string | null
  userId: number | null
  fromDate: Date | null
  toDate: Date | null
  createdDate: Date
  lastUpdateDate: Date
}

/**
 * Model Project
 * 
 */
export type Project = {
  id: number
  name: string
  referenceCode: string
  description: string
  type: InvoiceItemType
  invoiceCycle: InvoiceCycle
  addressId: number
  vendorId: number
  accountId: number
  budget: Prisma.Decimal
  totalHours: number | null
  averageRate: Prisma.Decimal | null
  status: ProjectStatus
  createdDate: Date
  lastUpdateDate: Date
}

/**
 * Model User
 * 
 */
export type User = {
  id: number
  firstName: string
  lastName: string
  role: Role
  email: string
  phone: string
  accountId: number | null
  vendorId: number | null
  isTimeSheetEnabled: boolean
  status: UserStatus
  password: string
  createdDate: Date
  lastUpdateDate: Date
}

/**
 * Model UserAttributes
 * 
 */
export type UserAttributes = {
  id: number
  userAttributeKey: UserAttributeKeys
  userAttributeValue: string | null
  createdDate: Date
  lastUpdateDate: Date
  userId: number
}


/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export const AccountStatus: {
  Active: 'Active',
  Inactive: 'Inactive',
  Fraud: 'Fraud'
};

export type AccountStatus = (typeof AccountStatus)[keyof typeof AccountStatus]


export const AddressStatus: {
  A: 'A',
  I: 'I',
  D: 'D'
};

export type AddressStatus = (typeof AddressStatus)[keyof typeof AddressStatus]


export const AddressType: {
  D: 'D',
  U: 'U',
  A: 'A',
  V: 'V'
};

export type AddressType = (typeof AddressType)[keyof typeof AddressType]


export const Currency: {
  USD: 'USD',
  INR: 'INR'
};

export type Currency = (typeof Currency)[keyof typeof Currency]


export const InvoiceCycle: {
  Weekly: 'Weekly',
  BiWeekly: 'BiWeekly',
  Monthly: 'Monthly',
  Quarterly: 'Quarterly',
  HalfYearly: 'HalfYearly',
  Yearly: 'Yearly'
};

export type InvoiceCycle = (typeof InvoiceCycle)[keyof typeof InvoiceCycle]


export const InvoiceItemType: {
  General: 'General',
  Projet: 'Projet',
  Staffing: 'Staffing'
};

export type InvoiceItemType = (typeof InvoiceItemType)[keyof typeof InvoiceItemType]


export const InvoiceStatus: {
  Draft: 'Draft',
  Submitted: 'Submitted',
  Pending: 'Pending',
  PartiallyPaid: 'PartiallyPaid',
  Paid: 'Paid',
  Cancelled: 'Cancelled'
};

export type InvoiceStatus = (typeof InvoiceStatus)[keyof typeof InvoiceStatus]


export const InvoiceType: {
  Staffing: 'Staffing',
  Product: 'Product',
  Project: 'Project'
};

export type InvoiceType = (typeof InvoiceType)[keyof typeof InvoiceType]


export const PaymentTerms: {
  Net30: 'Net30',
  Net45: 'Net45',
  Net60: 'Net60',
  Net90: 'Net90'
};

export type PaymentTerms = (typeof PaymentTerms)[keyof typeof PaymentTerms]


export const ProjectStatus: {
  Created: 'Created',
  Open: 'Open',
  Closed: 'Closed',
  Settled: 'Settled'
};

export type ProjectStatus = (typeof ProjectStatus)[keyof typeof ProjectStatus]


export const Role: {
  SUPER_ADMIN: 'SUPER_ADMIN',
  ACCOUNT_ADMIN: 'ACCOUNT_ADMIN',
  ACCOUNT_VENDOR_REP: 'ACCOUNT_VENDOR_REP',
  ACCOUNT_USER: 'ACCOUNT_USER',
  ACCOUNT_VENDOR_EMPLOYEE: 'ACCOUNT_VENDOR_EMPLOYEE',
  ACCOUNT_VENDOR_CONTRACTOR: 'ACCOUNT_VENDOR_CONTRACTOR',
  DEVELOPER: 'DEVELOPER'
};

export type Role = (typeof Role)[keyof typeof Role]


export const UnitOfMeasure: {
  hours: 'hours',
  item: 'item'
};

export type UnitOfMeasure = (typeof UnitOfMeasure)[keyof typeof UnitOfMeasure]


export const UserAttributeKeys: {
  default: 'default',
  rate: 'rate',
  startDate: 'startDate',
  endDate: 'endDate'
};

export type UserAttributeKeys = (typeof UserAttributeKeys)[keyof typeof UserAttributeKeys]


export const UserStatus: {
  Active: 'Active',
  Inactive: 'Inactive'
};

export type UserStatus = (typeof UserStatus)[keyof typeof UserStatus]


export const VendorStatus: {
  Approved: 'Approved',
  Rejected: 'Rejected',
  Active: 'Active',
  Inactive: 'Inactive',
  Fraud: 'Fraud'
};

export type VendorStatus = (typeof VendorStatus)[keyof typeof VendorStatus]


export const VendorType: {
  Staffing: 'Staffing',
  Product: 'Product',
  Project: 'Project'
};

export type VendorType = (typeof VendorType)[keyof typeof VendorType]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Addresses
 * const addresses = await prisma.address.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Addresses
   * const addresses = await prisma.address.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>;

  $transaction<R>(fn: (prisma: Prisma.TransactionClient) => Promise<R>, options?: {maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel}): Promise<R>;

      /**
   * `prisma.address`: Exposes CRUD operations for the **Address** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Addresses
    * const addresses = await prisma.address.findMany()
    * ```
    */
  get address(): Prisma.AddressDelegate<GlobalReject>;

  /**
   * `prisma.account`: Exposes CRUD operations for the **Account** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Accounts
    * const accounts = await prisma.account.findMany()
    * ```
    */
  get account(): Prisma.AccountDelegate<GlobalReject>;

  /**
   * `prisma.vendor`: Exposes CRUD operations for the **Vendor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Vendors
    * const vendors = await prisma.vendor.findMany()
    * ```
    */
  get vendor(): Prisma.VendorDelegate<GlobalReject>;

  /**
   * `prisma.projectResource`: Exposes CRUD operations for the **ProjectResource** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProjectResources
    * const projectResources = await prisma.projectResource.findMany()
    * ```
    */
  get projectResource(): Prisma.ProjectResourceDelegate<GlobalReject>;

  /**
   * `prisma.invoice`: Exposes CRUD operations for the **Invoice** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Invoices
    * const invoices = await prisma.invoice.findMany()
    * ```
    */
  get invoice(): Prisma.InvoiceDelegate<GlobalReject>;

  /**
   * `prisma.invoiceItem`: Exposes CRUD operations for the **InvoiceItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more InvoiceItems
    * const invoiceItems = await prisma.invoiceItem.findMany()
    * ```
    */
  get invoiceItem(): Prisma.InvoiceItemDelegate<GlobalReject>;

  /**
   * `prisma.project`: Exposes CRUD operations for the **Project** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Projects
    * const projects = await prisma.project.findMany()
    * ```
    */
  get project(): Prisma.ProjectDelegate<GlobalReject>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.userAttributes`: Exposes CRUD operations for the **UserAttributes** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserAttributes
    * const userAttributes = await prisma.userAttributes.findMany()
    * ```
    */
  get userAttributes(): Prisma.UserAttributesDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.7.1
   * Query Engine version: 272861e07ab64f234d3ffc4094e32bd61775599c
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    Address: 'Address',
    Account: 'Account',
    Vendor: 'Vendor',
    ProjectResource: 'ProjectResource',
    Invoice: 'Invoice',
    InvoiceItem: 'InvoiceItem',
    Project: 'Project',
    User: 'User',
    UserAttributes: 'UserAttributes'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<PrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type AddressCountOutputType
   */


  export type AddressCountOutputType = {
    Project: number
  }

  export type AddressCountOutputTypeSelect = {
    Project?: boolean
  }

  export type AddressCountOutputTypeGetPayload<S extends boolean | null | undefined | AddressCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? AddressCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (AddressCountOutputTypeArgs)
    ? AddressCountOutputType 
    : S extends { select: any } & (AddressCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof AddressCountOutputType ? AddressCountOutputType[P] : never
  } 
      : AddressCountOutputType




  // Custom InputTypes

  /**
   * AddressCountOutputType without action
   */
  export type AddressCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the AddressCountOutputType
     * 
    **/
    select?: AddressCountOutputTypeSelect | null
  }



  /**
   * Count Type AccountCountOutputType
   */


  export type AccountCountOutputType = {
    address: number
    Invoice: number
    Vendor: number
    User: number
    Project: number
  }

  export type AccountCountOutputTypeSelect = {
    address?: boolean
    Invoice?: boolean
    Vendor?: boolean
    User?: boolean
    Project?: boolean
  }

  export type AccountCountOutputTypeGetPayload<S extends boolean | null | undefined | AccountCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? AccountCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (AccountCountOutputTypeArgs)
    ? AccountCountOutputType 
    : S extends { select: any } & (AccountCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof AccountCountOutputType ? AccountCountOutputType[P] : never
  } 
      : AccountCountOutputType




  // Custom InputTypes

  /**
   * AccountCountOutputType without action
   */
  export type AccountCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the AccountCountOutputType
     * 
    **/
    select?: AccountCountOutputTypeSelect | null
  }



  /**
   * Count Type VendorCountOutputType
   */


  export type VendorCountOutputType = {
    address: number
    Invoice: number
    User: number
    Project: number
  }

  export type VendorCountOutputTypeSelect = {
    address?: boolean
    Invoice?: boolean
    User?: boolean
    Project?: boolean
  }

  export type VendorCountOutputTypeGetPayload<S extends boolean | null | undefined | VendorCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? VendorCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (VendorCountOutputTypeArgs)
    ? VendorCountOutputType 
    : S extends { select: any } & (VendorCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof VendorCountOutputType ? VendorCountOutputType[P] : never
  } 
      : VendorCountOutputType




  // Custom InputTypes

  /**
   * VendorCountOutputType without action
   */
  export type VendorCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the VendorCountOutputType
     * 
    **/
    select?: VendorCountOutputTypeSelect | null
  }



  /**
   * Count Type ProjectCountOutputType
   */


  export type ProjectCountOutputType = {
    Invoice: number
    ProjectResource: number
  }

  export type ProjectCountOutputTypeSelect = {
    Invoice?: boolean
    ProjectResource?: boolean
  }

  export type ProjectCountOutputTypeGetPayload<S extends boolean | null | undefined | ProjectCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ProjectCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (ProjectCountOutputTypeArgs)
    ? ProjectCountOutputType 
    : S extends { select: any } & (ProjectCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof ProjectCountOutputType ? ProjectCountOutputType[P] : never
  } 
      : ProjectCountOutputType




  // Custom InputTypes

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ProjectCountOutputType
     * 
    **/
    select?: ProjectCountOutputTypeSelect | null
  }



  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    address: number
    userAttributes: number
    Invoice: number
    InvoiceItem: number
    ProjectResource: number
  }

  export type UserCountOutputTypeSelect = {
    address?: boolean
    userAttributes?: boolean
    Invoice?: boolean
    InvoiceItem?: boolean
    ProjectResource?: boolean
  }

  export type UserCountOutputTypeGetPayload<S extends boolean | null | undefined | UserCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? UserCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (UserCountOutputTypeArgs)
    ? UserCountOutputType 
    : S extends { select: any } & (UserCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
      : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     * 
    **/
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model Address
   */


  export type AggregateAddress = {
    _count: AddressCountAggregateOutputType | null
    _avg: AddressAvgAggregateOutputType | null
    _sum: AddressSumAggregateOutputType | null
    _min: AddressMinAggregateOutputType | null
    _max: AddressMaxAggregateOutputType | null
  }

  export type AddressAvgAggregateOutputType = {
    id: number | null
    accountId: number | null
    userId: number | null
    vendorId: number | null
  }

  export type AddressSumAggregateOutputType = {
    id: number | null
    accountId: number | null
    userId: number | null
    vendorId: number | null
  }

  export type AddressMinAggregateOutputType = {
    id: number | null
    type: AddressType | null
    address1: string | null
    address2: string | null
    address3: string | null
    county: string | null
    city: string | null
    state: string | null
    zipCode: string | null
    country: string | null
    primary: boolean | null
    createdDate: Date | null
    lastUpdateDate: Date | null
    status: AddressStatus | null
    accountId: number | null
    userId: number | null
    vendorId: number | null
  }

  export type AddressMaxAggregateOutputType = {
    id: number | null
    type: AddressType | null
    address1: string | null
    address2: string | null
    address3: string | null
    county: string | null
    city: string | null
    state: string | null
    zipCode: string | null
    country: string | null
    primary: boolean | null
    createdDate: Date | null
    lastUpdateDate: Date | null
    status: AddressStatus | null
    accountId: number | null
    userId: number | null
    vendorId: number | null
  }

  export type AddressCountAggregateOutputType = {
    id: number
    type: number
    address1: number
    address2: number
    address3: number
    county: number
    city: number
    state: number
    zipCode: number
    country: number
    primary: number
    createdDate: number
    lastUpdateDate: number
    status: number
    accountId: number
    userId: number
    vendorId: number
    _all: number
  }


  export type AddressAvgAggregateInputType = {
    id?: true
    accountId?: true
    userId?: true
    vendorId?: true
  }

  export type AddressSumAggregateInputType = {
    id?: true
    accountId?: true
    userId?: true
    vendorId?: true
  }

  export type AddressMinAggregateInputType = {
    id?: true
    type?: true
    address1?: true
    address2?: true
    address3?: true
    county?: true
    city?: true
    state?: true
    zipCode?: true
    country?: true
    primary?: true
    createdDate?: true
    lastUpdateDate?: true
    status?: true
    accountId?: true
    userId?: true
    vendorId?: true
  }

  export type AddressMaxAggregateInputType = {
    id?: true
    type?: true
    address1?: true
    address2?: true
    address3?: true
    county?: true
    city?: true
    state?: true
    zipCode?: true
    country?: true
    primary?: true
    createdDate?: true
    lastUpdateDate?: true
    status?: true
    accountId?: true
    userId?: true
    vendorId?: true
  }

  export type AddressCountAggregateInputType = {
    id?: true
    type?: true
    address1?: true
    address2?: true
    address3?: true
    county?: true
    city?: true
    state?: true
    zipCode?: true
    country?: true
    primary?: true
    createdDate?: true
    lastUpdateDate?: true
    status?: true
    accountId?: true
    userId?: true
    vendorId?: true
    _all?: true
  }

  export type AddressAggregateArgs = {
    /**
     * Filter which Address to aggregate.
     * 
    **/
    where?: AddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Addresses to fetch.
     * 
    **/
    orderBy?: Enumerable<AddressOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: AddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Addresses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Addresses.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Addresses
    **/
    _count?: true | AddressCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AddressAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AddressSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AddressMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AddressMaxAggregateInputType
  }

  export type GetAddressAggregateType<T extends AddressAggregateArgs> = {
        [P in keyof T & keyof AggregateAddress]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAddress[P]>
      : GetScalarType<T[P], AggregateAddress[P]>
  }




  export type AddressGroupByArgs = {
    where?: AddressWhereInput
    orderBy?: Enumerable<AddressOrderByWithAggregationInput>
    by: Array<AddressScalarFieldEnum>
    having?: AddressScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AddressCountAggregateInputType | true
    _avg?: AddressAvgAggregateInputType
    _sum?: AddressSumAggregateInputType
    _min?: AddressMinAggregateInputType
    _max?: AddressMaxAggregateInputType
  }


  export type AddressGroupByOutputType = {
    id: number
    type: AddressType
    address1: string
    address2: string | null
    address3: string | null
    county: string | null
    city: string
    state: string
    zipCode: string
    country: string
    primary: boolean
    createdDate: Date
    lastUpdateDate: Date
    status: AddressStatus
    accountId: number
    userId: number | null
    vendorId: number | null
    _count: AddressCountAggregateOutputType | null
    _avg: AddressAvgAggregateOutputType | null
    _sum: AddressSumAggregateOutputType | null
    _min: AddressMinAggregateOutputType | null
    _max: AddressMaxAggregateOutputType | null
  }

  type GetAddressGroupByPayload<T extends AddressGroupByArgs> = PrismaPromise<
    Array<
      PickArray<AddressGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AddressGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AddressGroupByOutputType[P]>
            : GetScalarType<T[P], AddressGroupByOutputType[P]>
        }
      >
    >


  export type AddressSelect = {
    id?: boolean
    type?: boolean
    address1?: boolean
    address2?: boolean
    address3?: boolean
    county?: boolean
    city?: boolean
    state?: boolean
    zipCode?: boolean
    country?: boolean
    primary?: boolean
    createdDate?: boolean
    lastUpdateDate?: boolean
    status?: boolean
    account?: boolean | AccountArgs
    accountId?: boolean
    User?: boolean | UserArgs
    userId?: boolean
    Vendor?: boolean | VendorArgs
    vendorId?: boolean
    Project?: boolean | ProjectFindManyArgs
    _count?: boolean | AddressCountOutputTypeArgs
  }


  export type AddressInclude = {
    account?: boolean | AccountArgs
    User?: boolean | UserArgs
    Vendor?: boolean | VendorArgs
    Project?: boolean | ProjectFindManyArgs
    _count?: boolean | AddressCountOutputTypeArgs
  } 

  export type AddressGetPayload<S extends boolean | null | undefined | AddressArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Address :
    S extends undefined ? never :
    S extends { include: any } & (AddressArgs | AddressFindManyArgs)
    ? Address  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'account' ? AccountGetPayload<S['include'][P]> :
        P extends 'User' ? UserGetPayload<S['include'][P]> | null :
        P extends 'Vendor' ? VendorGetPayload<S['include'][P]> | null :
        P extends 'Project' ? Array < ProjectGetPayload<S['include'][P]>>  :
        P extends '_count' ? AddressCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (AddressArgs | AddressFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'account' ? AccountGetPayload<S['select'][P]> :
        P extends 'User' ? UserGetPayload<S['select'][P]> | null :
        P extends 'Vendor' ? VendorGetPayload<S['select'][P]> | null :
        P extends 'Project' ? Array < ProjectGetPayload<S['select'][P]>>  :
        P extends '_count' ? AddressCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Address ? Address[P] : never
  } 
      : Address


  type AddressCountArgs = Merge<
    Omit<AddressFindManyArgs, 'select' | 'include'> & {
      select?: AddressCountAggregateInputType | true
    }
  >

  export interface AddressDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Address that matches the filter.
     * @param {AddressFindUniqueArgs} args - Arguments to find a Address
     * @example
     * // Get one Address
     * const address = await prisma.address.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AddressFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, AddressFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Address'> extends True ? Prisma__AddressClient<AddressGetPayload<T>> : Prisma__AddressClient<AddressGetPayload<T> | null, null>

    /**
     * Find one Address that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AddressFindUniqueOrThrowArgs} args - Arguments to find a Address
     * @example
     * // Get one Address
     * const address = await prisma.address.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AddressFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, AddressFindUniqueOrThrowArgs>
    ): Prisma__AddressClient<AddressGetPayload<T>>

    /**
     * Find the first Address that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressFindFirstArgs} args - Arguments to find a Address
     * @example
     * // Get one Address
     * const address = await prisma.address.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AddressFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, AddressFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Address'> extends True ? Prisma__AddressClient<AddressGetPayload<T>> : Prisma__AddressClient<AddressGetPayload<T> | null, null>

    /**
     * Find the first Address that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressFindFirstOrThrowArgs} args - Arguments to find a Address
     * @example
     * // Get one Address
     * const address = await prisma.address.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AddressFindFirstOrThrowArgs>(
      args?: SelectSubset<T, AddressFindFirstOrThrowArgs>
    ): Prisma__AddressClient<AddressGetPayload<T>>

    /**
     * Find zero or more Addresses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Addresses
     * const addresses = await prisma.address.findMany()
     * 
     * // Get first 10 Addresses
     * const addresses = await prisma.address.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const addressWithIdOnly = await prisma.address.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AddressFindManyArgs>(
      args?: SelectSubset<T, AddressFindManyArgs>
    ): PrismaPromise<Array<AddressGetPayload<T>>>

    /**
     * Create a Address.
     * @param {AddressCreateArgs} args - Arguments to create a Address.
     * @example
     * // Create one Address
     * const Address = await prisma.address.create({
     *   data: {
     *     // ... data to create a Address
     *   }
     * })
     * 
    **/
    create<T extends AddressCreateArgs>(
      args: SelectSubset<T, AddressCreateArgs>
    ): Prisma__AddressClient<AddressGetPayload<T>>

    /**
     * Create many Addresses.
     *     @param {AddressCreateManyArgs} args - Arguments to create many Addresses.
     *     @example
     *     // Create many Addresses
     *     const address = await prisma.address.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AddressCreateManyArgs>(
      args?: SelectSubset<T, AddressCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Address.
     * @param {AddressDeleteArgs} args - Arguments to delete one Address.
     * @example
     * // Delete one Address
     * const Address = await prisma.address.delete({
     *   where: {
     *     // ... filter to delete one Address
     *   }
     * })
     * 
    **/
    delete<T extends AddressDeleteArgs>(
      args: SelectSubset<T, AddressDeleteArgs>
    ): Prisma__AddressClient<AddressGetPayload<T>>

    /**
     * Update one Address.
     * @param {AddressUpdateArgs} args - Arguments to update one Address.
     * @example
     * // Update one Address
     * const address = await prisma.address.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AddressUpdateArgs>(
      args: SelectSubset<T, AddressUpdateArgs>
    ): Prisma__AddressClient<AddressGetPayload<T>>

    /**
     * Delete zero or more Addresses.
     * @param {AddressDeleteManyArgs} args - Arguments to filter Addresses to delete.
     * @example
     * // Delete a few Addresses
     * const { count } = await prisma.address.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AddressDeleteManyArgs>(
      args?: SelectSubset<T, AddressDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Addresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Addresses
     * const address = await prisma.address.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AddressUpdateManyArgs>(
      args: SelectSubset<T, AddressUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Address.
     * @param {AddressUpsertArgs} args - Arguments to update or create a Address.
     * @example
     * // Update or create a Address
     * const address = await prisma.address.upsert({
     *   create: {
     *     // ... data to create a Address
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Address we want to update
     *   }
     * })
    **/
    upsert<T extends AddressUpsertArgs>(
      args: SelectSubset<T, AddressUpsertArgs>
    ): Prisma__AddressClient<AddressGetPayload<T>>

    /**
     * Count the number of Addresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressCountArgs} args - Arguments to filter Addresses to count.
     * @example
     * // Count the number of Addresses
     * const count = await prisma.address.count({
     *   where: {
     *     // ... the filter for the Addresses we want to count
     *   }
     * })
    **/
    count<T extends AddressCountArgs>(
      args?: Subset<T, AddressCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AddressCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Address.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AddressAggregateArgs>(args: Subset<T, AddressAggregateArgs>): PrismaPromise<GetAddressAggregateType<T>>

    /**
     * Group by Address.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AddressGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AddressGroupByArgs['orderBy'] }
        : { orderBy?: AddressGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AddressGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAddressGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Address.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AddressClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    account<T extends AccountArgs= {}>(args?: Subset<T, AccountArgs>): Prisma__AccountClient<AccountGetPayload<T> | Null>;

    User<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    Vendor<T extends VendorArgs= {}>(args?: Subset<T, VendorArgs>): Prisma__VendorClient<VendorGetPayload<T> | Null>;

    Project<T extends ProjectFindManyArgs= {}>(args?: Subset<T, ProjectFindManyArgs>): PrismaPromise<Array<ProjectGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Address base type for findUnique actions
   */
  export type AddressFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Address
     * 
    **/
    select?: AddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AddressInclude | null
    /**
     * Filter, which Address to fetch.
     * 
    **/
    where: AddressWhereUniqueInput
  }

  /**
   * Address: findUnique
   */
  export interface AddressFindUniqueArgs extends AddressFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Address findUniqueOrThrow
   */
  export type AddressFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Address
     * 
    **/
    select?: AddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AddressInclude | null
    /**
     * Filter, which Address to fetch.
     * 
    **/
    where: AddressWhereUniqueInput
  }


  /**
   * Address base type for findFirst actions
   */
  export type AddressFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Address
     * 
    **/
    select?: AddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AddressInclude | null
    /**
     * Filter, which Address to fetch.
     * 
    **/
    where?: AddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Addresses to fetch.
     * 
    **/
    orderBy?: Enumerable<AddressOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Addresses.
     * 
    **/
    cursor?: AddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Addresses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Addresses.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Addresses.
     * 
    **/
    distinct?: Enumerable<AddressScalarFieldEnum>
  }

  /**
   * Address: findFirst
   */
  export interface AddressFindFirstArgs extends AddressFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Address findFirstOrThrow
   */
  export type AddressFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Address
     * 
    **/
    select?: AddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AddressInclude | null
    /**
     * Filter, which Address to fetch.
     * 
    **/
    where?: AddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Addresses to fetch.
     * 
    **/
    orderBy?: Enumerable<AddressOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Addresses.
     * 
    **/
    cursor?: AddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Addresses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Addresses.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Addresses.
     * 
    **/
    distinct?: Enumerable<AddressScalarFieldEnum>
  }


  /**
   * Address findMany
   */
  export type AddressFindManyArgs = {
    /**
     * Select specific fields to fetch from the Address
     * 
    **/
    select?: AddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AddressInclude | null
    /**
     * Filter, which Addresses to fetch.
     * 
    **/
    where?: AddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Addresses to fetch.
     * 
    **/
    orderBy?: Enumerable<AddressOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Addresses.
     * 
    **/
    cursor?: AddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Addresses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Addresses.
     * 
    **/
    skip?: number
    distinct?: Enumerable<AddressScalarFieldEnum>
  }


  /**
   * Address create
   */
  export type AddressCreateArgs = {
    /**
     * Select specific fields to fetch from the Address
     * 
    **/
    select?: AddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AddressInclude | null
    /**
     * The data needed to create a Address.
     * 
    **/
    data: XOR<AddressCreateInput, AddressUncheckedCreateInput>
  }


  /**
   * Address createMany
   */
  export type AddressCreateManyArgs = {
    /**
     * The data used to create many Addresses.
     * 
    **/
    data: Enumerable<AddressCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Address update
   */
  export type AddressUpdateArgs = {
    /**
     * Select specific fields to fetch from the Address
     * 
    **/
    select?: AddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AddressInclude | null
    /**
     * The data needed to update a Address.
     * 
    **/
    data: XOR<AddressUpdateInput, AddressUncheckedUpdateInput>
    /**
     * Choose, which Address to update.
     * 
    **/
    where: AddressWhereUniqueInput
  }


  /**
   * Address updateMany
   */
  export type AddressUpdateManyArgs = {
    /**
     * The data used to update Addresses.
     * 
    **/
    data: XOR<AddressUpdateManyMutationInput, AddressUncheckedUpdateManyInput>
    /**
     * Filter which Addresses to update
     * 
    **/
    where?: AddressWhereInput
  }


  /**
   * Address upsert
   */
  export type AddressUpsertArgs = {
    /**
     * Select specific fields to fetch from the Address
     * 
    **/
    select?: AddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AddressInclude | null
    /**
     * The filter to search for the Address to update in case it exists.
     * 
    **/
    where: AddressWhereUniqueInput
    /**
     * In case the Address found by the `where` argument doesn't exist, create a new Address with this data.
     * 
    **/
    create: XOR<AddressCreateInput, AddressUncheckedCreateInput>
    /**
     * In case the Address was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<AddressUpdateInput, AddressUncheckedUpdateInput>
  }


  /**
   * Address delete
   */
  export type AddressDeleteArgs = {
    /**
     * Select specific fields to fetch from the Address
     * 
    **/
    select?: AddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AddressInclude | null
    /**
     * Filter which Address to delete.
     * 
    **/
    where: AddressWhereUniqueInput
  }


  /**
   * Address deleteMany
   */
  export type AddressDeleteManyArgs = {
    /**
     * Filter which Addresses to delete
     * 
    **/
    where?: AddressWhereInput
  }


  /**
   * Address without action
   */
  export type AddressArgs = {
    /**
     * Select specific fields to fetch from the Address
     * 
    **/
    select?: AddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AddressInclude | null
  }



  /**
   * Model Account
   */


  export type AggregateAccount = {
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  export type AccountAvgAggregateOutputType = {
    id: number | null
    bankId: number | null
  }

  export type AccountSumAggregateOutputType = {
    id: number | null
    bankId: number | null
  }

  export type AccountMinAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    ein: string | null
    bankId: number | null
    email: string | null
    phone: string | null
    status: AccountStatus | null
    createdDate: Date | null
    lastUpdateDate: Date | null
  }

  export type AccountMaxAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    ein: string | null
    bankId: number | null
    email: string | null
    phone: string | null
    status: AccountStatus | null
    createdDate: Date | null
    lastUpdateDate: Date | null
  }

  export type AccountCountAggregateOutputType = {
    id: number
    name: number
    description: number
    ein: number
    bankId: number
    email: number
    phone: number
    status: number
    createdDate: number
    lastUpdateDate: number
    _all: number
  }


  export type AccountAvgAggregateInputType = {
    id?: true
    bankId?: true
  }

  export type AccountSumAggregateInputType = {
    id?: true
    bankId?: true
  }

  export type AccountMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    ein?: true
    bankId?: true
    email?: true
    phone?: true
    status?: true
    createdDate?: true
    lastUpdateDate?: true
  }

  export type AccountMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    ein?: true
    bankId?: true
    email?: true
    phone?: true
    status?: true
    createdDate?: true
    lastUpdateDate?: true
  }

  export type AccountCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    ein?: true
    bankId?: true
    email?: true
    phone?: true
    status?: true
    createdDate?: true
    lastUpdateDate?: true
    _all?: true
  }

  export type AccountAggregateArgs = {
    /**
     * Filter which Account to aggregate.
     * 
    **/
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     * 
    **/
    orderBy?: Enumerable<AccountOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Accounts
    **/
    _count?: true | AccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AccountAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AccountSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountMaxAggregateInputType
  }

  export type GetAccountAggregateType<T extends AccountAggregateArgs> = {
        [P in keyof T & keyof AggregateAccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccount[P]>
      : GetScalarType<T[P], AggregateAccount[P]>
  }




  export type AccountGroupByArgs = {
    where?: AccountWhereInput
    orderBy?: Enumerable<AccountOrderByWithAggregationInput>
    by: Array<AccountScalarFieldEnum>
    having?: AccountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountCountAggregateInputType | true
    _avg?: AccountAvgAggregateInputType
    _sum?: AccountSumAggregateInputType
    _min?: AccountMinAggregateInputType
    _max?: AccountMaxAggregateInputType
  }


  export type AccountGroupByOutputType = {
    id: number
    name: string
    description: string
    ein: string
    bankId: number | null
    email: string
    phone: string
    status: AccountStatus
    createdDate: Date
    lastUpdateDate: Date
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  type GetAccountGroupByPayload<T extends AccountGroupByArgs> = PrismaPromise<
    Array<
      PickArray<AccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountGroupByOutputType[P]>
            : GetScalarType<T[P], AccountGroupByOutputType[P]>
        }
      >
    >


  export type AccountSelect = {
    id?: boolean
    name?: boolean
    description?: boolean
    ein?: boolean
    bankId?: boolean
    email?: boolean
    phone?: boolean
    status?: boolean
    createdDate?: boolean
    lastUpdateDate?: boolean
    address?: boolean | AddressFindManyArgs
    Invoice?: boolean | InvoiceFindManyArgs
    Vendor?: boolean | VendorFindManyArgs
    User?: boolean | UserFindManyArgs
    Project?: boolean | ProjectFindManyArgs
    _count?: boolean | AccountCountOutputTypeArgs
  }


  export type AccountInclude = {
    address?: boolean | AddressFindManyArgs
    Invoice?: boolean | InvoiceFindManyArgs
    Vendor?: boolean | VendorFindManyArgs
    User?: boolean | UserFindManyArgs
    Project?: boolean | ProjectFindManyArgs
    _count?: boolean | AccountCountOutputTypeArgs
  } 

  export type AccountGetPayload<S extends boolean | null | undefined | AccountArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Account :
    S extends undefined ? never :
    S extends { include: any } & (AccountArgs | AccountFindManyArgs)
    ? Account  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'address' ? Array < AddressGetPayload<S['include'][P]>>  :
        P extends 'Invoice' ? Array < InvoiceGetPayload<S['include'][P]>>  :
        P extends 'Vendor' ? Array < VendorGetPayload<S['include'][P]>>  :
        P extends 'User' ? Array < UserGetPayload<S['include'][P]>>  :
        P extends 'Project' ? Array < ProjectGetPayload<S['include'][P]>>  :
        P extends '_count' ? AccountCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (AccountArgs | AccountFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'address' ? Array < AddressGetPayload<S['select'][P]>>  :
        P extends 'Invoice' ? Array < InvoiceGetPayload<S['select'][P]>>  :
        P extends 'Vendor' ? Array < VendorGetPayload<S['select'][P]>>  :
        P extends 'User' ? Array < UserGetPayload<S['select'][P]>>  :
        P extends 'Project' ? Array < ProjectGetPayload<S['select'][P]>>  :
        P extends '_count' ? AccountCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Account ? Account[P] : never
  } 
      : Account


  type AccountCountArgs = Merge<
    Omit<AccountFindManyArgs, 'select' | 'include'> & {
      select?: AccountCountAggregateInputType | true
    }
  >

  export interface AccountDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Account that matches the filter.
     * @param {AccountFindUniqueArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AccountFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, AccountFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Account'> extends True ? Prisma__AccountClient<AccountGetPayload<T>> : Prisma__AccountClient<AccountGetPayload<T> | null, null>

    /**
     * Find one Account that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AccountFindUniqueOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AccountFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, AccountFindUniqueOrThrowArgs>
    ): Prisma__AccountClient<AccountGetPayload<T>>

    /**
     * Find the first Account that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AccountFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, AccountFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Account'> extends True ? Prisma__AccountClient<AccountGetPayload<T>> : Prisma__AccountClient<AccountGetPayload<T> | null, null>

    /**
     * Find the first Account that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AccountFindFirstOrThrowArgs>(
      args?: SelectSubset<T, AccountFindFirstOrThrowArgs>
    ): Prisma__AccountClient<AccountGetPayload<T>>

    /**
     * Find zero or more Accounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Accounts
     * const accounts = await prisma.account.findMany()
     * 
     * // Get first 10 Accounts
     * const accounts = await prisma.account.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accountWithIdOnly = await prisma.account.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AccountFindManyArgs>(
      args?: SelectSubset<T, AccountFindManyArgs>
    ): PrismaPromise<Array<AccountGetPayload<T>>>

    /**
     * Create a Account.
     * @param {AccountCreateArgs} args - Arguments to create a Account.
     * @example
     * // Create one Account
     * const Account = await prisma.account.create({
     *   data: {
     *     // ... data to create a Account
     *   }
     * })
     * 
    **/
    create<T extends AccountCreateArgs>(
      args: SelectSubset<T, AccountCreateArgs>
    ): Prisma__AccountClient<AccountGetPayload<T>>

    /**
     * Create many Accounts.
     *     @param {AccountCreateManyArgs} args - Arguments to create many Accounts.
     *     @example
     *     // Create many Accounts
     *     const account = await prisma.account.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AccountCreateManyArgs>(
      args?: SelectSubset<T, AccountCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Account.
     * @param {AccountDeleteArgs} args - Arguments to delete one Account.
     * @example
     * // Delete one Account
     * const Account = await prisma.account.delete({
     *   where: {
     *     // ... filter to delete one Account
     *   }
     * })
     * 
    **/
    delete<T extends AccountDeleteArgs>(
      args: SelectSubset<T, AccountDeleteArgs>
    ): Prisma__AccountClient<AccountGetPayload<T>>

    /**
     * Update one Account.
     * @param {AccountUpdateArgs} args - Arguments to update one Account.
     * @example
     * // Update one Account
     * const account = await prisma.account.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AccountUpdateArgs>(
      args: SelectSubset<T, AccountUpdateArgs>
    ): Prisma__AccountClient<AccountGetPayload<T>>

    /**
     * Delete zero or more Accounts.
     * @param {AccountDeleteManyArgs} args - Arguments to filter Accounts to delete.
     * @example
     * // Delete a few Accounts
     * const { count } = await prisma.account.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AccountDeleteManyArgs>(
      args?: SelectSubset<T, AccountDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AccountUpdateManyArgs>(
      args: SelectSubset<T, AccountUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Account.
     * @param {AccountUpsertArgs} args - Arguments to update or create a Account.
     * @example
     * // Update or create a Account
     * const account = await prisma.account.upsert({
     *   create: {
     *     // ... data to create a Account
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Account we want to update
     *   }
     * })
    **/
    upsert<T extends AccountUpsertArgs>(
      args: SelectSubset<T, AccountUpsertArgs>
    ): Prisma__AccountClient<AccountGetPayload<T>>

    /**
     * Count the number of Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountCountArgs} args - Arguments to filter Accounts to count.
     * @example
     * // Count the number of Accounts
     * const count = await prisma.account.count({
     *   where: {
     *     // ... the filter for the Accounts we want to count
     *   }
     * })
    **/
    count<T extends AccountCountArgs>(
      args?: Subset<T, AccountCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountAggregateArgs>(args: Subset<T, AccountAggregateArgs>): PrismaPromise<GetAccountAggregateType<T>>

    /**
     * Group by Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountGroupByArgs['orderBy'] }
        : { orderBy?: AccountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Account.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AccountClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    address<T extends AddressFindManyArgs= {}>(args?: Subset<T, AddressFindManyArgs>): PrismaPromise<Array<AddressGetPayload<T>>| Null>;

    Invoice<T extends InvoiceFindManyArgs= {}>(args?: Subset<T, InvoiceFindManyArgs>): PrismaPromise<Array<InvoiceGetPayload<T>>| Null>;

    Vendor<T extends VendorFindManyArgs= {}>(args?: Subset<T, VendorFindManyArgs>): PrismaPromise<Array<VendorGetPayload<T>>| Null>;

    User<T extends UserFindManyArgs= {}>(args?: Subset<T, UserFindManyArgs>): PrismaPromise<Array<UserGetPayload<T>>| Null>;

    Project<T extends ProjectFindManyArgs= {}>(args?: Subset<T, ProjectFindManyArgs>): PrismaPromise<Array<ProjectGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Account base type for findUnique actions
   */
  export type AccountFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Account
     * 
    **/
    select?: AccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AccountInclude | null
    /**
     * Filter, which Account to fetch.
     * 
    **/
    where: AccountWhereUniqueInput
  }

  /**
   * Account: findUnique
   */
  export interface AccountFindUniqueArgs extends AccountFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Account findUniqueOrThrow
   */
  export type AccountFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Account
     * 
    **/
    select?: AccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AccountInclude | null
    /**
     * Filter, which Account to fetch.
     * 
    **/
    where: AccountWhereUniqueInput
  }


  /**
   * Account base type for findFirst actions
   */
  export type AccountFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Account
     * 
    **/
    select?: AccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AccountInclude | null
    /**
     * Filter, which Account to fetch.
     * 
    **/
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     * 
    **/
    orderBy?: Enumerable<AccountOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     * 
    **/
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     * 
    **/
    distinct?: Enumerable<AccountScalarFieldEnum>
  }

  /**
   * Account: findFirst
   */
  export interface AccountFindFirstArgs extends AccountFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Account findFirstOrThrow
   */
  export type AccountFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Account
     * 
    **/
    select?: AccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AccountInclude | null
    /**
     * Filter, which Account to fetch.
     * 
    **/
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     * 
    **/
    orderBy?: Enumerable<AccountOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     * 
    **/
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     * 
    **/
    distinct?: Enumerable<AccountScalarFieldEnum>
  }


  /**
   * Account findMany
   */
  export type AccountFindManyArgs = {
    /**
     * Select specific fields to fetch from the Account
     * 
    **/
    select?: AccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AccountInclude | null
    /**
     * Filter, which Accounts to fetch.
     * 
    **/
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     * 
    **/
    orderBy?: Enumerable<AccountOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Accounts.
     * 
    **/
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     * 
    **/
    skip?: number
    distinct?: Enumerable<AccountScalarFieldEnum>
  }


  /**
   * Account create
   */
  export type AccountCreateArgs = {
    /**
     * Select specific fields to fetch from the Account
     * 
    **/
    select?: AccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AccountInclude | null
    /**
     * The data needed to create a Account.
     * 
    **/
    data: XOR<AccountCreateInput, AccountUncheckedCreateInput>
  }


  /**
   * Account createMany
   */
  export type AccountCreateManyArgs = {
    /**
     * The data used to create many Accounts.
     * 
    **/
    data: Enumerable<AccountCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Account update
   */
  export type AccountUpdateArgs = {
    /**
     * Select specific fields to fetch from the Account
     * 
    **/
    select?: AccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AccountInclude | null
    /**
     * The data needed to update a Account.
     * 
    **/
    data: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
    /**
     * Choose, which Account to update.
     * 
    **/
    where: AccountWhereUniqueInput
  }


  /**
   * Account updateMany
   */
  export type AccountUpdateManyArgs = {
    /**
     * The data used to update Accounts.
     * 
    **/
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     * 
    **/
    where?: AccountWhereInput
  }


  /**
   * Account upsert
   */
  export type AccountUpsertArgs = {
    /**
     * Select specific fields to fetch from the Account
     * 
    **/
    select?: AccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AccountInclude | null
    /**
     * The filter to search for the Account to update in case it exists.
     * 
    **/
    where: AccountWhereUniqueInput
    /**
     * In case the Account found by the `where` argument doesn't exist, create a new Account with this data.
     * 
    **/
    create: XOR<AccountCreateInput, AccountUncheckedCreateInput>
    /**
     * In case the Account was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
  }


  /**
   * Account delete
   */
  export type AccountDeleteArgs = {
    /**
     * Select specific fields to fetch from the Account
     * 
    **/
    select?: AccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AccountInclude | null
    /**
     * Filter which Account to delete.
     * 
    **/
    where: AccountWhereUniqueInput
  }


  /**
   * Account deleteMany
   */
  export type AccountDeleteManyArgs = {
    /**
     * Filter which Accounts to delete
     * 
    **/
    where?: AccountWhereInput
  }


  /**
   * Account without action
   */
  export type AccountArgs = {
    /**
     * Select specific fields to fetch from the Account
     * 
    **/
    select?: AccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AccountInclude | null
  }



  /**
   * Model Vendor
   */


  export type AggregateVendor = {
    _count: VendorCountAggregateOutputType | null
    _avg: VendorAvgAggregateOutputType | null
    _sum: VendorSumAggregateOutputType | null
    _min: VendorMinAggregateOutputType | null
    _max: VendorMaxAggregateOutputType | null
  }

  export type VendorAvgAggregateOutputType = {
    id: number | null
    accountId: number | null
  }

  export type VendorSumAggregateOutputType = {
    id: number | null
    accountId: number | null
  }

  export type VendorMinAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    email: string | null
    phone: string | null
    type: VendorType | null
    accountId: number | null
    ein: string | null
    bankDetails: string | null
    status: VendorStatus | null
    createdDate: Date | null
    accountContactName: string | null
    accountContactEmail: string | null
    accountContactPhone: string | null
    lastUpdateDate: Date | null
  }

  export type VendorMaxAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    email: string | null
    phone: string | null
    type: VendorType | null
    accountId: number | null
    ein: string | null
    bankDetails: string | null
    status: VendorStatus | null
    createdDate: Date | null
    accountContactName: string | null
    accountContactEmail: string | null
    accountContactPhone: string | null
    lastUpdateDate: Date | null
  }

  export type VendorCountAggregateOutputType = {
    id: number
    name: number
    description: number
    email: number
    phone: number
    type: number
    accountId: number
    ein: number
    bankDetails: number
    status: number
    createdDate: number
    accountContactName: number
    accountContactEmail: number
    accountContactPhone: number
    lastUpdateDate: number
    _all: number
  }


  export type VendorAvgAggregateInputType = {
    id?: true
    accountId?: true
  }

  export type VendorSumAggregateInputType = {
    id?: true
    accountId?: true
  }

  export type VendorMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    email?: true
    phone?: true
    type?: true
    accountId?: true
    ein?: true
    bankDetails?: true
    status?: true
    createdDate?: true
    accountContactName?: true
    accountContactEmail?: true
    accountContactPhone?: true
    lastUpdateDate?: true
  }

  export type VendorMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    email?: true
    phone?: true
    type?: true
    accountId?: true
    ein?: true
    bankDetails?: true
    status?: true
    createdDate?: true
    accountContactName?: true
    accountContactEmail?: true
    accountContactPhone?: true
    lastUpdateDate?: true
  }

  export type VendorCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    email?: true
    phone?: true
    type?: true
    accountId?: true
    ein?: true
    bankDetails?: true
    status?: true
    createdDate?: true
    accountContactName?: true
    accountContactEmail?: true
    accountContactPhone?: true
    lastUpdateDate?: true
    _all?: true
  }

  export type VendorAggregateArgs = {
    /**
     * Filter which Vendor to aggregate.
     * 
    **/
    where?: VendorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vendors to fetch.
     * 
    **/
    orderBy?: Enumerable<VendorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: VendorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vendors from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vendors.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Vendors
    **/
    _count?: true | VendorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VendorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VendorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VendorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VendorMaxAggregateInputType
  }

  export type GetVendorAggregateType<T extends VendorAggregateArgs> = {
        [P in keyof T & keyof AggregateVendor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVendor[P]>
      : GetScalarType<T[P], AggregateVendor[P]>
  }




  export type VendorGroupByArgs = {
    where?: VendorWhereInput
    orderBy?: Enumerable<VendorOrderByWithAggregationInput>
    by: Array<VendorScalarFieldEnum>
    having?: VendorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VendorCountAggregateInputType | true
    _avg?: VendorAvgAggregateInputType
    _sum?: VendorSumAggregateInputType
    _min?: VendorMinAggregateInputType
    _max?: VendorMaxAggregateInputType
  }


  export type VendorGroupByOutputType = {
    id: number
    name: string
    description: string | null
    email: string
    phone: string
    type: VendorType
    accountId: number | null
    ein: string
    bankDetails: string | null
    status: VendorStatus
    createdDate: Date
    accountContactName: string | null
    accountContactEmail: string | null
    accountContactPhone: string | null
    lastUpdateDate: Date
    _count: VendorCountAggregateOutputType | null
    _avg: VendorAvgAggregateOutputType | null
    _sum: VendorSumAggregateOutputType | null
    _min: VendorMinAggregateOutputType | null
    _max: VendorMaxAggregateOutputType | null
  }

  type GetVendorGroupByPayload<T extends VendorGroupByArgs> = PrismaPromise<
    Array<
      PickArray<VendorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VendorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VendorGroupByOutputType[P]>
            : GetScalarType<T[P], VendorGroupByOutputType[P]>
        }
      >
    >


  export type VendorSelect = {
    id?: boolean
    name?: boolean
    description?: boolean
    email?: boolean
    phone?: boolean
    type?: boolean
    address?: boolean | AddressFindManyArgs
    account?: boolean | AccountArgs
    accountId?: boolean
    ein?: boolean
    bankDetails?: boolean
    status?: boolean
    createdDate?: boolean
    accountContactName?: boolean
    accountContactEmail?: boolean
    accountContactPhone?: boolean
    lastUpdateDate?: boolean
    Invoice?: boolean | InvoiceFindManyArgs
    User?: boolean | UserFindManyArgs
    Project?: boolean | ProjectFindManyArgs
    _count?: boolean | VendorCountOutputTypeArgs
  }


  export type VendorInclude = {
    address?: boolean | AddressFindManyArgs
    account?: boolean | AccountArgs
    Invoice?: boolean | InvoiceFindManyArgs
    User?: boolean | UserFindManyArgs
    Project?: boolean | ProjectFindManyArgs
    _count?: boolean | VendorCountOutputTypeArgs
  } 

  export type VendorGetPayload<S extends boolean | null | undefined | VendorArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Vendor :
    S extends undefined ? never :
    S extends { include: any } & (VendorArgs | VendorFindManyArgs)
    ? Vendor  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'address' ? Array < AddressGetPayload<S['include'][P]>>  :
        P extends 'account' ? AccountGetPayload<S['include'][P]> | null :
        P extends 'Invoice' ? Array < InvoiceGetPayload<S['include'][P]>>  :
        P extends 'User' ? Array < UserGetPayload<S['include'][P]>>  :
        P extends 'Project' ? Array < ProjectGetPayload<S['include'][P]>>  :
        P extends '_count' ? VendorCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (VendorArgs | VendorFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'address' ? Array < AddressGetPayload<S['select'][P]>>  :
        P extends 'account' ? AccountGetPayload<S['select'][P]> | null :
        P extends 'Invoice' ? Array < InvoiceGetPayload<S['select'][P]>>  :
        P extends 'User' ? Array < UserGetPayload<S['select'][P]>>  :
        P extends 'Project' ? Array < ProjectGetPayload<S['select'][P]>>  :
        P extends '_count' ? VendorCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Vendor ? Vendor[P] : never
  } 
      : Vendor


  type VendorCountArgs = Merge<
    Omit<VendorFindManyArgs, 'select' | 'include'> & {
      select?: VendorCountAggregateInputType | true
    }
  >

  export interface VendorDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Vendor that matches the filter.
     * @param {VendorFindUniqueArgs} args - Arguments to find a Vendor
     * @example
     * // Get one Vendor
     * const vendor = await prisma.vendor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends VendorFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, VendorFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Vendor'> extends True ? Prisma__VendorClient<VendorGetPayload<T>> : Prisma__VendorClient<VendorGetPayload<T> | null, null>

    /**
     * Find one Vendor that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {VendorFindUniqueOrThrowArgs} args - Arguments to find a Vendor
     * @example
     * // Get one Vendor
     * const vendor = await prisma.vendor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends VendorFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, VendorFindUniqueOrThrowArgs>
    ): Prisma__VendorClient<VendorGetPayload<T>>

    /**
     * Find the first Vendor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendorFindFirstArgs} args - Arguments to find a Vendor
     * @example
     * // Get one Vendor
     * const vendor = await prisma.vendor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends VendorFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, VendorFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Vendor'> extends True ? Prisma__VendorClient<VendorGetPayload<T>> : Prisma__VendorClient<VendorGetPayload<T> | null, null>

    /**
     * Find the first Vendor that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendorFindFirstOrThrowArgs} args - Arguments to find a Vendor
     * @example
     * // Get one Vendor
     * const vendor = await prisma.vendor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends VendorFindFirstOrThrowArgs>(
      args?: SelectSubset<T, VendorFindFirstOrThrowArgs>
    ): Prisma__VendorClient<VendorGetPayload<T>>

    /**
     * Find zero or more Vendors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendorFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Vendors
     * const vendors = await prisma.vendor.findMany()
     * 
     * // Get first 10 Vendors
     * const vendors = await prisma.vendor.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const vendorWithIdOnly = await prisma.vendor.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends VendorFindManyArgs>(
      args?: SelectSubset<T, VendorFindManyArgs>
    ): PrismaPromise<Array<VendorGetPayload<T>>>

    /**
     * Create a Vendor.
     * @param {VendorCreateArgs} args - Arguments to create a Vendor.
     * @example
     * // Create one Vendor
     * const Vendor = await prisma.vendor.create({
     *   data: {
     *     // ... data to create a Vendor
     *   }
     * })
     * 
    **/
    create<T extends VendorCreateArgs>(
      args: SelectSubset<T, VendorCreateArgs>
    ): Prisma__VendorClient<VendorGetPayload<T>>

    /**
     * Create many Vendors.
     *     @param {VendorCreateManyArgs} args - Arguments to create many Vendors.
     *     @example
     *     // Create many Vendors
     *     const vendor = await prisma.vendor.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends VendorCreateManyArgs>(
      args?: SelectSubset<T, VendorCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Vendor.
     * @param {VendorDeleteArgs} args - Arguments to delete one Vendor.
     * @example
     * // Delete one Vendor
     * const Vendor = await prisma.vendor.delete({
     *   where: {
     *     // ... filter to delete one Vendor
     *   }
     * })
     * 
    **/
    delete<T extends VendorDeleteArgs>(
      args: SelectSubset<T, VendorDeleteArgs>
    ): Prisma__VendorClient<VendorGetPayload<T>>

    /**
     * Update one Vendor.
     * @param {VendorUpdateArgs} args - Arguments to update one Vendor.
     * @example
     * // Update one Vendor
     * const vendor = await prisma.vendor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends VendorUpdateArgs>(
      args: SelectSubset<T, VendorUpdateArgs>
    ): Prisma__VendorClient<VendorGetPayload<T>>

    /**
     * Delete zero or more Vendors.
     * @param {VendorDeleteManyArgs} args - Arguments to filter Vendors to delete.
     * @example
     * // Delete a few Vendors
     * const { count } = await prisma.vendor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends VendorDeleteManyArgs>(
      args?: SelectSubset<T, VendorDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Vendors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Vendors
     * const vendor = await prisma.vendor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends VendorUpdateManyArgs>(
      args: SelectSubset<T, VendorUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Vendor.
     * @param {VendorUpsertArgs} args - Arguments to update or create a Vendor.
     * @example
     * // Update or create a Vendor
     * const vendor = await prisma.vendor.upsert({
     *   create: {
     *     // ... data to create a Vendor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Vendor we want to update
     *   }
     * })
    **/
    upsert<T extends VendorUpsertArgs>(
      args: SelectSubset<T, VendorUpsertArgs>
    ): Prisma__VendorClient<VendorGetPayload<T>>

    /**
     * Count the number of Vendors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendorCountArgs} args - Arguments to filter Vendors to count.
     * @example
     * // Count the number of Vendors
     * const count = await prisma.vendor.count({
     *   where: {
     *     // ... the filter for the Vendors we want to count
     *   }
     * })
    **/
    count<T extends VendorCountArgs>(
      args?: Subset<T, VendorCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VendorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Vendor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VendorAggregateArgs>(args: Subset<T, VendorAggregateArgs>): PrismaPromise<GetVendorAggregateType<T>>

    /**
     * Group by Vendor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VendorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VendorGroupByArgs['orderBy'] }
        : { orderBy?: VendorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VendorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVendorGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Vendor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__VendorClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    address<T extends AddressFindManyArgs= {}>(args?: Subset<T, AddressFindManyArgs>): PrismaPromise<Array<AddressGetPayload<T>>| Null>;

    account<T extends AccountArgs= {}>(args?: Subset<T, AccountArgs>): Prisma__AccountClient<AccountGetPayload<T> | Null>;

    Invoice<T extends InvoiceFindManyArgs= {}>(args?: Subset<T, InvoiceFindManyArgs>): PrismaPromise<Array<InvoiceGetPayload<T>>| Null>;

    User<T extends UserFindManyArgs= {}>(args?: Subset<T, UserFindManyArgs>): PrismaPromise<Array<UserGetPayload<T>>| Null>;

    Project<T extends ProjectFindManyArgs= {}>(args?: Subset<T, ProjectFindManyArgs>): PrismaPromise<Array<ProjectGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Vendor base type for findUnique actions
   */
  export type VendorFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Vendor
     * 
    **/
    select?: VendorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VendorInclude | null
    /**
     * Filter, which Vendor to fetch.
     * 
    **/
    where: VendorWhereUniqueInput
  }

  /**
   * Vendor: findUnique
   */
  export interface VendorFindUniqueArgs extends VendorFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Vendor findUniqueOrThrow
   */
  export type VendorFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Vendor
     * 
    **/
    select?: VendorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VendorInclude | null
    /**
     * Filter, which Vendor to fetch.
     * 
    **/
    where: VendorWhereUniqueInput
  }


  /**
   * Vendor base type for findFirst actions
   */
  export type VendorFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Vendor
     * 
    **/
    select?: VendorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VendorInclude | null
    /**
     * Filter, which Vendor to fetch.
     * 
    **/
    where?: VendorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vendors to fetch.
     * 
    **/
    orderBy?: Enumerable<VendorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Vendors.
     * 
    **/
    cursor?: VendorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vendors from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vendors.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Vendors.
     * 
    **/
    distinct?: Enumerable<VendorScalarFieldEnum>
  }

  /**
   * Vendor: findFirst
   */
  export interface VendorFindFirstArgs extends VendorFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Vendor findFirstOrThrow
   */
  export type VendorFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Vendor
     * 
    **/
    select?: VendorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VendorInclude | null
    /**
     * Filter, which Vendor to fetch.
     * 
    **/
    where?: VendorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vendors to fetch.
     * 
    **/
    orderBy?: Enumerable<VendorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Vendors.
     * 
    **/
    cursor?: VendorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vendors from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vendors.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Vendors.
     * 
    **/
    distinct?: Enumerable<VendorScalarFieldEnum>
  }


  /**
   * Vendor findMany
   */
  export type VendorFindManyArgs = {
    /**
     * Select specific fields to fetch from the Vendor
     * 
    **/
    select?: VendorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VendorInclude | null
    /**
     * Filter, which Vendors to fetch.
     * 
    **/
    where?: VendorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vendors to fetch.
     * 
    **/
    orderBy?: Enumerable<VendorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Vendors.
     * 
    **/
    cursor?: VendorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vendors from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vendors.
     * 
    **/
    skip?: number
    distinct?: Enumerable<VendorScalarFieldEnum>
  }


  /**
   * Vendor create
   */
  export type VendorCreateArgs = {
    /**
     * Select specific fields to fetch from the Vendor
     * 
    **/
    select?: VendorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VendorInclude | null
    /**
     * The data needed to create a Vendor.
     * 
    **/
    data: XOR<VendorCreateInput, VendorUncheckedCreateInput>
  }


  /**
   * Vendor createMany
   */
  export type VendorCreateManyArgs = {
    /**
     * The data used to create many Vendors.
     * 
    **/
    data: Enumerable<VendorCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Vendor update
   */
  export type VendorUpdateArgs = {
    /**
     * Select specific fields to fetch from the Vendor
     * 
    **/
    select?: VendorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VendorInclude | null
    /**
     * The data needed to update a Vendor.
     * 
    **/
    data: XOR<VendorUpdateInput, VendorUncheckedUpdateInput>
    /**
     * Choose, which Vendor to update.
     * 
    **/
    where: VendorWhereUniqueInput
  }


  /**
   * Vendor updateMany
   */
  export type VendorUpdateManyArgs = {
    /**
     * The data used to update Vendors.
     * 
    **/
    data: XOR<VendorUpdateManyMutationInput, VendorUncheckedUpdateManyInput>
    /**
     * Filter which Vendors to update
     * 
    **/
    where?: VendorWhereInput
  }


  /**
   * Vendor upsert
   */
  export type VendorUpsertArgs = {
    /**
     * Select specific fields to fetch from the Vendor
     * 
    **/
    select?: VendorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VendorInclude | null
    /**
     * The filter to search for the Vendor to update in case it exists.
     * 
    **/
    where: VendorWhereUniqueInput
    /**
     * In case the Vendor found by the `where` argument doesn't exist, create a new Vendor with this data.
     * 
    **/
    create: XOR<VendorCreateInput, VendorUncheckedCreateInput>
    /**
     * In case the Vendor was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<VendorUpdateInput, VendorUncheckedUpdateInput>
  }


  /**
   * Vendor delete
   */
  export type VendorDeleteArgs = {
    /**
     * Select specific fields to fetch from the Vendor
     * 
    **/
    select?: VendorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VendorInclude | null
    /**
     * Filter which Vendor to delete.
     * 
    **/
    where: VendorWhereUniqueInput
  }


  /**
   * Vendor deleteMany
   */
  export type VendorDeleteManyArgs = {
    /**
     * Filter which Vendors to delete
     * 
    **/
    where?: VendorWhereInput
  }


  /**
   * Vendor without action
   */
  export type VendorArgs = {
    /**
     * Select specific fields to fetch from the Vendor
     * 
    **/
    select?: VendorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VendorInclude | null
  }



  /**
   * Model ProjectResource
   */


  export type AggregateProjectResource = {
    _count: ProjectResourceCountAggregateOutputType | null
    _avg: ProjectResourceAvgAggregateOutputType | null
    _sum: ProjectResourceSumAggregateOutputType | null
    _min: ProjectResourceMinAggregateOutputType | null
    _max: ProjectResourceMaxAggregateOutputType | null
  }

  export type ProjectResourceAvgAggregateOutputType = {
    id: number | null
    projectId: number | null
    userId: number | null
    unitPrice: Decimal | null
    quantity: number | null
    budgetAllocated: Decimal | null
  }

  export type ProjectResourceSumAggregateOutputType = {
    id: number | null
    projectId: number | null
    userId: number | null
    unitPrice: Decimal | null
    quantity: number | null
    budgetAllocated: Decimal | null
  }

  export type ProjectResourceMinAggregateOutputType = {
    id: number | null
    projectId: number | null
    userId: number | null
    unitPrice: Decimal | null
    currency: Currency | null
    quantity: number | null
    uom: UnitOfMeasure | null
    budgetAllocated: Decimal | null
  }

  export type ProjectResourceMaxAggregateOutputType = {
    id: number | null
    projectId: number | null
    userId: number | null
    unitPrice: Decimal | null
    currency: Currency | null
    quantity: number | null
    uom: UnitOfMeasure | null
    budgetAllocated: Decimal | null
  }

  export type ProjectResourceCountAggregateOutputType = {
    id: number
    projectId: number
    userId: number
    unitPrice: number
    currency: number
    quantity: number
    uom: number
    budgetAllocated: number
    _all: number
  }


  export type ProjectResourceAvgAggregateInputType = {
    id?: true
    projectId?: true
    userId?: true
    unitPrice?: true
    quantity?: true
    budgetAllocated?: true
  }

  export type ProjectResourceSumAggregateInputType = {
    id?: true
    projectId?: true
    userId?: true
    unitPrice?: true
    quantity?: true
    budgetAllocated?: true
  }

  export type ProjectResourceMinAggregateInputType = {
    id?: true
    projectId?: true
    userId?: true
    unitPrice?: true
    currency?: true
    quantity?: true
    uom?: true
    budgetAllocated?: true
  }

  export type ProjectResourceMaxAggregateInputType = {
    id?: true
    projectId?: true
    userId?: true
    unitPrice?: true
    currency?: true
    quantity?: true
    uom?: true
    budgetAllocated?: true
  }

  export type ProjectResourceCountAggregateInputType = {
    id?: true
    projectId?: true
    userId?: true
    unitPrice?: true
    currency?: true
    quantity?: true
    uom?: true
    budgetAllocated?: true
    _all?: true
  }

  export type ProjectResourceAggregateArgs = {
    /**
     * Filter which ProjectResource to aggregate.
     * 
    **/
    where?: ProjectResourceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProjectResources to fetch.
     * 
    **/
    orderBy?: Enumerable<ProjectResourceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ProjectResourceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProjectResources from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProjectResources.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProjectResources
    **/
    _count?: true | ProjectResourceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProjectResourceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProjectResourceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProjectResourceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProjectResourceMaxAggregateInputType
  }

  export type GetProjectResourceAggregateType<T extends ProjectResourceAggregateArgs> = {
        [P in keyof T & keyof AggregateProjectResource]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProjectResource[P]>
      : GetScalarType<T[P], AggregateProjectResource[P]>
  }




  export type ProjectResourceGroupByArgs = {
    where?: ProjectResourceWhereInput
    orderBy?: Enumerable<ProjectResourceOrderByWithAggregationInput>
    by: Array<ProjectResourceScalarFieldEnum>
    having?: ProjectResourceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProjectResourceCountAggregateInputType | true
    _avg?: ProjectResourceAvgAggregateInputType
    _sum?: ProjectResourceSumAggregateInputType
    _min?: ProjectResourceMinAggregateInputType
    _max?: ProjectResourceMaxAggregateInputType
  }


  export type ProjectResourceGroupByOutputType = {
    id: number
    projectId: number | null
    userId: number | null
    unitPrice: Decimal | null
    currency: Currency | null
    quantity: number | null
    uom: UnitOfMeasure | null
    budgetAllocated: Decimal | null
    _count: ProjectResourceCountAggregateOutputType | null
    _avg: ProjectResourceAvgAggregateOutputType | null
    _sum: ProjectResourceSumAggregateOutputType | null
    _min: ProjectResourceMinAggregateOutputType | null
    _max: ProjectResourceMaxAggregateOutputType | null
  }

  type GetProjectResourceGroupByPayload<T extends ProjectResourceGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ProjectResourceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProjectResourceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProjectResourceGroupByOutputType[P]>
            : GetScalarType<T[P], ProjectResourceGroupByOutputType[P]>
        }
      >
    >


  export type ProjectResourceSelect = {
    id?: boolean
    project?: boolean | ProjectArgs
    projectId?: boolean
    user?: boolean | UserArgs
    userId?: boolean
    unitPrice?: boolean
    currency?: boolean
    quantity?: boolean
    uom?: boolean
    budgetAllocated?: boolean
  }


  export type ProjectResourceInclude = {
    project?: boolean | ProjectArgs
    user?: boolean | UserArgs
  } 

  export type ProjectResourceGetPayload<S extends boolean | null | undefined | ProjectResourceArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ProjectResource :
    S extends undefined ? never :
    S extends { include: any } & (ProjectResourceArgs | ProjectResourceFindManyArgs)
    ? ProjectResource  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'project' ? ProjectGetPayload<S['include'][P]> | null :
        P extends 'user' ? UserGetPayload<S['include'][P]> | null :  never
  } 
    : S extends { select: any } & (ProjectResourceArgs | ProjectResourceFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'project' ? ProjectGetPayload<S['select'][P]> | null :
        P extends 'user' ? UserGetPayload<S['select'][P]> | null :  P extends keyof ProjectResource ? ProjectResource[P] : never
  } 
      : ProjectResource


  type ProjectResourceCountArgs = Merge<
    Omit<ProjectResourceFindManyArgs, 'select' | 'include'> & {
      select?: ProjectResourceCountAggregateInputType | true
    }
  >

  export interface ProjectResourceDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one ProjectResource that matches the filter.
     * @param {ProjectResourceFindUniqueArgs} args - Arguments to find a ProjectResource
     * @example
     * // Get one ProjectResource
     * const projectResource = await prisma.projectResource.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProjectResourceFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ProjectResourceFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ProjectResource'> extends True ? Prisma__ProjectResourceClient<ProjectResourceGetPayload<T>> : Prisma__ProjectResourceClient<ProjectResourceGetPayload<T> | null, null>

    /**
     * Find one ProjectResource that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ProjectResourceFindUniqueOrThrowArgs} args - Arguments to find a ProjectResource
     * @example
     * // Get one ProjectResource
     * const projectResource = await prisma.projectResource.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ProjectResourceFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ProjectResourceFindUniqueOrThrowArgs>
    ): Prisma__ProjectResourceClient<ProjectResourceGetPayload<T>>

    /**
     * Find the first ProjectResource that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectResourceFindFirstArgs} args - Arguments to find a ProjectResource
     * @example
     * // Get one ProjectResource
     * const projectResource = await prisma.projectResource.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProjectResourceFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ProjectResourceFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ProjectResource'> extends True ? Prisma__ProjectResourceClient<ProjectResourceGetPayload<T>> : Prisma__ProjectResourceClient<ProjectResourceGetPayload<T> | null, null>

    /**
     * Find the first ProjectResource that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectResourceFindFirstOrThrowArgs} args - Arguments to find a ProjectResource
     * @example
     * // Get one ProjectResource
     * const projectResource = await prisma.projectResource.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ProjectResourceFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ProjectResourceFindFirstOrThrowArgs>
    ): Prisma__ProjectResourceClient<ProjectResourceGetPayload<T>>

    /**
     * Find zero or more ProjectResources that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectResourceFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProjectResources
     * const projectResources = await prisma.projectResource.findMany()
     * 
     * // Get first 10 ProjectResources
     * const projectResources = await prisma.projectResource.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const projectResourceWithIdOnly = await prisma.projectResource.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProjectResourceFindManyArgs>(
      args?: SelectSubset<T, ProjectResourceFindManyArgs>
    ): PrismaPromise<Array<ProjectResourceGetPayload<T>>>

    /**
     * Create a ProjectResource.
     * @param {ProjectResourceCreateArgs} args - Arguments to create a ProjectResource.
     * @example
     * // Create one ProjectResource
     * const ProjectResource = await prisma.projectResource.create({
     *   data: {
     *     // ... data to create a ProjectResource
     *   }
     * })
     * 
    **/
    create<T extends ProjectResourceCreateArgs>(
      args: SelectSubset<T, ProjectResourceCreateArgs>
    ): Prisma__ProjectResourceClient<ProjectResourceGetPayload<T>>

    /**
     * Create many ProjectResources.
     *     @param {ProjectResourceCreateManyArgs} args - Arguments to create many ProjectResources.
     *     @example
     *     // Create many ProjectResources
     *     const projectResource = await prisma.projectResource.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProjectResourceCreateManyArgs>(
      args?: SelectSubset<T, ProjectResourceCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a ProjectResource.
     * @param {ProjectResourceDeleteArgs} args - Arguments to delete one ProjectResource.
     * @example
     * // Delete one ProjectResource
     * const ProjectResource = await prisma.projectResource.delete({
     *   where: {
     *     // ... filter to delete one ProjectResource
     *   }
     * })
     * 
    **/
    delete<T extends ProjectResourceDeleteArgs>(
      args: SelectSubset<T, ProjectResourceDeleteArgs>
    ): Prisma__ProjectResourceClient<ProjectResourceGetPayload<T>>

    /**
     * Update one ProjectResource.
     * @param {ProjectResourceUpdateArgs} args - Arguments to update one ProjectResource.
     * @example
     * // Update one ProjectResource
     * const projectResource = await prisma.projectResource.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProjectResourceUpdateArgs>(
      args: SelectSubset<T, ProjectResourceUpdateArgs>
    ): Prisma__ProjectResourceClient<ProjectResourceGetPayload<T>>

    /**
     * Delete zero or more ProjectResources.
     * @param {ProjectResourceDeleteManyArgs} args - Arguments to filter ProjectResources to delete.
     * @example
     * // Delete a few ProjectResources
     * const { count } = await prisma.projectResource.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProjectResourceDeleteManyArgs>(
      args?: SelectSubset<T, ProjectResourceDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProjectResources.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectResourceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProjectResources
     * const projectResource = await prisma.projectResource.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProjectResourceUpdateManyArgs>(
      args: SelectSubset<T, ProjectResourceUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one ProjectResource.
     * @param {ProjectResourceUpsertArgs} args - Arguments to update or create a ProjectResource.
     * @example
     * // Update or create a ProjectResource
     * const projectResource = await prisma.projectResource.upsert({
     *   create: {
     *     // ... data to create a ProjectResource
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProjectResource we want to update
     *   }
     * })
    **/
    upsert<T extends ProjectResourceUpsertArgs>(
      args: SelectSubset<T, ProjectResourceUpsertArgs>
    ): Prisma__ProjectResourceClient<ProjectResourceGetPayload<T>>

    /**
     * Count the number of ProjectResources.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectResourceCountArgs} args - Arguments to filter ProjectResources to count.
     * @example
     * // Count the number of ProjectResources
     * const count = await prisma.projectResource.count({
     *   where: {
     *     // ... the filter for the ProjectResources we want to count
     *   }
     * })
    **/
    count<T extends ProjectResourceCountArgs>(
      args?: Subset<T, ProjectResourceCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProjectResourceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProjectResource.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectResourceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProjectResourceAggregateArgs>(args: Subset<T, ProjectResourceAggregateArgs>): PrismaPromise<GetProjectResourceAggregateType<T>>

    /**
     * Group by ProjectResource.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectResourceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProjectResourceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProjectResourceGroupByArgs['orderBy'] }
        : { orderBy?: ProjectResourceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProjectResourceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProjectResourceGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for ProjectResource.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ProjectResourceClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    project<T extends ProjectArgs= {}>(args?: Subset<T, ProjectArgs>): Prisma__ProjectClient<ProjectGetPayload<T> | Null>;

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * ProjectResource base type for findUnique actions
   */
  export type ProjectResourceFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the ProjectResource
     * 
    **/
    select?: ProjectResourceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProjectResourceInclude | null
    /**
     * Filter, which ProjectResource to fetch.
     * 
    **/
    where: ProjectResourceWhereUniqueInput
  }

  /**
   * ProjectResource: findUnique
   */
  export interface ProjectResourceFindUniqueArgs extends ProjectResourceFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ProjectResource findUniqueOrThrow
   */
  export type ProjectResourceFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the ProjectResource
     * 
    **/
    select?: ProjectResourceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProjectResourceInclude | null
    /**
     * Filter, which ProjectResource to fetch.
     * 
    **/
    where: ProjectResourceWhereUniqueInput
  }


  /**
   * ProjectResource base type for findFirst actions
   */
  export type ProjectResourceFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the ProjectResource
     * 
    **/
    select?: ProjectResourceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProjectResourceInclude | null
    /**
     * Filter, which ProjectResource to fetch.
     * 
    **/
    where?: ProjectResourceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProjectResources to fetch.
     * 
    **/
    orderBy?: Enumerable<ProjectResourceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProjectResources.
     * 
    **/
    cursor?: ProjectResourceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProjectResources from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProjectResources.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProjectResources.
     * 
    **/
    distinct?: Enumerable<ProjectResourceScalarFieldEnum>
  }

  /**
   * ProjectResource: findFirst
   */
  export interface ProjectResourceFindFirstArgs extends ProjectResourceFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ProjectResource findFirstOrThrow
   */
  export type ProjectResourceFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the ProjectResource
     * 
    **/
    select?: ProjectResourceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProjectResourceInclude | null
    /**
     * Filter, which ProjectResource to fetch.
     * 
    **/
    where?: ProjectResourceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProjectResources to fetch.
     * 
    **/
    orderBy?: Enumerable<ProjectResourceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProjectResources.
     * 
    **/
    cursor?: ProjectResourceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProjectResources from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProjectResources.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProjectResources.
     * 
    **/
    distinct?: Enumerable<ProjectResourceScalarFieldEnum>
  }


  /**
   * ProjectResource findMany
   */
  export type ProjectResourceFindManyArgs = {
    /**
     * Select specific fields to fetch from the ProjectResource
     * 
    **/
    select?: ProjectResourceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProjectResourceInclude | null
    /**
     * Filter, which ProjectResources to fetch.
     * 
    **/
    where?: ProjectResourceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProjectResources to fetch.
     * 
    **/
    orderBy?: Enumerable<ProjectResourceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProjectResources.
     * 
    **/
    cursor?: ProjectResourceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProjectResources from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProjectResources.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ProjectResourceScalarFieldEnum>
  }


  /**
   * ProjectResource create
   */
  export type ProjectResourceCreateArgs = {
    /**
     * Select specific fields to fetch from the ProjectResource
     * 
    **/
    select?: ProjectResourceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProjectResourceInclude | null
    /**
     * The data needed to create a ProjectResource.
     * 
    **/
    data: XOR<ProjectResourceCreateInput, ProjectResourceUncheckedCreateInput>
  }


  /**
   * ProjectResource createMany
   */
  export type ProjectResourceCreateManyArgs = {
    /**
     * The data used to create many ProjectResources.
     * 
    **/
    data: Enumerable<ProjectResourceCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * ProjectResource update
   */
  export type ProjectResourceUpdateArgs = {
    /**
     * Select specific fields to fetch from the ProjectResource
     * 
    **/
    select?: ProjectResourceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProjectResourceInclude | null
    /**
     * The data needed to update a ProjectResource.
     * 
    **/
    data: XOR<ProjectResourceUpdateInput, ProjectResourceUncheckedUpdateInput>
    /**
     * Choose, which ProjectResource to update.
     * 
    **/
    where: ProjectResourceWhereUniqueInput
  }


  /**
   * ProjectResource updateMany
   */
  export type ProjectResourceUpdateManyArgs = {
    /**
     * The data used to update ProjectResources.
     * 
    **/
    data: XOR<ProjectResourceUpdateManyMutationInput, ProjectResourceUncheckedUpdateManyInput>
    /**
     * Filter which ProjectResources to update
     * 
    **/
    where?: ProjectResourceWhereInput
  }


  /**
   * ProjectResource upsert
   */
  export type ProjectResourceUpsertArgs = {
    /**
     * Select specific fields to fetch from the ProjectResource
     * 
    **/
    select?: ProjectResourceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProjectResourceInclude | null
    /**
     * The filter to search for the ProjectResource to update in case it exists.
     * 
    **/
    where: ProjectResourceWhereUniqueInput
    /**
     * In case the ProjectResource found by the `where` argument doesn't exist, create a new ProjectResource with this data.
     * 
    **/
    create: XOR<ProjectResourceCreateInput, ProjectResourceUncheckedCreateInput>
    /**
     * In case the ProjectResource was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ProjectResourceUpdateInput, ProjectResourceUncheckedUpdateInput>
  }


  /**
   * ProjectResource delete
   */
  export type ProjectResourceDeleteArgs = {
    /**
     * Select specific fields to fetch from the ProjectResource
     * 
    **/
    select?: ProjectResourceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProjectResourceInclude | null
    /**
     * Filter which ProjectResource to delete.
     * 
    **/
    where: ProjectResourceWhereUniqueInput
  }


  /**
   * ProjectResource deleteMany
   */
  export type ProjectResourceDeleteManyArgs = {
    /**
     * Filter which ProjectResources to delete
     * 
    **/
    where?: ProjectResourceWhereInput
  }


  /**
   * ProjectResource without action
   */
  export type ProjectResourceArgs = {
    /**
     * Select specific fields to fetch from the ProjectResource
     * 
    **/
    select?: ProjectResourceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProjectResourceInclude | null
  }



  /**
   * Model Invoice
   */


  export type AggregateInvoice = {
    _count: InvoiceCountAggregateOutputType | null
    _avg: InvoiceAvgAggregateOutputType | null
    _sum: InvoiceSumAggregateOutputType | null
    _min: InvoiceMinAggregateOutputType | null
    _max: InvoiceMaxAggregateOutputType | null
  }

  export type InvoiceAvgAggregateOutputType = {
    id: number | null
    vendorId: number | null
    accountId: number | null
    projectId: number | null
    total: Decimal | null
    paidAmount: Decimal | null
    userId: number | null
  }

  export type InvoiceSumAggregateOutputType = {
    id: number | null
    vendorId: number | null
    accountId: number | null
    projectId: number | null
    total: Decimal | null
    paidAmount: Decimal | null
    userId: number | null
  }

  export type InvoiceMinAggregateOutputType = {
    id: number | null
    description: string | null
    type: InvoiceType | null
    vendorId: number | null
    accountId: number | null
    projectId: number | null
    invoiceDate: Date | null
    dueDte: Date | null
    transactionId: string | null
    notes: string | null
    total: Decimal | null
    paidAmount: Decimal | null
    status: InvoiceStatus | null
    paymentTerms: PaymentTerms | null
    createdDate: Date | null
    lastUpdateDate: Date | null
    userId: number | null
  }

  export type InvoiceMaxAggregateOutputType = {
    id: number | null
    description: string | null
    type: InvoiceType | null
    vendorId: number | null
    accountId: number | null
    projectId: number | null
    invoiceDate: Date | null
    dueDte: Date | null
    transactionId: string | null
    notes: string | null
    total: Decimal | null
    paidAmount: Decimal | null
    status: InvoiceStatus | null
    paymentTerms: PaymentTerms | null
    createdDate: Date | null
    lastUpdateDate: Date | null
    userId: number | null
  }

  export type InvoiceCountAggregateOutputType = {
    id: number
    description: number
    type: number
    vendorId: number
    accountId: number
    projectId: number
    invoiceDate: number
    dueDte: number
    transactionId: number
    notes: number
    total: number
    paidAmount: number
    status: number
    paymentTerms: number
    createdDate: number
    lastUpdateDate: number
    userId: number
    _all: number
  }


  export type InvoiceAvgAggregateInputType = {
    id?: true
    vendorId?: true
    accountId?: true
    projectId?: true
    total?: true
    paidAmount?: true
    userId?: true
  }

  export type InvoiceSumAggregateInputType = {
    id?: true
    vendorId?: true
    accountId?: true
    projectId?: true
    total?: true
    paidAmount?: true
    userId?: true
  }

  export type InvoiceMinAggregateInputType = {
    id?: true
    description?: true
    type?: true
    vendorId?: true
    accountId?: true
    projectId?: true
    invoiceDate?: true
    dueDte?: true
    transactionId?: true
    notes?: true
    total?: true
    paidAmount?: true
    status?: true
    paymentTerms?: true
    createdDate?: true
    lastUpdateDate?: true
    userId?: true
  }

  export type InvoiceMaxAggregateInputType = {
    id?: true
    description?: true
    type?: true
    vendorId?: true
    accountId?: true
    projectId?: true
    invoiceDate?: true
    dueDte?: true
    transactionId?: true
    notes?: true
    total?: true
    paidAmount?: true
    status?: true
    paymentTerms?: true
    createdDate?: true
    lastUpdateDate?: true
    userId?: true
  }

  export type InvoiceCountAggregateInputType = {
    id?: true
    description?: true
    type?: true
    vendorId?: true
    accountId?: true
    projectId?: true
    invoiceDate?: true
    dueDte?: true
    transactionId?: true
    notes?: true
    total?: true
    paidAmount?: true
    status?: true
    paymentTerms?: true
    createdDate?: true
    lastUpdateDate?: true
    userId?: true
    _all?: true
  }

  export type InvoiceAggregateArgs = {
    /**
     * Filter which Invoice to aggregate.
     * 
    **/
    where?: InvoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invoices to fetch.
     * 
    **/
    orderBy?: Enumerable<InvoiceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: InvoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invoices from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invoices.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Invoices
    **/
    _count?: true | InvoiceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InvoiceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InvoiceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InvoiceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InvoiceMaxAggregateInputType
  }

  export type GetInvoiceAggregateType<T extends InvoiceAggregateArgs> = {
        [P in keyof T & keyof AggregateInvoice]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInvoice[P]>
      : GetScalarType<T[P], AggregateInvoice[P]>
  }




  export type InvoiceGroupByArgs = {
    where?: InvoiceWhereInput
    orderBy?: Enumerable<InvoiceOrderByWithAggregationInput>
    by: Array<InvoiceScalarFieldEnum>
    having?: InvoiceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InvoiceCountAggregateInputType | true
    _avg?: InvoiceAvgAggregateInputType
    _sum?: InvoiceSumAggregateInputType
    _min?: InvoiceMinAggregateInputType
    _max?: InvoiceMaxAggregateInputType
  }


  export type InvoiceGroupByOutputType = {
    id: number
    description: string
    type: InvoiceType
    vendorId: number | null
    accountId: number | null
    projectId: number | null
    invoiceDate: Date
    dueDte: Date | null
    transactionId: string | null
    notes: string | null
    total: Decimal
    paidAmount: Decimal | null
    status: InvoiceStatus
    paymentTerms: PaymentTerms
    createdDate: Date
    lastUpdateDate: Date
    userId: number | null
    _count: InvoiceCountAggregateOutputType | null
    _avg: InvoiceAvgAggregateOutputType | null
    _sum: InvoiceSumAggregateOutputType | null
    _min: InvoiceMinAggregateOutputType | null
    _max: InvoiceMaxAggregateOutputType | null
  }

  type GetInvoiceGroupByPayload<T extends InvoiceGroupByArgs> = PrismaPromise<
    Array<
      PickArray<InvoiceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InvoiceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InvoiceGroupByOutputType[P]>
            : GetScalarType<T[P], InvoiceGroupByOutputType[P]>
        }
      >
    >


  export type InvoiceSelect = {
    id?: boolean
    description?: boolean
    type?: boolean
    vendor?: boolean | VendorArgs
    vendorId?: boolean
    account?: boolean | AccountArgs
    accountId?: boolean
    project?: boolean | ProjectArgs
    projectId?: boolean
    invoiceDate?: boolean
    dueDte?: boolean
    transactionId?: boolean
    notes?: boolean
    total?: boolean
    paidAmount?: boolean
    status?: boolean
    paymentTerms?: boolean
    createdDate?: boolean
    lastUpdateDate?: boolean
    user?: boolean | UserArgs
    userId?: boolean
  }


  export type InvoiceInclude = {
    vendor?: boolean | VendorArgs
    account?: boolean | AccountArgs
    project?: boolean | ProjectArgs
    user?: boolean | UserArgs
  } 

  export type InvoiceGetPayload<S extends boolean | null | undefined | InvoiceArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Invoice :
    S extends undefined ? never :
    S extends { include: any } & (InvoiceArgs | InvoiceFindManyArgs)
    ? Invoice  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'vendor' ? VendorGetPayload<S['include'][P]> | null :
        P extends 'account' ? AccountGetPayload<S['include'][P]> | null :
        P extends 'project' ? ProjectGetPayload<S['include'][P]> | null :
        P extends 'user' ? UserGetPayload<S['include'][P]> | null :  never
  } 
    : S extends { select: any } & (InvoiceArgs | InvoiceFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'vendor' ? VendorGetPayload<S['select'][P]> | null :
        P extends 'account' ? AccountGetPayload<S['select'][P]> | null :
        P extends 'project' ? ProjectGetPayload<S['select'][P]> | null :
        P extends 'user' ? UserGetPayload<S['select'][P]> | null :  P extends keyof Invoice ? Invoice[P] : never
  } 
      : Invoice


  type InvoiceCountArgs = Merge<
    Omit<InvoiceFindManyArgs, 'select' | 'include'> & {
      select?: InvoiceCountAggregateInputType | true
    }
  >

  export interface InvoiceDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Invoice that matches the filter.
     * @param {InvoiceFindUniqueArgs} args - Arguments to find a Invoice
     * @example
     * // Get one Invoice
     * const invoice = await prisma.invoice.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends InvoiceFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, InvoiceFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Invoice'> extends True ? Prisma__InvoiceClient<InvoiceGetPayload<T>> : Prisma__InvoiceClient<InvoiceGetPayload<T> | null, null>

    /**
     * Find one Invoice that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {InvoiceFindUniqueOrThrowArgs} args - Arguments to find a Invoice
     * @example
     * // Get one Invoice
     * const invoice = await prisma.invoice.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends InvoiceFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, InvoiceFindUniqueOrThrowArgs>
    ): Prisma__InvoiceClient<InvoiceGetPayload<T>>

    /**
     * Find the first Invoice that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceFindFirstArgs} args - Arguments to find a Invoice
     * @example
     * // Get one Invoice
     * const invoice = await prisma.invoice.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends InvoiceFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, InvoiceFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Invoice'> extends True ? Prisma__InvoiceClient<InvoiceGetPayload<T>> : Prisma__InvoiceClient<InvoiceGetPayload<T> | null, null>

    /**
     * Find the first Invoice that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceFindFirstOrThrowArgs} args - Arguments to find a Invoice
     * @example
     * // Get one Invoice
     * const invoice = await prisma.invoice.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends InvoiceFindFirstOrThrowArgs>(
      args?: SelectSubset<T, InvoiceFindFirstOrThrowArgs>
    ): Prisma__InvoiceClient<InvoiceGetPayload<T>>

    /**
     * Find zero or more Invoices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Invoices
     * const invoices = await prisma.invoice.findMany()
     * 
     * // Get first 10 Invoices
     * const invoices = await prisma.invoice.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const invoiceWithIdOnly = await prisma.invoice.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends InvoiceFindManyArgs>(
      args?: SelectSubset<T, InvoiceFindManyArgs>
    ): PrismaPromise<Array<InvoiceGetPayload<T>>>

    /**
     * Create a Invoice.
     * @param {InvoiceCreateArgs} args - Arguments to create a Invoice.
     * @example
     * // Create one Invoice
     * const Invoice = await prisma.invoice.create({
     *   data: {
     *     // ... data to create a Invoice
     *   }
     * })
     * 
    **/
    create<T extends InvoiceCreateArgs>(
      args: SelectSubset<T, InvoiceCreateArgs>
    ): Prisma__InvoiceClient<InvoiceGetPayload<T>>

    /**
     * Create many Invoices.
     *     @param {InvoiceCreateManyArgs} args - Arguments to create many Invoices.
     *     @example
     *     // Create many Invoices
     *     const invoice = await prisma.invoice.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends InvoiceCreateManyArgs>(
      args?: SelectSubset<T, InvoiceCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Invoice.
     * @param {InvoiceDeleteArgs} args - Arguments to delete one Invoice.
     * @example
     * // Delete one Invoice
     * const Invoice = await prisma.invoice.delete({
     *   where: {
     *     // ... filter to delete one Invoice
     *   }
     * })
     * 
    **/
    delete<T extends InvoiceDeleteArgs>(
      args: SelectSubset<T, InvoiceDeleteArgs>
    ): Prisma__InvoiceClient<InvoiceGetPayload<T>>

    /**
     * Update one Invoice.
     * @param {InvoiceUpdateArgs} args - Arguments to update one Invoice.
     * @example
     * // Update one Invoice
     * const invoice = await prisma.invoice.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends InvoiceUpdateArgs>(
      args: SelectSubset<T, InvoiceUpdateArgs>
    ): Prisma__InvoiceClient<InvoiceGetPayload<T>>

    /**
     * Delete zero or more Invoices.
     * @param {InvoiceDeleteManyArgs} args - Arguments to filter Invoices to delete.
     * @example
     * // Delete a few Invoices
     * const { count } = await prisma.invoice.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends InvoiceDeleteManyArgs>(
      args?: SelectSubset<T, InvoiceDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Invoices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Invoices
     * const invoice = await prisma.invoice.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends InvoiceUpdateManyArgs>(
      args: SelectSubset<T, InvoiceUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Invoice.
     * @param {InvoiceUpsertArgs} args - Arguments to update or create a Invoice.
     * @example
     * // Update or create a Invoice
     * const invoice = await prisma.invoice.upsert({
     *   create: {
     *     // ... data to create a Invoice
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Invoice we want to update
     *   }
     * })
    **/
    upsert<T extends InvoiceUpsertArgs>(
      args: SelectSubset<T, InvoiceUpsertArgs>
    ): Prisma__InvoiceClient<InvoiceGetPayload<T>>

    /**
     * Count the number of Invoices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceCountArgs} args - Arguments to filter Invoices to count.
     * @example
     * // Count the number of Invoices
     * const count = await prisma.invoice.count({
     *   where: {
     *     // ... the filter for the Invoices we want to count
     *   }
     * })
    **/
    count<T extends InvoiceCountArgs>(
      args?: Subset<T, InvoiceCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InvoiceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Invoice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InvoiceAggregateArgs>(args: Subset<T, InvoiceAggregateArgs>): PrismaPromise<GetInvoiceAggregateType<T>>

    /**
     * Group by Invoice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InvoiceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InvoiceGroupByArgs['orderBy'] }
        : { orderBy?: InvoiceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InvoiceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInvoiceGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Invoice.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__InvoiceClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    vendor<T extends VendorArgs= {}>(args?: Subset<T, VendorArgs>): Prisma__VendorClient<VendorGetPayload<T> | Null>;

    account<T extends AccountArgs= {}>(args?: Subset<T, AccountArgs>): Prisma__AccountClient<AccountGetPayload<T> | Null>;

    project<T extends ProjectArgs= {}>(args?: Subset<T, ProjectArgs>): Prisma__ProjectClient<ProjectGetPayload<T> | Null>;

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Invoice base type for findUnique actions
   */
  export type InvoiceFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Invoice
     * 
    **/
    select?: InvoiceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InvoiceInclude | null
    /**
     * Filter, which Invoice to fetch.
     * 
    **/
    where: InvoiceWhereUniqueInput
  }

  /**
   * Invoice: findUnique
   */
  export interface InvoiceFindUniqueArgs extends InvoiceFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Invoice findUniqueOrThrow
   */
  export type InvoiceFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Invoice
     * 
    **/
    select?: InvoiceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InvoiceInclude | null
    /**
     * Filter, which Invoice to fetch.
     * 
    **/
    where: InvoiceWhereUniqueInput
  }


  /**
   * Invoice base type for findFirst actions
   */
  export type InvoiceFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Invoice
     * 
    **/
    select?: InvoiceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InvoiceInclude | null
    /**
     * Filter, which Invoice to fetch.
     * 
    **/
    where?: InvoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invoices to fetch.
     * 
    **/
    orderBy?: Enumerable<InvoiceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Invoices.
     * 
    **/
    cursor?: InvoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invoices from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invoices.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Invoices.
     * 
    **/
    distinct?: Enumerable<InvoiceScalarFieldEnum>
  }

  /**
   * Invoice: findFirst
   */
  export interface InvoiceFindFirstArgs extends InvoiceFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Invoice findFirstOrThrow
   */
  export type InvoiceFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Invoice
     * 
    **/
    select?: InvoiceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InvoiceInclude | null
    /**
     * Filter, which Invoice to fetch.
     * 
    **/
    where?: InvoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invoices to fetch.
     * 
    **/
    orderBy?: Enumerable<InvoiceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Invoices.
     * 
    **/
    cursor?: InvoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invoices from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invoices.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Invoices.
     * 
    **/
    distinct?: Enumerable<InvoiceScalarFieldEnum>
  }


  /**
   * Invoice findMany
   */
  export type InvoiceFindManyArgs = {
    /**
     * Select specific fields to fetch from the Invoice
     * 
    **/
    select?: InvoiceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InvoiceInclude | null
    /**
     * Filter, which Invoices to fetch.
     * 
    **/
    where?: InvoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invoices to fetch.
     * 
    **/
    orderBy?: Enumerable<InvoiceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Invoices.
     * 
    **/
    cursor?: InvoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invoices from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invoices.
     * 
    **/
    skip?: number
    distinct?: Enumerable<InvoiceScalarFieldEnum>
  }


  /**
   * Invoice create
   */
  export type InvoiceCreateArgs = {
    /**
     * Select specific fields to fetch from the Invoice
     * 
    **/
    select?: InvoiceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InvoiceInclude | null
    /**
     * The data needed to create a Invoice.
     * 
    **/
    data: XOR<InvoiceCreateInput, InvoiceUncheckedCreateInput>
  }


  /**
   * Invoice createMany
   */
  export type InvoiceCreateManyArgs = {
    /**
     * The data used to create many Invoices.
     * 
    **/
    data: Enumerable<InvoiceCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Invoice update
   */
  export type InvoiceUpdateArgs = {
    /**
     * Select specific fields to fetch from the Invoice
     * 
    **/
    select?: InvoiceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InvoiceInclude | null
    /**
     * The data needed to update a Invoice.
     * 
    **/
    data: XOR<InvoiceUpdateInput, InvoiceUncheckedUpdateInput>
    /**
     * Choose, which Invoice to update.
     * 
    **/
    where: InvoiceWhereUniqueInput
  }


  /**
   * Invoice updateMany
   */
  export type InvoiceUpdateManyArgs = {
    /**
     * The data used to update Invoices.
     * 
    **/
    data: XOR<InvoiceUpdateManyMutationInput, InvoiceUncheckedUpdateManyInput>
    /**
     * Filter which Invoices to update
     * 
    **/
    where?: InvoiceWhereInput
  }


  /**
   * Invoice upsert
   */
  export type InvoiceUpsertArgs = {
    /**
     * Select specific fields to fetch from the Invoice
     * 
    **/
    select?: InvoiceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InvoiceInclude | null
    /**
     * The filter to search for the Invoice to update in case it exists.
     * 
    **/
    where: InvoiceWhereUniqueInput
    /**
     * In case the Invoice found by the `where` argument doesn't exist, create a new Invoice with this data.
     * 
    **/
    create: XOR<InvoiceCreateInput, InvoiceUncheckedCreateInput>
    /**
     * In case the Invoice was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<InvoiceUpdateInput, InvoiceUncheckedUpdateInput>
  }


  /**
   * Invoice delete
   */
  export type InvoiceDeleteArgs = {
    /**
     * Select specific fields to fetch from the Invoice
     * 
    **/
    select?: InvoiceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InvoiceInclude | null
    /**
     * Filter which Invoice to delete.
     * 
    **/
    where: InvoiceWhereUniqueInput
  }


  /**
   * Invoice deleteMany
   */
  export type InvoiceDeleteManyArgs = {
    /**
     * Filter which Invoices to delete
     * 
    **/
    where?: InvoiceWhereInput
  }


  /**
   * Invoice without action
   */
  export type InvoiceArgs = {
    /**
     * Select specific fields to fetch from the Invoice
     * 
    **/
    select?: InvoiceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InvoiceInclude | null
  }



  /**
   * Model InvoiceItem
   */


  export type AggregateInvoiceItem = {
    _count: InvoiceItemCountAggregateOutputType | null
    _avg: InvoiceItemAvgAggregateOutputType | null
    _sum: InvoiceItemSumAggregateOutputType | null
    _min: InvoiceItemMinAggregateOutputType | null
    _max: InvoiceItemMaxAggregateOutputType | null
  }

  export type InvoiceItemAvgAggregateOutputType = {
    id: number | null
    unitPrice: Decimal | null
    quantity: number | null
    total: Decimal | null
    userId: number | null
  }

  export type InvoiceItemSumAggregateOutputType = {
    id: number | null
    unitPrice: Decimal | null
    quantity: number | null
    total: Decimal | null
    userId: number | null
  }

  export type InvoiceItemMinAggregateOutputType = {
    id: number | null
    description: string | null
    type: InvoiceItemType | null
    unitPrice: Decimal | null
    currency: Currency | null
    quantity: number | null
    uom: UnitOfMeasure | null
    total: Decimal | null
    status: InvoiceStatus | null
    generalNote: string | null
    userId: number | null
    fromDate: Date | null
    toDate: Date | null
    createdDate: Date | null
    lastUpdateDate: Date | null
  }

  export type InvoiceItemMaxAggregateOutputType = {
    id: number | null
    description: string | null
    type: InvoiceItemType | null
    unitPrice: Decimal | null
    currency: Currency | null
    quantity: number | null
    uom: UnitOfMeasure | null
    total: Decimal | null
    status: InvoiceStatus | null
    generalNote: string | null
    userId: number | null
    fromDate: Date | null
    toDate: Date | null
    createdDate: Date | null
    lastUpdateDate: Date | null
  }

  export type InvoiceItemCountAggregateOutputType = {
    id: number
    description: number
    type: number
    unitPrice: number
    currency: number
    quantity: number
    uom: number
    total: number
    status: number
    generalNote: number
    userId: number
    fromDate: number
    toDate: number
    createdDate: number
    lastUpdateDate: number
    _all: number
  }


  export type InvoiceItemAvgAggregateInputType = {
    id?: true
    unitPrice?: true
    quantity?: true
    total?: true
    userId?: true
  }

  export type InvoiceItemSumAggregateInputType = {
    id?: true
    unitPrice?: true
    quantity?: true
    total?: true
    userId?: true
  }

  export type InvoiceItemMinAggregateInputType = {
    id?: true
    description?: true
    type?: true
    unitPrice?: true
    currency?: true
    quantity?: true
    uom?: true
    total?: true
    status?: true
    generalNote?: true
    userId?: true
    fromDate?: true
    toDate?: true
    createdDate?: true
    lastUpdateDate?: true
  }

  export type InvoiceItemMaxAggregateInputType = {
    id?: true
    description?: true
    type?: true
    unitPrice?: true
    currency?: true
    quantity?: true
    uom?: true
    total?: true
    status?: true
    generalNote?: true
    userId?: true
    fromDate?: true
    toDate?: true
    createdDate?: true
    lastUpdateDate?: true
  }

  export type InvoiceItemCountAggregateInputType = {
    id?: true
    description?: true
    type?: true
    unitPrice?: true
    currency?: true
    quantity?: true
    uom?: true
    total?: true
    status?: true
    generalNote?: true
    userId?: true
    fromDate?: true
    toDate?: true
    createdDate?: true
    lastUpdateDate?: true
    _all?: true
  }

  export type InvoiceItemAggregateArgs = {
    /**
     * Filter which InvoiceItem to aggregate.
     * 
    **/
    where?: InvoiceItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InvoiceItems to fetch.
     * 
    **/
    orderBy?: Enumerable<InvoiceItemOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: InvoiceItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InvoiceItems from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InvoiceItems.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned InvoiceItems
    **/
    _count?: true | InvoiceItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InvoiceItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InvoiceItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InvoiceItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InvoiceItemMaxAggregateInputType
  }

  export type GetInvoiceItemAggregateType<T extends InvoiceItemAggregateArgs> = {
        [P in keyof T & keyof AggregateInvoiceItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInvoiceItem[P]>
      : GetScalarType<T[P], AggregateInvoiceItem[P]>
  }




  export type InvoiceItemGroupByArgs = {
    where?: InvoiceItemWhereInput
    orderBy?: Enumerable<InvoiceItemOrderByWithAggregationInput>
    by: Array<InvoiceItemScalarFieldEnum>
    having?: InvoiceItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InvoiceItemCountAggregateInputType | true
    _avg?: InvoiceItemAvgAggregateInputType
    _sum?: InvoiceItemSumAggregateInputType
    _min?: InvoiceItemMinAggregateInputType
    _max?: InvoiceItemMaxAggregateInputType
  }


  export type InvoiceItemGroupByOutputType = {
    id: number
    description: string | null
    type: InvoiceItemType
    unitPrice: Decimal
    currency: Currency
    quantity: number
    uom: UnitOfMeasure
    total: Decimal
    status: InvoiceStatus
    generalNote: string | null
    userId: number | null
    fromDate: Date | null
    toDate: Date | null
    createdDate: Date
    lastUpdateDate: Date
    _count: InvoiceItemCountAggregateOutputType | null
    _avg: InvoiceItemAvgAggregateOutputType | null
    _sum: InvoiceItemSumAggregateOutputType | null
    _min: InvoiceItemMinAggregateOutputType | null
    _max: InvoiceItemMaxAggregateOutputType | null
  }

  type GetInvoiceItemGroupByPayload<T extends InvoiceItemGroupByArgs> = PrismaPromise<
    Array<
      PickArray<InvoiceItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InvoiceItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InvoiceItemGroupByOutputType[P]>
            : GetScalarType<T[P], InvoiceItemGroupByOutputType[P]>
        }
      >
    >


  export type InvoiceItemSelect = {
    id?: boolean
    description?: boolean
    type?: boolean
    unitPrice?: boolean
    currency?: boolean
    quantity?: boolean
    uom?: boolean
    total?: boolean
    status?: boolean
    generalNote?: boolean
    user?: boolean | UserArgs
    userId?: boolean
    fromDate?: boolean
    toDate?: boolean
    createdDate?: boolean
    lastUpdateDate?: boolean
  }


  export type InvoiceItemInclude = {
    user?: boolean | UserArgs
  } 

  export type InvoiceItemGetPayload<S extends boolean | null | undefined | InvoiceItemArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? InvoiceItem :
    S extends undefined ? never :
    S extends { include: any } & (InvoiceItemArgs | InvoiceItemFindManyArgs)
    ? InvoiceItem  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> | null :  never
  } 
    : S extends { select: any } & (InvoiceItemArgs | InvoiceItemFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> | null :  P extends keyof InvoiceItem ? InvoiceItem[P] : never
  } 
      : InvoiceItem


  type InvoiceItemCountArgs = Merge<
    Omit<InvoiceItemFindManyArgs, 'select' | 'include'> & {
      select?: InvoiceItemCountAggregateInputType | true
    }
  >

  export interface InvoiceItemDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one InvoiceItem that matches the filter.
     * @param {InvoiceItemFindUniqueArgs} args - Arguments to find a InvoiceItem
     * @example
     * // Get one InvoiceItem
     * const invoiceItem = await prisma.invoiceItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends InvoiceItemFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, InvoiceItemFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'InvoiceItem'> extends True ? Prisma__InvoiceItemClient<InvoiceItemGetPayload<T>> : Prisma__InvoiceItemClient<InvoiceItemGetPayload<T> | null, null>

    /**
     * Find one InvoiceItem that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {InvoiceItemFindUniqueOrThrowArgs} args - Arguments to find a InvoiceItem
     * @example
     * // Get one InvoiceItem
     * const invoiceItem = await prisma.invoiceItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends InvoiceItemFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, InvoiceItemFindUniqueOrThrowArgs>
    ): Prisma__InvoiceItemClient<InvoiceItemGetPayload<T>>

    /**
     * Find the first InvoiceItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceItemFindFirstArgs} args - Arguments to find a InvoiceItem
     * @example
     * // Get one InvoiceItem
     * const invoiceItem = await prisma.invoiceItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends InvoiceItemFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, InvoiceItemFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'InvoiceItem'> extends True ? Prisma__InvoiceItemClient<InvoiceItemGetPayload<T>> : Prisma__InvoiceItemClient<InvoiceItemGetPayload<T> | null, null>

    /**
     * Find the first InvoiceItem that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceItemFindFirstOrThrowArgs} args - Arguments to find a InvoiceItem
     * @example
     * // Get one InvoiceItem
     * const invoiceItem = await prisma.invoiceItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends InvoiceItemFindFirstOrThrowArgs>(
      args?: SelectSubset<T, InvoiceItemFindFirstOrThrowArgs>
    ): Prisma__InvoiceItemClient<InvoiceItemGetPayload<T>>

    /**
     * Find zero or more InvoiceItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceItemFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all InvoiceItems
     * const invoiceItems = await prisma.invoiceItem.findMany()
     * 
     * // Get first 10 InvoiceItems
     * const invoiceItems = await prisma.invoiceItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const invoiceItemWithIdOnly = await prisma.invoiceItem.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends InvoiceItemFindManyArgs>(
      args?: SelectSubset<T, InvoiceItemFindManyArgs>
    ): PrismaPromise<Array<InvoiceItemGetPayload<T>>>

    /**
     * Create a InvoiceItem.
     * @param {InvoiceItemCreateArgs} args - Arguments to create a InvoiceItem.
     * @example
     * // Create one InvoiceItem
     * const InvoiceItem = await prisma.invoiceItem.create({
     *   data: {
     *     // ... data to create a InvoiceItem
     *   }
     * })
     * 
    **/
    create<T extends InvoiceItemCreateArgs>(
      args: SelectSubset<T, InvoiceItemCreateArgs>
    ): Prisma__InvoiceItemClient<InvoiceItemGetPayload<T>>

    /**
     * Create many InvoiceItems.
     *     @param {InvoiceItemCreateManyArgs} args - Arguments to create many InvoiceItems.
     *     @example
     *     // Create many InvoiceItems
     *     const invoiceItem = await prisma.invoiceItem.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends InvoiceItemCreateManyArgs>(
      args?: SelectSubset<T, InvoiceItemCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a InvoiceItem.
     * @param {InvoiceItemDeleteArgs} args - Arguments to delete one InvoiceItem.
     * @example
     * // Delete one InvoiceItem
     * const InvoiceItem = await prisma.invoiceItem.delete({
     *   where: {
     *     // ... filter to delete one InvoiceItem
     *   }
     * })
     * 
    **/
    delete<T extends InvoiceItemDeleteArgs>(
      args: SelectSubset<T, InvoiceItemDeleteArgs>
    ): Prisma__InvoiceItemClient<InvoiceItemGetPayload<T>>

    /**
     * Update one InvoiceItem.
     * @param {InvoiceItemUpdateArgs} args - Arguments to update one InvoiceItem.
     * @example
     * // Update one InvoiceItem
     * const invoiceItem = await prisma.invoiceItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends InvoiceItemUpdateArgs>(
      args: SelectSubset<T, InvoiceItemUpdateArgs>
    ): Prisma__InvoiceItemClient<InvoiceItemGetPayload<T>>

    /**
     * Delete zero or more InvoiceItems.
     * @param {InvoiceItemDeleteManyArgs} args - Arguments to filter InvoiceItems to delete.
     * @example
     * // Delete a few InvoiceItems
     * const { count } = await prisma.invoiceItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends InvoiceItemDeleteManyArgs>(
      args?: SelectSubset<T, InvoiceItemDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more InvoiceItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many InvoiceItems
     * const invoiceItem = await prisma.invoiceItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends InvoiceItemUpdateManyArgs>(
      args: SelectSubset<T, InvoiceItemUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one InvoiceItem.
     * @param {InvoiceItemUpsertArgs} args - Arguments to update or create a InvoiceItem.
     * @example
     * // Update or create a InvoiceItem
     * const invoiceItem = await prisma.invoiceItem.upsert({
     *   create: {
     *     // ... data to create a InvoiceItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the InvoiceItem we want to update
     *   }
     * })
    **/
    upsert<T extends InvoiceItemUpsertArgs>(
      args: SelectSubset<T, InvoiceItemUpsertArgs>
    ): Prisma__InvoiceItemClient<InvoiceItemGetPayload<T>>

    /**
     * Count the number of InvoiceItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceItemCountArgs} args - Arguments to filter InvoiceItems to count.
     * @example
     * // Count the number of InvoiceItems
     * const count = await prisma.invoiceItem.count({
     *   where: {
     *     // ... the filter for the InvoiceItems we want to count
     *   }
     * })
    **/
    count<T extends InvoiceItemCountArgs>(
      args?: Subset<T, InvoiceItemCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InvoiceItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a InvoiceItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InvoiceItemAggregateArgs>(args: Subset<T, InvoiceItemAggregateArgs>): PrismaPromise<GetInvoiceItemAggregateType<T>>

    /**
     * Group by InvoiceItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InvoiceItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InvoiceItemGroupByArgs['orderBy'] }
        : { orderBy?: InvoiceItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InvoiceItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInvoiceItemGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for InvoiceItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__InvoiceItemClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * InvoiceItem base type for findUnique actions
   */
  export type InvoiceItemFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the InvoiceItem
     * 
    **/
    select?: InvoiceItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InvoiceItemInclude | null
    /**
     * Filter, which InvoiceItem to fetch.
     * 
    **/
    where: InvoiceItemWhereUniqueInput
  }

  /**
   * InvoiceItem: findUnique
   */
  export interface InvoiceItemFindUniqueArgs extends InvoiceItemFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * InvoiceItem findUniqueOrThrow
   */
  export type InvoiceItemFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the InvoiceItem
     * 
    **/
    select?: InvoiceItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InvoiceItemInclude | null
    /**
     * Filter, which InvoiceItem to fetch.
     * 
    **/
    where: InvoiceItemWhereUniqueInput
  }


  /**
   * InvoiceItem base type for findFirst actions
   */
  export type InvoiceItemFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the InvoiceItem
     * 
    **/
    select?: InvoiceItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InvoiceItemInclude | null
    /**
     * Filter, which InvoiceItem to fetch.
     * 
    **/
    where?: InvoiceItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InvoiceItems to fetch.
     * 
    **/
    orderBy?: Enumerable<InvoiceItemOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InvoiceItems.
     * 
    **/
    cursor?: InvoiceItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InvoiceItems from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InvoiceItems.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InvoiceItems.
     * 
    **/
    distinct?: Enumerable<InvoiceItemScalarFieldEnum>
  }

  /**
   * InvoiceItem: findFirst
   */
  export interface InvoiceItemFindFirstArgs extends InvoiceItemFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * InvoiceItem findFirstOrThrow
   */
  export type InvoiceItemFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the InvoiceItem
     * 
    **/
    select?: InvoiceItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InvoiceItemInclude | null
    /**
     * Filter, which InvoiceItem to fetch.
     * 
    **/
    where?: InvoiceItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InvoiceItems to fetch.
     * 
    **/
    orderBy?: Enumerable<InvoiceItemOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InvoiceItems.
     * 
    **/
    cursor?: InvoiceItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InvoiceItems from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InvoiceItems.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InvoiceItems.
     * 
    **/
    distinct?: Enumerable<InvoiceItemScalarFieldEnum>
  }


  /**
   * InvoiceItem findMany
   */
  export type InvoiceItemFindManyArgs = {
    /**
     * Select specific fields to fetch from the InvoiceItem
     * 
    **/
    select?: InvoiceItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InvoiceItemInclude | null
    /**
     * Filter, which InvoiceItems to fetch.
     * 
    **/
    where?: InvoiceItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InvoiceItems to fetch.
     * 
    **/
    orderBy?: Enumerable<InvoiceItemOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing InvoiceItems.
     * 
    **/
    cursor?: InvoiceItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InvoiceItems from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InvoiceItems.
     * 
    **/
    skip?: number
    distinct?: Enumerable<InvoiceItemScalarFieldEnum>
  }


  /**
   * InvoiceItem create
   */
  export type InvoiceItemCreateArgs = {
    /**
     * Select specific fields to fetch from the InvoiceItem
     * 
    **/
    select?: InvoiceItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InvoiceItemInclude | null
    /**
     * The data needed to create a InvoiceItem.
     * 
    **/
    data: XOR<InvoiceItemCreateInput, InvoiceItemUncheckedCreateInput>
  }


  /**
   * InvoiceItem createMany
   */
  export type InvoiceItemCreateManyArgs = {
    /**
     * The data used to create many InvoiceItems.
     * 
    **/
    data: Enumerable<InvoiceItemCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * InvoiceItem update
   */
  export type InvoiceItemUpdateArgs = {
    /**
     * Select specific fields to fetch from the InvoiceItem
     * 
    **/
    select?: InvoiceItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InvoiceItemInclude | null
    /**
     * The data needed to update a InvoiceItem.
     * 
    **/
    data: XOR<InvoiceItemUpdateInput, InvoiceItemUncheckedUpdateInput>
    /**
     * Choose, which InvoiceItem to update.
     * 
    **/
    where: InvoiceItemWhereUniqueInput
  }


  /**
   * InvoiceItem updateMany
   */
  export type InvoiceItemUpdateManyArgs = {
    /**
     * The data used to update InvoiceItems.
     * 
    **/
    data: XOR<InvoiceItemUpdateManyMutationInput, InvoiceItemUncheckedUpdateManyInput>
    /**
     * Filter which InvoiceItems to update
     * 
    **/
    where?: InvoiceItemWhereInput
  }


  /**
   * InvoiceItem upsert
   */
  export type InvoiceItemUpsertArgs = {
    /**
     * Select specific fields to fetch from the InvoiceItem
     * 
    **/
    select?: InvoiceItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InvoiceItemInclude | null
    /**
     * The filter to search for the InvoiceItem to update in case it exists.
     * 
    **/
    where: InvoiceItemWhereUniqueInput
    /**
     * In case the InvoiceItem found by the `where` argument doesn't exist, create a new InvoiceItem with this data.
     * 
    **/
    create: XOR<InvoiceItemCreateInput, InvoiceItemUncheckedCreateInput>
    /**
     * In case the InvoiceItem was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<InvoiceItemUpdateInput, InvoiceItemUncheckedUpdateInput>
  }


  /**
   * InvoiceItem delete
   */
  export type InvoiceItemDeleteArgs = {
    /**
     * Select specific fields to fetch from the InvoiceItem
     * 
    **/
    select?: InvoiceItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InvoiceItemInclude | null
    /**
     * Filter which InvoiceItem to delete.
     * 
    **/
    where: InvoiceItemWhereUniqueInput
  }


  /**
   * InvoiceItem deleteMany
   */
  export type InvoiceItemDeleteManyArgs = {
    /**
     * Filter which InvoiceItems to delete
     * 
    **/
    where?: InvoiceItemWhereInput
  }


  /**
   * InvoiceItem without action
   */
  export type InvoiceItemArgs = {
    /**
     * Select specific fields to fetch from the InvoiceItem
     * 
    **/
    select?: InvoiceItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InvoiceItemInclude | null
  }



  /**
   * Model Project
   */


  export type AggregateProject = {
    _count: ProjectCountAggregateOutputType | null
    _avg: ProjectAvgAggregateOutputType | null
    _sum: ProjectSumAggregateOutputType | null
    _min: ProjectMinAggregateOutputType | null
    _max: ProjectMaxAggregateOutputType | null
  }

  export type ProjectAvgAggregateOutputType = {
    id: number | null
    addressId: number | null
    vendorId: number | null
    accountId: number | null
    budget: Decimal | null
    totalHours: number | null
    averageRate: Decimal | null
  }

  export type ProjectSumAggregateOutputType = {
    id: number | null
    addressId: number | null
    vendorId: number | null
    accountId: number | null
    budget: Decimal | null
    totalHours: number | null
    averageRate: Decimal | null
  }

  export type ProjectMinAggregateOutputType = {
    id: number | null
    name: string | null
    referenceCode: string | null
    description: string | null
    type: InvoiceItemType | null
    invoiceCycle: InvoiceCycle | null
    addressId: number | null
    vendorId: number | null
    accountId: number | null
    budget: Decimal | null
    totalHours: number | null
    averageRate: Decimal | null
    status: ProjectStatus | null
    createdDate: Date | null
    lastUpdateDate: Date | null
  }

  export type ProjectMaxAggregateOutputType = {
    id: number | null
    name: string | null
    referenceCode: string | null
    description: string | null
    type: InvoiceItemType | null
    invoiceCycle: InvoiceCycle | null
    addressId: number | null
    vendorId: number | null
    accountId: number | null
    budget: Decimal | null
    totalHours: number | null
    averageRate: Decimal | null
    status: ProjectStatus | null
    createdDate: Date | null
    lastUpdateDate: Date | null
  }

  export type ProjectCountAggregateOutputType = {
    id: number
    name: number
    referenceCode: number
    description: number
    type: number
    invoiceCycle: number
    addressId: number
    vendorId: number
    accountId: number
    budget: number
    totalHours: number
    averageRate: number
    status: number
    createdDate: number
    lastUpdateDate: number
    _all: number
  }


  export type ProjectAvgAggregateInputType = {
    id?: true
    addressId?: true
    vendorId?: true
    accountId?: true
    budget?: true
    totalHours?: true
    averageRate?: true
  }

  export type ProjectSumAggregateInputType = {
    id?: true
    addressId?: true
    vendorId?: true
    accountId?: true
    budget?: true
    totalHours?: true
    averageRate?: true
  }

  export type ProjectMinAggregateInputType = {
    id?: true
    name?: true
    referenceCode?: true
    description?: true
    type?: true
    invoiceCycle?: true
    addressId?: true
    vendorId?: true
    accountId?: true
    budget?: true
    totalHours?: true
    averageRate?: true
    status?: true
    createdDate?: true
    lastUpdateDate?: true
  }

  export type ProjectMaxAggregateInputType = {
    id?: true
    name?: true
    referenceCode?: true
    description?: true
    type?: true
    invoiceCycle?: true
    addressId?: true
    vendorId?: true
    accountId?: true
    budget?: true
    totalHours?: true
    averageRate?: true
    status?: true
    createdDate?: true
    lastUpdateDate?: true
  }

  export type ProjectCountAggregateInputType = {
    id?: true
    name?: true
    referenceCode?: true
    description?: true
    type?: true
    invoiceCycle?: true
    addressId?: true
    vendorId?: true
    accountId?: true
    budget?: true
    totalHours?: true
    averageRate?: true
    status?: true
    createdDate?: true
    lastUpdateDate?: true
    _all?: true
  }

  export type ProjectAggregateArgs = {
    /**
     * Filter which Project to aggregate.
     * 
    **/
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     * 
    **/
    orderBy?: Enumerable<ProjectOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Projects
    **/
    _count?: true | ProjectCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProjectAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProjectSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProjectMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProjectMaxAggregateInputType
  }

  export type GetProjectAggregateType<T extends ProjectAggregateArgs> = {
        [P in keyof T & keyof AggregateProject]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProject[P]>
      : GetScalarType<T[P], AggregateProject[P]>
  }




  export type ProjectGroupByArgs = {
    where?: ProjectWhereInput
    orderBy?: Enumerable<ProjectOrderByWithAggregationInput>
    by: Array<ProjectScalarFieldEnum>
    having?: ProjectScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProjectCountAggregateInputType | true
    _avg?: ProjectAvgAggregateInputType
    _sum?: ProjectSumAggregateInputType
    _min?: ProjectMinAggregateInputType
    _max?: ProjectMaxAggregateInputType
  }


  export type ProjectGroupByOutputType = {
    id: number
    name: string
    referenceCode: string
    description: string
    type: InvoiceItemType
    invoiceCycle: InvoiceCycle
    addressId: number
    vendorId: number
    accountId: number
    budget: Decimal
    totalHours: number | null
    averageRate: Decimal | null
    status: ProjectStatus
    createdDate: Date
    lastUpdateDate: Date
    _count: ProjectCountAggregateOutputType | null
    _avg: ProjectAvgAggregateOutputType | null
    _sum: ProjectSumAggregateOutputType | null
    _min: ProjectMinAggregateOutputType | null
    _max: ProjectMaxAggregateOutputType | null
  }

  type GetProjectGroupByPayload<T extends ProjectGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ProjectGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProjectGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProjectGroupByOutputType[P]>
            : GetScalarType<T[P], ProjectGroupByOutputType[P]>
        }
      >
    >


  export type ProjectSelect = {
    id?: boolean
    name?: boolean
    referenceCode?: boolean
    description?: boolean
    type?: boolean
    invoiceCycle?: boolean
    addressId?: boolean
    address?: boolean | AddressArgs
    vendorId?: boolean
    vendor?: boolean | VendorArgs
    accountId?: boolean
    account?: boolean | AccountArgs
    budget?: boolean
    totalHours?: boolean
    averageRate?: boolean
    status?: boolean
    createdDate?: boolean
    lastUpdateDate?: boolean
    Invoice?: boolean | InvoiceFindManyArgs
    ProjectResource?: boolean | ProjectResourceFindManyArgs
    _count?: boolean | ProjectCountOutputTypeArgs
  }


  export type ProjectInclude = {
    address?: boolean | AddressArgs
    vendor?: boolean | VendorArgs
    account?: boolean | AccountArgs
    Invoice?: boolean | InvoiceFindManyArgs
    ProjectResource?: boolean | ProjectResourceFindManyArgs
    _count?: boolean | ProjectCountOutputTypeArgs
  } 

  export type ProjectGetPayload<S extends boolean | null | undefined | ProjectArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Project :
    S extends undefined ? never :
    S extends { include: any } & (ProjectArgs | ProjectFindManyArgs)
    ? Project  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'address' ? AddressGetPayload<S['include'][P]> | null :
        P extends 'vendor' ? VendorGetPayload<S['include'][P]> | null :
        P extends 'account' ? AccountGetPayload<S['include'][P]> | null :
        P extends 'Invoice' ? Array < InvoiceGetPayload<S['include'][P]>>  :
        P extends 'ProjectResource' ? Array < ProjectResourceGetPayload<S['include'][P]>>  :
        P extends '_count' ? ProjectCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (ProjectArgs | ProjectFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'address' ? AddressGetPayload<S['select'][P]> | null :
        P extends 'vendor' ? VendorGetPayload<S['select'][P]> | null :
        P extends 'account' ? AccountGetPayload<S['select'][P]> | null :
        P extends 'Invoice' ? Array < InvoiceGetPayload<S['select'][P]>>  :
        P extends 'ProjectResource' ? Array < ProjectResourceGetPayload<S['select'][P]>>  :
        P extends '_count' ? ProjectCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Project ? Project[P] : never
  } 
      : Project


  type ProjectCountArgs = Merge<
    Omit<ProjectFindManyArgs, 'select' | 'include'> & {
      select?: ProjectCountAggregateInputType | true
    }
  >

  export interface ProjectDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Project that matches the filter.
     * @param {ProjectFindUniqueArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProjectFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ProjectFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Project'> extends True ? Prisma__ProjectClient<ProjectGetPayload<T>> : Prisma__ProjectClient<ProjectGetPayload<T> | null, null>

    /**
     * Find one Project that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ProjectFindUniqueOrThrowArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ProjectFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ProjectFindUniqueOrThrowArgs>
    ): Prisma__ProjectClient<ProjectGetPayload<T>>

    /**
     * Find the first Project that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindFirstArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProjectFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ProjectFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Project'> extends True ? Prisma__ProjectClient<ProjectGetPayload<T>> : Prisma__ProjectClient<ProjectGetPayload<T> | null, null>

    /**
     * Find the first Project that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindFirstOrThrowArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ProjectFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ProjectFindFirstOrThrowArgs>
    ): Prisma__ProjectClient<ProjectGetPayload<T>>

    /**
     * Find zero or more Projects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Projects
     * const projects = await prisma.project.findMany()
     * 
     * // Get first 10 Projects
     * const projects = await prisma.project.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const projectWithIdOnly = await prisma.project.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProjectFindManyArgs>(
      args?: SelectSubset<T, ProjectFindManyArgs>
    ): PrismaPromise<Array<ProjectGetPayload<T>>>

    /**
     * Create a Project.
     * @param {ProjectCreateArgs} args - Arguments to create a Project.
     * @example
     * // Create one Project
     * const Project = await prisma.project.create({
     *   data: {
     *     // ... data to create a Project
     *   }
     * })
     * 
    **/
    create<T extends ProjectCreateArgs>(
      args: SelectSubset<T, ProjectCreateArgs>
    ): Prisma__ProjectClient<ProjectGetPayload<T>>

    /**
     * Create many Projects.
     *     @param {ProjectCreateManyArgs} args - Arguments to create many Projects.
     *     @example
     *     // Create many Projects
     *     const project = await prisma.project.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProjectCreateManyArgs>(
      args?: SelectSubset<T, ProjectCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Project.
     * @param {ProjectDeleteArgs} args - Arguments to delete one Project.
     * @example
     * // Delete one Project
     * const Project = await prisma.project.delete({
     *   where: {
     *     // ... filter to delete one Project
     *   }
     * })
     * 
    **/
    delete<T extends ProjectDeleteArgs>(
      args: SelectSubset<T, ProjectDeleteArgs>
    ): Prisma__ProjectClient<ProjectGetPayload<T>>

    /**
     * Update one Project.
     * @param {ProjectUpdateArgs} args - Arguments to update one Project.
     * @example
     * // Update one Project
     * const project = await prisma.project.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProjectUpdateArgs>(
      args: SelectSubset<T, ProjectUpdateArgs>
    ): Prisma__ProjectClient<ProjectGetPayload<T>>

    /**
     * Delete zero or more Projects.
     * @param {ProjectDeleteManyArgs} args - Arguments to filter Projects to delete.
     * @example
     * // Delete a few Projects
     * const { count } = await prisma.project.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProjectDeleteManyArgs>(
      args?: SelectSubset<T, ProjectDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Projects
     * const project = await prisma.project.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProjectUpdateManyArgs>(
      args: SelectSubset<T, ProjectUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Project.
     * @param {ProjectUpsertArgs} args - Arguments to update or create a Project.
     * @example
     * // Update or create a Project
     * const project = await prisma.project.upsert({
     *   create: {
     *     // ... data to create a Project
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Project we want to update
     *   }
     * })
    **/
    upsert<T extends ProjectUpsertArgs>(
      args: SelectSubset<T, ProjectUpsertArgs>
    ): Prisma__ProjectClient<ProjectGetPayload<T>>

    /**
     * Count the number of Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectCountArgs} args - Arguments to filter Projects to count.
     * @example
     * // Count the number of Projects
     * const count = await prisma.project.count({
     *   where: {
     *     // ... the filter for the Projects we want to count
     *   }
     * })
    **/
    count<T extends ProjectCountArgs>(
      args?: Subset<T, ProjectCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProjectCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Project.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProjectAggregateArgs>(args: Subset<T, ProjectAggregateArgs>): PrismaPromise<GetProjectAggregateType<T>>

    /**
     * Group by Project.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProjectGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProjectGroupByArgs['orderBy'] }
        : { orderBy?: ProjectGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProjectGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProjectGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Project.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ProjectClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    address<T extends AddressArgs= {}>(args?: Subset<T, AddressArgs>): Prisma__AddressClient<AddressGetPayload<T> | Null>;

    vendor<T extends VendorArgs= {}>(args?: Subset<T, VendorArgs>): Prisma__VendorClient<VendorGetPayload<T> | Null>;

    account<T extends AccountArgs= {}>(args?: Subset<T, AccountArgs>): Prisma__AccountClient<AccountGetPayload<T> | Null>;

    Invoice<T extends InvoiceFindManyArgs= {}>(args?: Subset<T, InvoiceFindManyArgs>): PrismaPromise<Array<InvoiceGetPayload<T>>| Null>;

    ProjectResource<T extends ProjectResourceFindManyArgs= {}>(args?: Subset<T, ProjectResourceFindManyArgs>): PrismaPromise<Array<ProjectResourceGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Project base type for findUnique actions
   */
  export type ProjectFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Project
     * 
    **/
    select?: ProjectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProjectInclude | null
    /**
     * Filter, which Project to fetch.
     * 
    **/
    where: ProjectWhereUniqueInput
  }

  /**
   * Project: findUnique
   */
  export interface ProjectFindUniqueArgs extends ProjectFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Project findUniqueOrThrow
   */
  export type ProjectFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Project
     * 
    **/
    select?: ProjectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProjectInclude | null
    /**
     * Filter, which Project to fetch.
     * 
    **/
    where: ProjectWhereUniqueInput
  }


  /**
   * Project base type for findFirst actions
   */
  export type ProjectFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Project
     * 
    **/
    select?: ProjectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProjectInclude | null
    /**
     * Filter, which Project to fetch.
     * 
    **/
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     * 
    **/
    orderBy?: Enumerable<ProjectOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Projects.
     * 
    **/
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Projects.
     * 
    **/
    distinct?: Enumerable<ProjectScalarFieldEnum>
  }

  /**
   * Project: findFirst
   */
  export interface ProjectFindFirstArgs extends ProjectFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Project findFirstOrThrow
   */
  export type ProjectFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Project
     * 
    **/
    select?: ProjectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProjectInclude | null
    /**
     * Filter, which Project to fetch.
     * 
    **/
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     * 
    **/
    orderBy?: Enumerable<ProjectOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Projects.
     * 
    **/
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Projects.
     * 
    **/
    distinct?: Enumerable<ProjectScalarFieldEnum>
  }


  /**
   * Project findMany
   */
  export type ProjectFindManyArgs = {
    /**
     * Select specific fields to fetch from the Project
     * 
    **/
    select?: ProjectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProjectInclude | null
    /**
     * Filter, which Projects to fetch.
     * 
    **/
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     * 
    **/
    orderBy?: Enumerable<ProjectOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Projects.
     * 
    **/
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ProjectScalarFieldEnum>
  }


  /**
   * Project create
   */
  export type ProjectCreateArgs = {
    /**
     * Select specific fields to fetch from the Project
     * 
    **/
    select?: ProjectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProjectInclude | null
    /**
     * The data needed to create a Project.
     * 
    **/
    data: XOR<ProjectCreateInput, ProjectUncheckedCreateInput>
  }


  /**
   * Project createMany
   */
  export type ProjectCreateManyArgs = {
    /**
     * The data used to create many Projects.
     * 
    **/
    data: Enumerable<ProjectCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Project update
   */
  export type ProjectUpdateArgs = {
    /**
     * Select specific fields to fetch from the Project
     * 
    **/
    select?: ProjectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProjectInclude | null
    /**
     * The data needed to update a Project.
     * 
    **/
    data: XOR<ProjectUpdateInput, ProjectUncheckedUpdateInput>
    /**
     * Choose, which Project to update.
     * 
    **/
    where: ProjectWhereUniqueInput
  }


  /**
   * Project updateMany
   */
  export type ProjectUpdateManyArgs = {
    /**
     * The data used to update Projects.
     * 
    **/
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyInput>
    /**
     * Filter which Projects to update
     * 
    **/
    where?: ProjectWhereInput
  }


  /**
   * Project upsert
   */
  export type ProjectUpsertArgs = {
    /**
     * Select specific fields to fetch from the Project
     * 
    **/
    select?: ProjectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProjectInclude | null
    /**
     * The filter to search for the Project to update in case it exists.
     * 
    **/
    where: ProjectWhereUniqueInput
    /**
     * In case the Project found by the `where` argument doesn't exist, create a new Project with this data.
     * 
    **/
    create: XOR<ProjectCreateInput, ProjectUncheckedCreateInput>
    /**
     * In case the Project was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ProjectUpdateInput, ProjectUncheckedUpdateInput>
  }


  /**
   * Project delete
   */
  export type ProjectDeleteArgs = {
    /**
     * Select specific fields to fetch from the Project
     * 
    **/
    select?: ProjectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProjectInclude | null
    /**
     * Filter which Project to delete.
     * 
    **/
    where: ProjectWhereUniqueInput
  }


  /**
   * Project deleteMany
   */
  export type ProjectDeleteManyArgs = {
    /**
     * Filter which Projects to delete
     * 
    **/
    where?: ProjectWhereInput
  }


  /**
   * Project without action
   */
  export type ProjectArgs = {
    /**
     * Select specific fields to fetch from the Project
     * 
    **/
    select?: ProjectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProjectInclude | null
  }



  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
    accountId: number | null
    vendorId: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
    accountId: number | null
    vendorId: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    firstName: string | null
    lastName: string | null
    role: Role | null
    email: string | null
    phone: string | null
    accountId: number | null
    vendorId: number | null
    isTimeSheetEnabled: boolean | null
    status: UserStatus | null
    password: string | null
    createdDate: Date | null
    lastUpdateDate: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    firstName: string | null
    lastName: string | null
    role: Role | null
    email: string | null
    phone: string | null
    accountId: number | null
    vendorId: number | null
    isTimeSheetEnabled: boolean | null
    status: UserStatus | null
    password: string | null
    createdDate: Date | null
    lastUpdateDate: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    firstName: number
    lastName: number
    role: number
    email: number
    phone: number
    accountId: number
    vendorId: number
    isTimeSheetEnabled: number
    status: number
    password: number
    createdDate: number
    lastUpdateDate: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
    accountId?: true
    vendorId?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
    accountId?: true
    vendorId?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    role?: true
    email?: true
    phone?: true
    accountId?: true
    vendorId?: true
    isTimeSheetEnabled?: true
    status?: true
    password?: true
    createdDate?: true
    lastUpdateDate?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    role?: true
    email?: true
    phone?: true
    accountId?: true
    vendorId?: true
    isTimeSheetEnabled?: true
    status?: true
    password?: true
    createdDate?: true
    lastUpdateDate?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    role?: true
    email?: true
    phone?: true
    accountId?: true
    vendorId?: true
    isTimeSheetEnabled?: true
    status?: true
    password?: true
    createdDate?: true
    lastUpdateDate?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: Array<UserScalarFieldEnum>
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: number
    firstName: string
    lastName: string
    role: Role
    email: string
    phone: string
    accountId: number | null
    vendorId: number | null
    isTimeSheetEnabled: boolean
    status: UserStatus
    password: string
    createdDate: Date
    lastUpdateDate: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    role?: boolean
    email?: boolean
    phone?: boolean
    account?: boolean | AccountArgs
    accountId?: boolean
    vendor?: boolean | VendorArgs
    vendorId?: boolean
    isTimeSheetEnabled?: boolean
    address?: boolean | AddressFindManyArgs
    userAttributes?: boolean | UserAttributesFindManyArgs
    status?: boolean
    password?: boolean
    createdDate?: boolean
    lastUpdateDate?: boolean
    Invoice?: boolean | InvoiceFindManyArgs
    InvoiceItem?: boolean | InvoiceItemFindManyArgs
    ProjectResource?: boolean | ProjectResourceFindManyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }


  export type UserInclude = {
    account?: boolean | AccountArgs
    vendor?: boolean | VendorArgs
    address?: boolean | AddressFindManyArgs
    userAttributes?: boolean | UserAttributesFindManyArgs
    Invoice?: boolean | InvoiceFindManyArgs
    InvoiceItem?: boolean | InvoiceItemFindManyArgs
    ProjectResource?: boolean | ProjectResourceFindManyArgs
    _count?: boolean | UserCountOutputTypeArgs
  } 

  export type UserGetPayload<S extends boolean | null | undefined | UserArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? User :
    S extends undefined ? never :
    S extends { include: any } & (UserArgs | UserFindManyArgs)
    ? User  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'account' ? AccountGetPayload<S['include'][P]> | null :
        P extends 'vendor' ? VendorGetPayload<S['include'][P]> | null :
        P extends 'address' ? Array < AddressGetPayload<S['include'][P]>>  :
        P extends 'userAttributes' ? Array < UserAttributesGetPayload<S['include'][P]>>  :
        P extends 'Invoice' ? Array < InvoiceGetPayload<S['include'][P]>>  :
        P extends 'InvoiceItem' ? Array < InvoiceItemGetPayload<S['include'][P]>>  :
        P extends 'ProjectResource' ? Array < ProjectResourceGetPayload<S['include'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (UserArgs | UserFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'account' ? AccountGetPayload<S['select'][P]> | null :
        P extends 'vendor' ? VendorGetPayload<S['select'][P]> | null :
        P extends 'address' ? Array < AddressGetPayload<S['select'][P]>>  :
        P extends 'userAttributes' ? Array < UserAttributesGetPayload<S['select'][P]>>  :
        P extends 'Invoice' ? Array < InvoiceGetPayload<S['select'][P]>>  :
        P extends 'InvoiceItem' ? Array < InvoiceItemGetPayload<S['select'][P]>>  :
        P extends 'ProjectResource' ? Array < ProjectResourceGetPayload<S['select'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof User ? User[P] : never
  } 
      : User


  type UserCountArgs = Merge<
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }
  >

  export interface UserDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): PrismaPromise<Array<UserGetPayload<T>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    account<T extends AccountArgs= {}>(args?: Subset<T, AccountArgs>): Prisma__AccountClient<AccountGetPayload<T> | Null>;

    vendor<T extends VendorArgs= {}>(args?: Subset<T, VendorArgs>): Prisma__VendorClient<VendorGetPayload<T> | Null>;

    address<T extends AddressFindManyArgs= {}>(args?: Subset<T, AddressFindManyArgs>): PrismaPromise<Array<AddressGetPayload<T>>| Null>;

    userAttributes<T extends UserAttributesFindManyArgs= {}>(args?: Subset<T, UserAttributesFindManyArgs>): PrismaPromise<Array<UserAttributesGetPayload<T>>| Null>;

    Invoice<T extends InvoiceFindManyArgs= {}>(args?: Subset<T, InvoiceFindManyArgs>): PrismaPromise<Array<InvoiceGetPayload<T>>| Null>;

    InvoiceItem<T extends InvoiceItemFindManyArgs= {}>(args?: Subset<T, InvoiceItemFindManyArgs>): PrismaPromise<Array<InvoiceItemGetPayload<T>>| Null>;

    ProjectResource<T extends ProjectResourceFindManyArgs= {}>(args?: Subset<T, ProjectResourceFindManyArgs>): PrismaPromise<Array<ProjectResourceGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * User base type for findUnique actions
   */
  export type UserFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     * 
    **/
    where: UserWhereUniqueInput
  }

  /**
   * User: findUnique
   */
  export interface UserFindUniqueArgs extends UserFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User base type for findFirst actions
   */
  export type UserFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     * 
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * User: findFirst
   */
  export interface UserFindFirstArgs extends UserFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     * 
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     * 
    **/
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    /**
     * The data used to create many Users.
     * 
    **/
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     * 
    **/
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     * 
    **/
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     * 
    **/
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     * 
    **/
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
  }



  /**
   * Model UserAttributes
   */


  export type AggregateUserAttributes = {
    _count: UserAttributesCountAggregateOutputType | null
    _avg: UserAttributesAvgAggregateOutputType | null
    _sum: UserAttributesSumAggregateOutputType | null
    _min: UserAttributesMinAggregateOutputType | null
    _max: UserAttributesMaxAggregateOutputType | null
  }

  export type UserAttributesAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type UserAttributesSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type UserAttributesMinAggregateOutputType = {
    id: number | null
    userAttributeKey: UserAttributeKeys | null
    userAttributeValue: string | null
    createdDate: Date | null
    lastUpdateDate: Date | null
    userId: number | null
  }

  export type UserAttributesMaxAggregateOutputType = {
    id: number | null
    userAttributeKey: UserAttributeKeys | null
    userAttributeValue: string | null
    createdDate: Date | null
    lastUpdateDate: Date | null
    userId: number | null
  }

  export type UserAttributesCountAggregateOutputType = {
    id: number
    userAttributeKey: number
    userAttributeValue: number
    createdDate: number
    lastUpdateDate: number
    userId: number
    _all: number
  }


  export type UserAttributesAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type UserAttributesSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type UserAttributesMinAggregateInputType = {
    id?: true
    userAttributeKey?: true
    userAttributeValue?: true
    createdDate?: true
    lastUpdateDate?: true
    userId?: true
  }

  export type UserAttributesMaxAggregateInputType = {
    id?: true
    userAttributeKey?: true
    userAttributeValue?: true
    createdDate?: true
    lastUpdateDate?: true
    userId?: true
  }

  export type UserAttributesCountAggregateInputType = {
    id?: true
    userAttributeKey?: true
    userAttributeValue?: true
    createdDate?: true
    lastUpdateDate?: true
    userId?: true
    _all?: true
  }

  export type UserAttributesAggregateArgs = {
    /**
     * Filter which UserAttributes to aggregate.
     * 
    **/
    where?: UserAttributesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserAttributes to fetch.
     * 
    **/
    orderBy?: Enumerable<UserAttributesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UserAttributesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserAttributes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserAttributes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserAttributes
    **/
    _count?: true | UserAttributesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAttributesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserAttributesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserAttributesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserAttributesMaxAggregateInputType
  }

  export type GetUserAttributesAggregateType<T extends UserAttributesAggregateArgs> = {
        [P in keyof T & keyof AggregateUserAttributes]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserAttributes[P]>
      : GetScalarType<T[P], AggregateUserAttributes[P]>
  }




  export type UserAttributesGroupByArgs = {
    where?: UserAttributesWhereInput
    orderBy?: Enumerable<UserAttributesOrderByWithAggregationInput>
    by: Array<UserAttributesScalarFieldEnum>
    having?: UserAttributesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserAttributesCountAggregateInputType | true
    _avg?: UserAttributesAvgAggregateInputType
    _sum?: UserAttributesSumAggregateInputType
    _min?: UserAttributesMinAggregateInputType
    _max?: UserAttributesMaxAggregateInputType
  }


  export type UserAttributesGroupByOutputType = {
    id: number
    userAttributeKey: UserAttributeKeys
    userAttributeValue: string | null
    createdDate: Date
    lastUpdateDate: Date
    userId: number
    _count: UserAttributesCountAggregateOutputType | null
    _avg: UserAttributesAvgAggregateOutputType | null
    _sum: UserAttributesSumAggregateOutputType | null
    _min: UserAttributesMinAggregateOutputType | null
    _max: UserAttributesMaxAggregateOutputType | null
  }

  type GetUserAttributesGroupByPayload<T extends UserAttributesGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UserAttributesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserAttributesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserAttributesGroupByOutputType[P]>
            : GetScalarType<T[P], UserAttributesGroupByOutputType[P]>
        }
      >
    >


  export type UserAttributesSelect = {
    id?: boolean
    userAttributeKey?: boolean
    userAttributeValue?: boolean
    createdDate?: boolean
    lastUpdateDate?: boolean
    User?: boolean | UserArgs
    userId?: boolean
  }


  export type UserAttributesInclude = {
    User?: boolean | UserArgs
  } 

  export type UserAttributesGetPayload<S extends boolean | null | undefined | UserAttributesArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? UserAttributes :
    S extends undefined ? never :
    S extends { include: any } & (UserAttributesArgs | UserAttributesFindManyArgs)
    ? UserAttributes  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'User' ? UserGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (UserAttributesArgs | UserAttributesFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'User' ? UserGetPayload<S['select'][P]> :  P extends keyof UserAttributes ? UserAttributes[P] : never
  } 
      : UserAttributes


  type UserAttributesCountArgs = Merge<
    Omit<UserAttributesFindManyArgs, 'select' | 'include'> & {
      select?: UserAttributesCountAggregateInputType | true
    }
  >

  export interface UserAttributesDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one UserAttributes that matches the filter.
     * @param {UserAttributesFindUniqueArgs} args - Arguments to find a UserAttributes
     * @example
     * // Get one UserAttributes
     * const userAttributes = await prisma.userAttributes.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserAttributesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserAttributesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'UserAttributes'> extends True ? Prisma__UserAttributesClient<UserAttributesGetPayload<T>> : Prisma__UserAttributesClient<UserAttributesGetPayload<T> | null, null>

    /**
     * Find one UserAttributes that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserAttributesFindUniqueOrThrowArgs} args - Arguments to find a UserAttributes
     * @example
     * // Get one UserAttributes
     * const userAttributes = await prisma.userAttributes.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserAttributesFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserAttributesFindUniqueOrThrowArgs>
    ): Prisma__UserAttributesClient<UserAttributesGetPayload<T>>

    /**
     * Find the first UserAttributes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAttributesFindFirstArgs} args - Arguments to find a UserAttributes
     * @example
     * // Get one UserAttributes
     * const userAttributes = await prisma.userAttributes.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserAttributesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserAttributesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'UserAttributes'> extends True ? Prisma__UserAttributesClient<UserAttributesGetPayload<T>> : Prisma__UserAttributesClient<UserAttributesGetPayload<T> | null, null>

    /**
     * Find the first UserAttributes that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAttributesFindFirstOrThrowArgs} args - Arguments to find a UserAttributes
     * @example
     * // Get one UserAttributes
     * const userAttributes = await prisma.userAttributes.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserAttributesFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserAttributesFindFirstOrThrowArgs>
    ): Prisma__UserAttributesClient<UserAttributesGetPayload<T>>

    /**
     * Find zero or more UserAttributes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAttributesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserAttributes
     * const userAttributes = await prisma.userAttributes.findMany()
     * 
     * // Get first 10 UserAttributes
     * const userAttributes = await prisma.userAttributes.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userAttributesWithIdOnly = await prisma.userAttributes.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserAttributesFindManyArgs>(
      args?: SelectSubset<T, UserAttributesFindManyArgs>
    ): PrismaPromise<Array<UserAttributesGetPayload<T>>>

    /**
     * Create a UserAttributes.
     * @param {UserAttributesCreateArgs} args - Arguments to create a UserAttributes.
     * @example
     * // Create one UserAttributes
     * const UserAttributes = await prisma.userAttributes.create({
     *   data: {
     *     // ... data to create a UserAttributes
     *   }
     * })
     * 
    **/
    create<T extends UserAttributesCreateArgs>(
      args: SelectSubset<T, UserAttributesCreateArgs>
    ): Prisma__UserAttributesClient<UserAttributesGetPayload<T>>

    /**
     * Create many UserAttributes.
     *     @param {UserAttributesCreateManyArgs} args - Arguments to create many UserAttributes.
     *     @example
     *     // Create many UserAttributes
     *     const userAttributes = await prisma.userAttributes.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserAttributesCreateManyArgs>(
      args?: SelectSubset<T, UserAttributesCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a UserAttributes.
     * @param {UserAttributesDeleteArgs} args - Arguments to delete one UserAttributes.
     * @example
     * // Delete one UserAttributes
     * const UserAttributes = await prisma.userAttributes.delete({
     *   where: {
     *     // ... filter to delete one UserAttributes
     *   }
     * })
     * 
    **/
    delete<T extends UserAttributesDeleteArgs>(
      args: SelectSubset<T, UserAttributesDeleteArgs>
    ): Prisma__UserAttributesClient<UserAttributesGetPayload<T>>

    /**
     * Update one UserAttributes.
     * @param {UserAttributesUpdateArgs} args - Arguments to update one UserAttributes.
     * @example
     * // Update one UserAttributes
     * const userAttributes = await prisma.userAttributes.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserAttributesUpdateArgs>(
      args: SelectSubset<T, UserAttributesUpdateArgs>
    ): Prisma__UserAttributesClient<UserAttributesGetPayload<T>>

    /**
     * Delete zero or more UserAttributes.
     * @param {UserAttributesDeleteManyArgs} args - Arguments to filter UserAttributes to delete.
     * @example
     * // Delete a few UserAttributes
     * const { count } = await prisma.userAttributes.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserAttributesDeleteManyArgs>(
      args?: SelectSubset<T, UserAttributesDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserAttributes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAttributesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserAttributes
     * const userAttributes = await prisma.userAttributes.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserAttributesUpdateManyArgs>(
      args: SelectSubset<T, UserAttributesUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one UserAttributes.
     * @param {UserAttributesUpsertArgs} args - Arguments to update or create a UserAttributes.
     * @example
     * // Update or create a UserAttributes
     * const userAttributes = await prisma.userAttributes.upsert({
     *   create: {
     *     // ... data to create a UserAttributes
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserAttributes we want to update
     *   }
     * })
    **/
    upsert<T extends UserAttributesUpsertArgs>(
      args: SelectSubset<T, UserAttributesUpsertArgs>
    ): Prisma__UserAttributesClient<UserAttributesGetPayload<T>>

    /**
     * Count the number of UserAttributes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAttributesCountArgs} args - Arguments to filter UserAttributes to count.
     * @example
     * // Count the number of UserAttributes
     * const count = await prisma.userAttributes.count({
     *   where: {
     *     // ... the filter for the UserAttributes we want to count
     *   }
     * })
    **/
    count<T extends UserAttributesCountArgs>(
      args?: Subset<T, UserAttributesCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserAttributesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserAttributes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAttributesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAttributesAggregateArgs>(args: Subset<T, UserAttributesAggregateArgs>): PrismaPromise<GetUserAttributesAggregateType<T>>

    /**
     * Group by UserAttributes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAttributesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserAttributesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserAttributesGroupByArgs['orderBy'] }
        : { orderBy?: UserAttributesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserAttributesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserAttributesGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for UserAttributes.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserAttributesClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    User<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * UserAttributes base type for findUnique actions
   */
  export type UserAttributesFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the UserAttributes
     * 
    **/
    select?: UserAttributesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserAttributesInclude | null
    /**
     * Filter, which UserAttributes to fetch.
     * 
    **/
    where: UserAttributesWhereUniqueInput
  }

  /**
   * UserAttributes: findUnique
   */
  export interface UserAttributesFindUniqueArgs extends UserAttributesFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * UserAttributes findUniqueOrThrow
   */
  export type UserAttributesFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the UserAttributes
     * 
    **/
    select?: UserAttributesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserAttributesInclude | null
    /**
     * Filter, which UserAttributes to fetch.
     * 
    **/
    where: UserAttributesWhereUniqueInput
  }


  /**
   * UserAttributes base type for findFirst actions
   */
  export type UserAttributesFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the UserAttributes
     * 
    **/
    select?: UserAttributesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserAttributesInclude | null
    /**
     * Filter, which UserAttributes to fetch.
     * 
    **/
    where?: UserAttributesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserAttributes to fetch.
     * 
    **/
    orderBy?: Enumerable<UserAttributesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserAttributes.
     * 
    **/
    cursor?: UserAttributesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserAttributes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserAttributes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserAttributes.
     * 
    **/
    distinct?: Enumerable<UserAttributesScalarFieldEnum>
  }

  /**
   * UserAttributes: findFirst
   */
  export interface UserAttributesFindFirstArgs extends UserAttributesFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * UserAttributes findFirstOrThrow
   */
  export type UserAttributesFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the UserAttributes
     * 
    **/
    select?: UserAttributesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserAttributesInclude | null
    /**
     * Filter, which UserAttributes to fetch.
     * 
    **/
    where?: UserAttributesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserAttributes to fetch.
     * 
    **/
    orderBy?: Enumerable<UserAttributesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserAttributes.
     * 
    **/
    cursor?: UserAttributesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserAttributes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserAttributes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserAttributes.
     * 
    **/
    distinct?: Enumerable<UserAttributesScalarFieldEnum>
  }


  /**
   * UserAttributes findMany
   */
  export type UserAttributesFindManyArgs = {
    /**
     * Select specific fields to fetch from the UserAttributes
     * 
    **/
    select?: UserAttributesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserAttributesInclude | null
    /**
     * Filter, which UserAttributes to fetch.
     * 
    **/
    where?: UserAttributesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserAttributes to fetch.
     * 
    **/
    orderBy?: Enumerable<UserAttributesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserAttributes.
     * 
    **/
    cursor?: UserAttributesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserAttributes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserAttributes.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserAttributesScalarFieldEnum>
  }


  /**
   * UserAttributes create
   */
  export type UserAttributesCreateArgs = {
    /**
     * Select specific fields to fetch from the UserAttributes
     * 
    **/
    select?: UserAttributesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserAttributesInclude | null
    /**
     * The data needed to create a UserAttributes.
     * 
    **/
    data: XOR<UserAttributesCreateInput, UserAttributesUncheckedCreateInput>
  }


  /**
   * UserAttributes createMany
   */
  export type UserAttributesCreateManyArgs = {
    /**
     * The data used to create many UserAttributes.
     * 
    **/
    data: Enumerable<UserAttributesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * UserAttributes update
   */
  export type UserAttributesUpdateArgs = {
    /**
     * Select specific fields to fetch from the UserAttributes
     * 
    **/
    select?: UserAttributesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserAttributesInclude | null
    /**
     * The data needed to update a UserAttributes.
     * 
    **/
    data: XOR<UserAttributesUpdateInput, UserAttributesUncheckedUpdateInput>
    /**
     * Choose, which UserAttributes to update.
     * 
    **/
    where: UserAttributesWhereUniqueInput
  }


  /**
   * UserAttributes updateMany
   */
  export type UserAttributesUpdateManyArgs = {
    /**
     * The data used to update UserAttributes.
     * 
    **/
    data: XOR<UserAttributesUpdateManyMutationInput, UserAttributesUncheckedUpdateManyInput>
    /**
     * Filter which UserAttributes to update
     * 
    **/
    where?: UserAttributesWhereInput
  }


  /**
   * UserAttributes upsert
   */
  export type UserAttributesUpsertArgs = {
    /**
     * Select specific fields to fetch from the UserAttributes
     * 
    **/
    select?: UserAttributesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserAttributesInclude | null
    /**
     * The filter to search for the UserAttributes to update in case it exists.
     * 
    **/
    where: UserAttributesWhereUniqueInput
    /**
     * In case the UserAttributes found by the `where` argument doesn't exist, create a new UserAttributes with this data.
     * 
    **/
    create: XOR<UserAttributesCreateInput, UserAttributesUncheckedCreateInput>
    /**
     * In case the UserAttributes was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UserAttributesUpdateInput, UserAttributesUncheckedUpdateInput>
  }


  /**
   * UserAttributes delete
   */
  export type UserAttributesDeleteArgs = {
    /**
     * Select specific fields to fetch from the UserAttributes
     * 
    **/
    select?: UserAttributesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserAttributesInclude | null
    /**
     * Filter which UserAttributes to delete.
     * 
    **/
    where: UserAttributesWhereUniqueInput
  }


  /**
   * UserAttributes deleteMany
   */
  export type UserAttributesDeleteManyArgs = {
    /**
     * Filter which UserAttributes to delete
     * 
    **/
    where?: UserAttributesWhereInput
  }


  /**
   * UserAttributes without action
   */
  export type UserAttributesArgs = {
    /**
     * Select specific fields to fetch from the UserAttributes
     * 
    **/
    select?: UserAttributesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserAttributesInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const AccountScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    ein: 'ein',
    bankId: 'bankId',
    email: 'email',
    phone: 'phone',
    status: 'status',
    createdDate: 'createdDate',
    lastUpdateDate: 'lastUpdateDate'
  };

  export type AccountScalarFieldEnum = (typeof AccountScalarFieldEnum)[keyof typeof AccountScalarFieldEnum]


  export const AddressScalarFieldEnum: {
    id: 'id',
    type: 'type',
    address1: 'address1',
    address2: 'address2',
    address3: 'address3',
    county: 'county',
    city: 'city',
    state: 'state',
    zipCode: 'zipCode',
    country: 'country',
    primary: 'primary',
    createdDate: 'createdDate',
    lastUpdateDate: 'lastUpdateDate',
    status: 'status',
    accountId: 'accountId',
    userId: 'userId',
    vendorId: 'vendorId'
  };

  export type AddressScalarFieldEnum = (typeof AddressScalarFieldEnum)[keyof typeof AddressScalarFieldEnum]


  export const InvoiceItemScalarFieldEnum: {
    id: 'id',
    description: 'description',
    type: 'type',
    unitPrice: 'unitPrice',
    currency: 'currency',
    quantity: 'quantity',
    uom: 'uom',
    total: 'total',
    status: 'status',
    generalNote: 'generalNote',
    userId: 'userId',
    fromDate: 'fromDate',
    toDate: 'toDate',
    createdDate: 'createdDate',
    lastUpdateDate: 'lastUpdateDate'
  };

  export type InvoiceItemScalarFieldEnum = (typeof InvoiceItemScalarFieldEnum)[keyof typeof InvoiceItemScalarFieldEnum]


  export const InvoiceScalarFieldEnum: {
    id: 'id',
    description: 'description',
    type: 'type',
    vendorId: 'vendorId',
    accountId: 'accountId',
    projectId: 'projectId',
    invoiceDate: 'invoiceDate',
    dueDte: 'dueDte',
    transactionId: 'transactionId',
    notes: 'notes',
    total: 'total',
    paidAmount: 'paidAmount',
    status: 'status',
    paymentTerms: 'paymentTerms',
    createdDate: 'createdDate',
    lastUpdateDate: 'lastUpdateDate',
    userId: 'userId'
  };

  export type InvoiceScalarFieldEnum = (typeof InvoiceScalarFieldEnum)[keyof typeof InvoiceScalarFieldEnum]


  export const ProjectResourceScalarFieldEnum: {
    id: 'id',
    projectId: 'projectId',
    userId: 'userId',
    unitPrice: 'unitPrice',
    currency: 'currency',
    quantity: 'quantity',
    uom: 'uom',
    budgetAllocated: 'budgetAllocated'
  };

  export type ProjectResourceScalarFieldEnum = (typeof ProjectResourceScalarFieldEnum)[keyof typeof ProjectResourceScalarFieldEnum]


  export const ProjectScalarFieldEnum: {
    id: 'id',
    name: 'name',
    referenceCode: 'referenceCode',
    description: 'description',
    type: 'type',
    invoiceCycle: 'invoiceCycle',
    addressId: 'addressId',
    vendorId: 'vendorId',
    accountId: 'accountId',
    budget: 'budget',
    totalHours: 'totalHours',
    averageRate: 'averageRate',
    status: 'status',
    createdDate: 'createdDate',
    lastUpdateDate: 'lastUpdateDate'
  };

  export type ProjectScalarFieldEnum = (typeof ProjectScalarFieldEnum)[keyof typeof ProjectScalarFieldEnum]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserAttributesScalarFieldEnum: {
    id: 'id',
    userAttributeKey: 'userAttributeKey',
    userAttributeValue: 'userAttributeValue',
    createdDate: 'createdDate',
    lastUpdateDate: 'lastUpdateDate',
    userId: 'userId'
  };

  export type UserAttributesScalarFieldEnum = (typeof UserAttributesScalarFieldEnum)[keyof typeof UserAttributesScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    firstName: 'firstName',
    lastName: 'lastName',
    role: 'role',
    email: 'email',
    phone: 'phone',
    accountId: 'accountId',
    vendorId: 'vendorId',
    isTimeSheetEnabled: 'isTimeSheetEnabled',
    status: 'status',
    password: 'password',
    createdDate: 'createdDate',
    lastUpdateDate: 'lastUpdateDate'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const VendorScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    email: 'email',
    phone: 'phone',
    type: 'type',
    accountId: 'accountId',
    ein: 'ein',
    bankDetails: 'bankDetails',
    status: 'status',
    createdDate: 'createdDate',
    accountContactName: 'accountContactName',
    accountContactEmail: 'accountContactEmail',
    accountContactPhone: 'accountContactPhone',
    lastUpdateDate: 'lastUpdateDate'
  };

  export type VendorScalarFieldEnum = (typeof VendorScalarFieldEnum)[keyof typeof VendorScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type AddressWhereInput = {
    AND?: Enumerable<AddressWhereInput>
    OR?: Enumerable<AddressWhereInput>
    NOT?: Enumerable<AddressWhereInput>
    id?: IntFilter | number
    type?: EnumAddressTypeFilter | AddressType
    address1?: StringFilter | string
    address2?: StringNullableFilter | string | null
    address3?: StringNullableFilter | string | null
    county?: StringNullableFilter | string | null
    city?: StringFilter | string
    state?: StringFilter | string
    zipCode?: StringFilter | string
    country?: StringFilter | string
    primary?: BoolFilter | boolean
    createdDate?: DateTimeFilter | Date | string
    lastUpdateDate?: DateTimeFilter | Date | string
    status?: EnumAddressStatusFilter | AddressStatus
    account?: XOR<AccountRelationFilter, AccountWhereInput>
    accountId?: IntFilter | number
    User?: XOR<UserRelationFilter, UserWhereInput> | null
    userId?: IntNullableFilter | number | null
    Vendor?: XOR<VendorRelationFilter, VendorWhereInput> | null
    vendorId?: IntNullableFilter | number | null
    Project?: ProjectListRelationFilter
  }

  export type AddressOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    address1?: SortOrder
    address2?: SortOrder
    address3?: SortOrder
    county?: SortOrder
    city?: SortOrder
    state?: SortOrder
    zipCode?: SortOrder
    country?: SortOrder
    primary?: SortOrder
    createdDate?: SortOrder
    lastUpdateDate?: SortOrder
    status?: SortOrder
    account?: AccountOrderByWithRelationInput
    accountId?: SortOrder
    User?: UserOrderByWithRelationInput
    userId?: SortOrder
    Vendor?: VendorOrderByWithRelationInput
    vendorId?: SortOrder
    Project?: ProjectOrderByRelationAggregateInput
  }

  export type AddressWhereUniqueInput = {
    id?: number
  }

  export type AddressOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    address1?: SortOrder
    address2?: SortOrder
    address3?: SortOrder
    county?: SortOrder
    city?: SortOrder
    state?: SortOrder
    zipCode?: SortOrder
    country?: SortOrder
    primary?: SortOrder
    createdDate?: SortOrder
    lastUpdateDate?: SortOrder
    status?: SortOrder
    accountId?: SortOrder
    userId?: SortOrder
    vendorId?: SortOrder
    _count?: AddressCountOrderByAggregateInput
    _avg?: AddressAvgOrderByAggregateInput
    _max?: AddressMaxOrderByAggregateInput
    _min?: AddressMinOrderByAggregateInput
    _sum?: AddressSumOrderByAggregateInput
  }

  export type AddressScalarWhereWithAggregatesInput = {
    AND?: Enumerable<AddressScalarWhereWithAggregatesInput>
    OR?: Enumerable<AddressScalarWhereWithAggregatesInput>
    NOT?: Enumerable<AddressScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    type?: EnumAddressTypeWithAggregatesFilter | AddressType
    address1?: StringWithAggregatesFilter | string
    address2?: StringNullableWithAggregatesFilter | string | null
    address3?: StringNullableWithAggregatesFilter | string | null
    county?: StringNullableWithAggregatesFilter | string | null
    city?: StringWithAggregatesFilter | string
    state?: StringWithAggregatesFilter | string
    zipCode?: StringWithAggregatesFilter | string
    country?: StringWithAggregatesFilter | string
    primary?: BoolWithAggregatesFilter | boolean
    createdDate?: DateTimeWithAggregatesFilter | Date | string
    lastUpdateDate?: DateTimeWithAggregatesFilter | Date | string
    status?: EnumAddressStatusWithAggregatesFilter | AddressStatus
    accountId?: IntWithAggregatesFilter | number
    userId?: IntNullableWithAggregatesFilter | number | null
    vendorId?: IntNullableWithAggregatesFilter | number | null
  }

  export type AccountWhereInput = {
    AND?: Enumerable<AccountWhereInput>
    OR?: Enumerable<AccountWhereInput>
    NOT?: Enumerable<AccountWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    description?: StringFilter | string
    ein?: StringFilter | string
    bankId?: IntNullableFilter | number | null
    email?: StringFilter | string
    phone?: StringFilter | string
    status?: EnumAccountStatusFilter | AccountStatus
    createdDate?: DateTimeFilter | Date | string
    lastUpdateDate?: DateTimeFilter | Date | string
    address?: AddressListRelationFilter
    Invoice?: InvoiceListRelationFilter
    Vendor?: VendorListRelationFilter
    User?: UserListRelationFilter
    Project?: ProjectListRelationFilter
  }

  export type AccountOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    ein?: SortOrder
    bankId?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    status?: SortOrder
    createdDate?: SortOrder
    lastUpdateDate?: SortOrder
    address?: AddressOrderByRelationAggregateInput
    Invoice?: InvoiceOrderByRelationAggregateInput
    Vendor?: VendorOrderByRelationAggregateInput
    User?: UserOrderByRelationAggregateInput
    Project?: ProjectOrderByRelationAggregateInput
  }

  export type AccountWhereUniqueInput = {
    id?: number
    ein?: string
  }

  export type AccountOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    ein?: SortOrder
    bankId?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    status?: SortOrder
    createdDate?: SortOrder
    lastUpdateDate?: SortOrder
    _count?: AccountCountOrderByAggregateInput
    _avg?: AccountAvgOrderByAggregateInput
    _max?: AccountMaxOrderByAggregateInput
    _min?: AccountMinOrderByAggregateInput
    _sum?: AccountSumOrderByAggregateInput
  }

  export type AccountScalarWhereWithAggregatesInput = {
    AND?: Enumerable<AccountScalarWhereWithAggregatesInput>
    OR?: Enumerable<AccountScalarWhereWithAggregatesInput>
    NOT?: Enumerable<AccountScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    description?: StringWithAggregatesFilter | string
    ein?: StringWithAggregatesFilter | string
    bankId?: IntNullableWithAggregatesFilter | number | null
    email?: StringWithAggregatesFilter | string
    phone?: StringWithAggregatesFilter | string
    status?: EnumAccountStatusWithAggregatesFilter | AccountStatus
    createdDate?: DateTimeWithAggregatesFilter | Date | string
    lastUpdateDate?: DateTimeWithAggregatesFilter | Date | string
  }

  export type VendorWhereInput = {
    AND?: Enumerable<VendorWhereInput>
    OR?: Enumerable<VendorWhereInput>
    NOT?: Enumerable<VendorWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    description?: StringNullableFilter | string | null
    email?: StringFilter | string
    phone?: StringFilter | string
    type?: EnumVendorTypeFilter | VendorType
    address?: AddressListRelationFilter
    account?: XOR<AccountRelationFilter, AccountWhereInput> | null
    accountId?: IntNullableFilter | number | null
    ein?: StringFilter | string
    bankDetails?: StringNullableFilter | string | null
    status?: EnumVendorStatusFilter | VendorStatus
    createdDate?: DateTimeFilter | Date | string
    accountContactName?: StringNullableFilter | string | null
    accountContactEmail?: StringNullableFilter | string | null
    accountContactPhone?: StringNullableFilter | string | null
    lastUpdateDate?: DateTimeFilter | Date | string
    Invoice?: InvoiceListRelationFilter
    User?: UserListRelationFilter
    Project?: ProjectListRelationFilter
  }

  export type VendorOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    type?: SortOrder
    address?: AddressOrderByRelationAggregateInput
    account?: AccountOrderByWithRelationInput
    accountId?: SortOrder
    ein?: SortOrder
    bankDetails?: SortOrder
    status?: SortOrder
    createdDate?: SortOrder
    accountContactName?: SortOrder
    accountContactEmail?: SortOrder
    accountContactPhone?: SortOrder
    lastUpdateDate?: SortOrder
    Invoice?: InvoiceOrderByRelationAggregateInput
    User?: UserOrderByRelationAggregateInput
    Project?: ProjectOrderByRelationAggregateInput
  }

  export type VendorWhereUniqueInput = {
    id?: number
    ein?: string
  }

  export type VendorOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    type?: SortOrder
    accountId?: SortOrder
    ein?: SortOrder
    bankDetails?: SortOrder
    status?: SortOrder
    createdDate?: SortOrder
    accountContactName?: SortOrder
    accountContactEmail?: SortOrder
    accountContactPhone?: SortOrder
    lastUpdateDate?: SortOrder
    _count?: VendorCountOrderByAggregateInput
    _avg?: VendorAvgOrderByAggregateInput
    _max?: VendorMaxOrderByAggregateInput
    _min?: VendorMinOrderByAggregateInput
    _sum?: VendorSumOrderByAggregateInput
  }

  export type VendorScalarWhereWithAggregatesInput = {
    AND?: Enumerable<VendorScalarWhereWithAggregatesInput>
    OR?: Enumerable<VendorScalarWhereWithAggregatesInput>
    NOT?: Enumerable<VendorScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    description?: StringNullableWithAggregatesFilter | string | null
    email?: StringWithAggregatesFilter | string
    phone?: StringWithAggregatesFilter | string
    type?: EnumVendorTypeWithAggregatesFilter | VendorType
    accountId?: IntNullableWithAggregatesFilter | number | null
    ein?: StringWithAggregatesFilter | string
    bankDetails?: StringNullableWithAggregatesFilter | string | null
    status?: EnumVendorStatusWithAggregatesFilter | VendorStatus
    createdDate?: DateTimeWithAggregatesFilter | Date | string
    accountContactName?: StringNullableWithAggregatesFilter | string | null
    accountContactEmail?: StringNullableWithAggregatesFilter | string | null
    accountContactPhone?: StringNullableWithAggregatesFilter | string | null
    lastUpdateDate?: DateTimeWithAggregatesFilter | Date | string
  }

  export type ProjectResourceWhereInput = {
    AND?: Enumerable<ProjectResourceWhereInput>
    OR?: Enumerable<ProjectResourceWhereInput>
    NOT?: Enumerable<ProjectResourceWhereInput>
    id?: IntFilter | number
    project?: XOR<ProjectRelationFilter, ProjectWhereInput> | null
    projectId?: IntNullableFilter | number | null
    user?: XOR<UserRelationFilter, UserWhereInput> | null
    userId?: IntNullableFilter | number | null
    unitPrice?: DecimalNullableFilter | Decimal | DecimalJsLike | number | string | null
    currency?: EnumCurrencyNullableFilter | Currency | null
    quantity?: IntNullableFilter | number | null
    uom?: EnumUnitOfMeasureNullableFilter | UnitOfMeasure | null
    budgetAllocated?: DecimalNullableFilter | Decimal | DecimalJsLike | number | string | null
  }

  export type ProjectResourceOrderByWithRelationInput = {
    id?: SortOrder
    project?: ProjectOrderByWithRelationInput
    projectId?: SortOrder
    user?: UserOrderByWithRelationInput
    userId?: SortOrder
    unitPrice?: SortOrder
    currency?: SortOrder
    quantity?: SortOrder
    uom?: SortOrder
    budgetAllocated?: SortOrder
  }

  export type ProjectResourceWhereUniqueInput = {
    id?: number
  }

  export type ProjectResourceOrderByWithAggregationInput = {
    id?: SortOrder
    projectId?: SortOrder
    userId?: SortOrder
    unitPrice?: SortOrder
    currency?: SortOrder
    quantity?: SortOrder
    uom?: SortOrder
    budgetAllocated?: SortOrder
    _count?: ProjectResourceCountOrderByAggregateInput
    _avg?: ProjectResourceAvgOrderByAggregateInput
    _max?: ProjectResourceMaxOrderByAggregateInput
    _min?: ProjectResourceMinOrderByAggregateInput
    _sum?: ProjectResourceSumOrderByAggregateInput
  }

  export type ProjectResourceScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ProjectResourceScalarWhereWithAggregatesInput>
    OR?: Enumerable<ProjectResourceScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ProjectResourceScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    projectId?: IntNullableWithAggregatesFilter | number | null
    userId?: IntNullableWithAggregatesFilter | number | null
    unitPrice?: DecimalNullableWithAggregatesFilter | Decimal | DecimalJsLike | number | string | null
    currency?: EnumCurrencyNullableWithAggregatesFilter | Currency | null
    quantity?: IntNullableWithAggregatesFilter | number | null
    uom?: EnumUnitOfMeasureNullableWithAggregatesFilter | UnitOfMeasure | null
    budgetAllocated?: DecimalNullableWithAggregatesFilter | Decimal | DecimalJsLike | number | string | null
  }

  export type InvoiceWhereInput = {
    AND?: Enumerable<InvoiceWhereInput>
    OR?: Enumerable<InvoiceWhereInput>
    NOT?: Enumerable<InvoiceWhereInput>
    id?: IntFilter | number
    description?: StringFilter | string
    type?: EnumInvoiceTypeFilter | InvoiceType
    vendor?: XOR<VendorRelationFilter, VendorWhereInput> | null
    vendorId?: IntNullableFilter | number | null
    account?: XOR<AccountRelationFilter, AccountWhereInput> | null
    accountId?: IntNullableFilter | number | null
    project?: XOR<ProjectRelationFilter, ProjectWhereInput> | null
    projectId?: IntNullableFilter | number | null
    invoiceDate?: DateTimeFilter | Date | string
    dueDte?: DateTimeNullableFilter | Date | string | null
    transactionId?: StringNullableFilter | string | null
    notes?: StringNullableFilter | string | null
    total?: DecimalFilter | Decimal | DecimalJsLike | number | string
    paidAmount?: DecimalNullableFilter | Decimal | DecimalJsLike | number | string | null
    status?: EnumInvoiceStatusFilter | InvoiceStatus
    paymentTerms?: EnumPaymentTermsFilter | PaymentTerms
    createdDate?: DateTimeFilter | Date | string
    lastUpdateDate?: DateTimeFilter | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput> | null
    userId?: IntNullableFilter | number | null
  }

  export type InvoiceOrderByWithRelationInput = {
    id?: SortOrder
    description?: SortOrder
    type?: SortOrder
    vendor?: VendorOrderByWithRelationInput
    vendorId?: SortOrder
    account?: AccountOrderByWithRelationInput
    accountId?: SortOrder
    project?: ProjectOrderByWithRelationInput
    projectId?: SortOrder
    invoiceDate?: SortOrder
    dueDte?: SortOrder
    transactionId?: SortOrder
    notes?: SortOrder
    total?: SortOrder
    paidAmount?: SortOrder
    status?: SortOrder
    paymentTerms?: SortOrder
    createdDate?: SortOrder
    lastUpdateDate?: SortOrder
    user?: UserOrderByWithRelationInput
    userId?: SortOrder
  }

  export type InvoiceWhereUniqueInput = {
    id?: number
  }

  export type InvoiceOrderByWithAggregationInput = {
    id?: SortOrder
    description?: SortOrder
    type?: SortOrder
    vendorId?: SortOrder
    accountId?: SortOrder
    projectId?: SortOrder
    invoiceDate?: SortOrder
    dueDte?: SortOrder
    transactionId?: SortOrder
    notes?: SortOrder
    total?: SortOrder
    paidAmount?: SortOrder
    status?: SortOrder
    paymentTerms?: SortOrder
    createdDate?: SortOrder
    lastUpdateDate?: SortOrder
    userId?: SortOrder
    _count?: InvoiceCountOrderByAggregateInput
    _avg?: InvoiceAvgOrderByAggregateInput
    _max?: InvoiceMaxOrderByAggregateInput
    _min?: InvoiceMinOrderByAggregateInput
    _sum?: InvoiceSumOrderByAggregateInput
  }

  export type InvoiceScalarWhereWithAggregatesInput = {
    AND?: Enumerable<InvoiceScalarWhereWithAggregatesInput>
    OR?: Enumerable<InvoiceScalarWhereWithAggregatesInput>
    NOT?: Enumerable<InvoiceScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    description?: StringWithAggregatesFilter | string
    type?: EnumInvoiceTypeWithAggregatesFilter | InvoiceType
    vendorId?: IntNullableWithAggregatesFilter | number | null
    accountId?: IntNullableWithAggregatesFilter | number | null
    projectId?: IntNullableWithAggregatesFilter | number | null
    invoiceDate?: DateTimeWithAggregatesFilter | Date | string
    dueDte?: DateTimeNullableWithAggregatesFilter | Date | string | null
    transactionId?: StringNullableWithAggregatesFilter | string | null
    notes?: StringNullableWithAggregatesFilter | string | null
    total?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    paidAmount?: DecimalNullableWithAggregatesFilter | Decimal | DecimalJsLike | number | string | null
    status?: EnumInvoiceStatusWithAggregatesFilter | InvoiceStatus
    paymentTerms?: EnumPaymentTermsWithAggregatesFilter | PaymentTerms
    createdDate?: DateTimeWithAggregatesFilter | Date | string
    lastUpdateDate?: DateTimeWithAggregatesFilter | Date | string
    userId?: IntNullableWithAggregatesFilter | number | null
  }

  export type InvoiceItemWhereInput = {
    AND?: Enumerable<InvoiceItemWhereInput>
    OR?: Enumerable<InvoiceItemWhereInput>
    NOT?: Enumerable<InvoiceItemWhereInput>
    id?: IntFilter | number
    description?: StringNullableFilter | string | null
    type?: EnumInvoiceItemTypeFilter | InvoiceItemType
    unitPrice?: DecimalFilter | Decimal | DecimalJsLike | number | string
    currency?: EnumCurrencyFilter | Currency
    quantity?: IntFilter | number
    uom?: EnumUnitOfMeasureFilter | UnitOfMeasure
    total?: DecimalFilter | Decimal | DecimalJsLike | number | string
    status?: EnumInvoiceStatusFilter | InvoiceStatus
    generalNote?: StringNullableFilter | string | null
    user?: XOR<UserRelationFilter, UserWhereInput> | null
    userId?: IntNullableFilter | number | null
    fromDate?: DateTimeNullableFilter | Date | string | null
    toDate?: DateTimeNullableFilter | Date | string | null
    createdDate?: DateTimeFilter | Date | string
    lastUpdateDate?: DateTimeFilter | Date | string
  }

  export type InvoiceItemOrderByWithRelationInput = {
    id?: SortOrder
    description?: SortOrder
    type?: SortOrder
    unitPrice?: SortOrder
    currency?: SortOrder
    quantity?: SortOrder
    uom?: SortOrder
    total?: SortOrder
    status?: SortOrder
    generalNote?: SortOrder
    user?: UserOrderByWithRelationInput
    userId?: SortOrder
    fromDate?: SortOrder
    toDate?: SortOrder
    createdDate?: SortOrder
    lastUpdateDate?: SortOrder
  }

  export type InvoiceItemWhereUniqueInput = {
    id?: number
  }

  export type InvoiceItemOrderByWithAggregationInput = {
    id?: SortOrder
    description?: SortOrder
    type?: SortOrder
    unitPrice?: SortOrder
    currency?: SortOrder
    quantity?: SortOrder
    uom?: SortOrder
    total?: SortOrder
    status?: SortOrder
    generalNote?: SortOrder
    userId?: SortOrder
    fromDate?: SortOrder
    toDate?: SortOrder
    createdDate?: SortOrder
    lastUpdateDate?: SortOrder
    _count?: InvoiceItemCountOrderByAggregateInput
    _avg?: InvoiceItemAvgOrderByAggregateInput
    _max?: InvoiceItemMaxOrderByAggregateInput
    _min?: InvoiceItemMinOrderByAggregateInput
    _sum?: InvoiceItemSumOrderByAggregateInput
  }

  export type InvoiceItemScalarWhereWithAggregatesInput = {
    AND?: Enumerable<InvoiceItemScalarWhereWithAggregatesInput>
    OR?: Enumerable<InvoiceItemScalarWhereWithAggregatesInput>
    NOT?: Enumerable<InvoiceItemScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    description?: StringNullableWithAggregatesFilter | string | null
    type?: EnumInvoiceItemTypeWithAggregatesFilter | InvoiceItemType
    unitPrice?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    currency?: EnumCurrencyWithAggregatesFilter | Currency
    quantity?: IntWithAggregatesFilter | number
    uom?: EnumUnitOfMeasureWithAggregatesFilter | UnitOfMeasure
    total?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    status?: EnumInvoiceStatusWithAggregatesFilter | InvoiceStatus
    generalNote?: StringNullableWithAggregatesFilter | string | null
    userId?: IntNullableWithAggregatesFilter | number | null
    fromDate?: DateTimeNullableWithAggregatesFilter | Date | string | null
    toDate?: DateTimeNullableWithAggregatesFilter | Date | string | null
    createdDate?: DateTimeWithAggregatesFilter | Date | string
    lastUpdateDate?: DateTimeWithAggregatesFilter | Date | string
  }

  export type ProjectWhereInput = {
    AND?: Enumerable<ProjectWhereInput>
    OR?: Enumerable<ProjectWhereInput>
    NOT?: Enumerable<ProjectWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    referenceCode?: StringFilter | string
    description?: StringFilter | string
    type?: EnumInvoiceItemTypeFilter | InvoiceItemType
    invoiceCycle?: EnumInvoiceCycleFilter | InvoiceCycle
    addressId?: IntFilter | number
    address?: XOR<AddressRelationFilter, AddressWhereInput> | null
    vendorId?: IntFilter | number
    vendor?: XOR<VendorRelationFilter, VendorWhereInput> | null
    accountId?: IntFilter | number
    account?: XOR<AccountRelationFilter, AccountWhereInput> | null
    budget?: DecimalFilter | Decimal | DecimalJsLike | number | string
    totalHours?: IntNullableFilter | number | null
    averageRate?: DecimalNullableFilter | Decimal | DecimalJsLike | number | string | null
    status?: EnumProjectStatusFilter | ProjectStatus
    createdDate?: DateTimeFilter | Date | string
    lastUpdateDate?: DateTimeFilter | Date | string
    Invoice?: InvoiceListRelationFilter
    ProjectResource?: ProjectResourceListRelationFilter
  }

  export type ProjectOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    referenceCode?: SortOrder
    description?: SortOrder
    type?: SortOrder
    invoiceCycle?: SortOrder
    addressId?: SortOrder
    address?: AddressOrderByWithRelationInput
    vendorId?: SortOrder
    vendor?: VendorOrderByWithRelationInput
    accountId?: SortOrder
    account?: AccountOrderByWithRelationInput
    budget?: SortOrder
    totalHours?: SortOrder
    averageRate?: SortOrder
    status?: SortOrder
    createdDate?: SortOrder
    lastUpdateDate?: SortOrder
    Invoice?: InvoiceOrderByRelationAggregateInput
    ProjectResource?: ProjectResourceOrderByRelationAggregateInput
  }

  export type ProjectWhereUniqueInput = {
    id?: number
  }

  export type ProjectOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    referenceCode?: SortOrder
    description?: SortOrder
    type?: SortOrder
    invoiceCycle?: SortOrder
    addressId?: SortOrder
    vendorId?: SortOrder
    accountId?: SortOrder
    budget?: SortOrder
    totalHours?: SortOrder
    averageRate?: SortOrder
    status?: SortOrder
    createdDate?: SortOrder
    lastUpdateDate?: SortOrder
    _count?: ProjectCountOrderByAggregateInput
    _avg?: ProjectAvgOrderByAggregateInput
    _max?: ProjectMaxOrderByAggregateInput
    _min?: ProjectMinOrderByAggregateInput
    _sum?: ProjectSumOrderByAggregateInput
  }

  export type ProjectScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ProjectScalarWhereWithAggregatesInput>
    OR?: Enumerable<ProjectScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ProjectScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    referenceCode?: StringWithAggregatesFilter | string
    description?: StringWithAggregatesFilter | string
    type?: EnumInvoiceItemTypeWithAggregatesFilter | InvoiceItemType
    invoiceCycle?: EnumInvoiceCycleWithAggregatesFilter | InvoiceCycle
    addressId?: IntWithAggregatesFilter | number
    vendorId?: IntWithAggregatesFilter | number
    accountId?: IntWithAggregatesFilter | number
    budget?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    totalHours?: IntNullableWithAggregatesFilter | number | null
    averageRate?: DecimalNullableWithAggregatesFilter | Decimal | DecimalJsLike | number | string | null
    status?: EnumProjectStatusWithAggregatesFilter | ProjectStatus
    createdDate?: DateTimeWithAggregatesFilter | Date | string
    lastUpdateDate?: DateTimeWithAggregatesFilter | Date | string
  }

  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: IntFilter | number
    firstName?: StringFilter | string
    lastName?: StringFilter | string
    role?: EnumRoleFilter | Role
    email?: StringFilter | string
    phone?: StringFilter | string
    account?: XOR<AccountRelationFilter, AccountWhereInput> | null
    accountId?: IntNullableFilter | number | null
    vendor?: XOR<VendorRelationFilter, VendorWhereInput> | null
    vendorId?: IntNullableFilter | number | null
    isTimeSheetEnabled?: BoolFilter | boolean
    address?: AddressListRelationFilter
    userAttributes?: UserAttributesListRelationFilter
    status?: EnumUserStatusFilter | UserStatus
    password?: StringFilter | string
    createdDate?: DateTimeFilter | Date | string
    lastUpdateDate?: DateTimeFilter | Date | string
    Invoice?: InvoiceListRelationFilter
    InvoiceItem?: InvoiceItemListRelationFilter
    ProjectResource?: ProjectResourceListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    role?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    account?: AccountOrderByWithRelationInput
    accountId?: SortOrder
    vendor?: VendorOrderByWithRelationInput
    vendorId?: SortOrder
    isTimeSheetEnabled?: SortOrder
    address?: AddressOrderByRelationAggregateInput
    userAttributes?: UserAttributesOrderByRelationAggregateInput
    status?: SortOrder
    password?: SortOrder
    createdDate?: SortOrder
    lastUpdateDate?: SortOrder
    Invoice?: InvoiceOrderByRelationAggregateInput
    InvoiceItem?: InvoiceItemOrderByRelationAggregateInput
    ProjectResource?: ProjectResourceOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = {
    id?: number
    email?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    role?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    accountId?: SortOrder
    vendorId?: SortOrder
    isTimeSheetEnabled?: SortOrder
    status?: SortOrder
    password?: SortOrder
    createdDate?: SortOrder
    lastUpdateDate?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    firstName?: StringWithAggregatesFilter | string
    lastName?: StringWithAggregatesFilter | string
    role?: EnumRoleWithAggregatesFilter | Role
    email?: StringWithAggregatesFilter | string
    phone?: StringWithAggregatesFilter | string
    accountId?: IntNullableWithAggregatesFilter | number | null
    vendorId?: IntNullableWithAggregatesFilter | number | null
    isTimeSheetEnabled?: BoolWithAggregatesFilter | boolean
    status?: EnumUserStatusWithAggregatesFilter | UserStatus
    password?: StringWithAggregatesFilter | string
    createdDate?: DateTimeWithAggregatesFilter | Date | string
    lastUpdateDate?: DateTimeWithAggregatesFilter | Date | string
  }

  export type UserAttributesWhereInput = {
    AND?: Enumerable<UserAttributesWhereInput>
    OR?: Enumerable<UserAttributesWhereInput>
    NOT?: Enumerable<UserAttributesWhereInput>
    id?: IntFilter | number
    userAttributeKey?: EnumUserAttributeKeysFilter | UserAttributeKeys
    userAttributeValue?: StringNullableFilter | string | null
    createdDate?: DateTimeFilter | Date | string
    lastUpdateDate?: DateTimeFilter | Date | string
    User?: XOR<UserRelationFilter, UserWhereInput>
    userId?: IntFilter | number
  }

  export type UserAttributesOrderByWithRelationInput = {
    id?: SortOrder
    userAttributeKey?: SortOrder
    userAttributeValue?: SortOrder
    createdDate?: SortOrder
    lastUpdateDate?: SortOrder
    User?: UserOrderByWithRelationInput
    userId?: SortOrder
  }

  export type UserAttributesWhereUniqueInput = {
    id?: number
  }

  export type UserAttributesOrderByWithAggregationInput = {
    id?: SortOrder
    userAttributeKey?: SortOrder
    userAttributeValue?: SortOrder
    createdDate?: SortOrder
    lastUpdateDate?: SortOrder
    userId?: SortOrder
    _count?: UserAttributesCountOrderByAggregateInput
    _avg?: UserAttributesAvgOrderByAggregateInput
    _max?: UserAttributesMaxOrderByAggregateInput
    _min?: UserAttributesMinOrderByAggregateInput
    _sum?: UserAttributesSumOrderByAggregateInput
  }

  export type UserAttributesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserAttributesScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserAttributesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserAttributesScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    userAttributeKey?: EnumUserAttributeKeysWithAggregatesFilter | UserAttributeKeys
    userAttributeValue?: StringNullableWithAggregatesFilter | string | null
    createdDate?: DateTimeWithAggregatesFilter | Date | string
    lastUpdateDate?: DateTimeWithAggregatesFilter | Date | string
    userId?: IntWithAggregatesFilter | number
  }

  export type AddressCreateInput = {
    type?: AddressType
    address1: string
    address2?: string | null
    address3?: string | null
    county?: string | null
    city: string
    state: string
    zipCode: string
    country: string
    primary?: boolean
    createdDate?: Date | string
    lastUpdateDate?: Date | string
    status: AddressStatus
    account?: AccountCreateNestedOneWithoutAddressInput
    User?: UserCreateNestedOneWithoutAddressInput
    Vendor?: VendorCreateNestedOneWithoutAddressInput
    Project?: ProjectCreateNestedManyWithoutAddressInput
  }

  export type AddressUncheckedCreateInput = {
    id?: number
    type?: AddressType
    address1: string
    address2?: string | null
    address3?: string | null
    county?: string | null
    city: string
    state: string
    zipCode: string
    country: string
    primary?: boolean
    createdDate?: Date | string
    lastUpdateDate?: Date | string
    status: AddressStatus
    accountId?: number
    userId?: number | null
    vendorId?: number | null
    Project?: ProjectUncheckedCreateNestedManyWithoutAddressInput
  }

  export type AddressUpdateInput = {
    type?: EnumAddressTypeFieldUpdateOperationsInput | AddressType
    address1?: StringFieldUpdateOperationsInput | string
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    address3?: NullableStringFieldUpdateOperationsInput | string | null
    county?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    zipCode?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    primary?: BoolFieldUpdateOperationsInput | boolean
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAddressStatusFieldUpdateOperationsInput | AddressStatus
    account?: AccountUpdateOneRequiredWithoutAddressNestedInput
    User?: UserUpdateOneWithoutAddressNestedInput
    Vendor?: VendorUpdateOneWithoutAddressNestedInput
    Project?: ProjectUpdateManyWithoutAddressNestedInput
  }

  export type AddressUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: EnumAddressTypeFieldUpdateOperationsInput | AddressType
    address1?: StringFieldUpdateOperationsInput | string
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    address3?: NullableStringFieldUpdateOperationsInput | string | null
    county?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    zipCode?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    primary?: BoolFieldUpdateOperationsInput | boolean
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAddressStatusFieldUpdateOperationsInput | AddressStatus
    accountId?: IntFieldUpdateOperationsInput | number
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    vendorId?: NullableIntFieldUpdateOperationsInput | number | null
    Project?: ProjectUncheckedUpdateManyWithoutAddressNestedInput
  }

  export type AddressCreateManyInput = {
    id?: number
    type?: AddressType
    address1: string
    address2?: string | null
    address3?: string | null
    county?: string | null
    city: string
    state: string
    zipCode: string
    country: string
    primary?: boolean
    createdDate?: Date | string
    lastUpdateDate?: Date | string
    status: AddressStatus
    accountId?: number
    userId?: number | null
    vendorId?: number | null
  }

  export type AddressUpdateManyMutationInput = {
    type?: EnumAddressTypeFieldUpdateOperationsInput | AddressType
    address1?: StringFieldUpdateOperationsInput | string
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    address3?: NullableStringFieldUpdateOperationsInput | string | null
    county?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    zipCode?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    primary?: BoolFieldUpdateOperationsInput | boolean
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAddressStatusFieldUpdateOperationsInput | AddressStatus
  }

  export type AddressUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: EnumAddressTypeFieldUpdateOperationsInput | AddressType
    address1?: StringFieldUpdateOperationsInput | string
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    address3?: NullableStringFieldUpdateOperationsInput | string | null
    county?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    zipCode?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    primary?: BoolFieldUpdateOperationsInput | boolean
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAddressStatusFieldUpdateOperationsInput | AddressStatus
    accountId?: IntFieldUpdateOperationsInput | number
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    vendorId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AccountCreateInput = {
    name: string
    description: string
    ein: string
    bankId?: number | null
    email: string
    phone?: string
    status: AccountStatus
    createdDate?: Date | string
    lastUpdateDate?: Date | string
    address?: AddressCreateNestedManyWithoutAccountInput
    Invoice?: InvoiceCreateNestedManyWithoutAccountInput
    Vendor?: VendorCreateNestedManyWithoutAccountInput
    User?: UserCreateNestedManyWithoutAccountInput
    Project?: ProjectCreateNestedManyWithoutAccountInput
  }

  export type AccountUncheckedCreateInput = {
    id?: number
    name: string
    description: string
    ein: string
    bankId?: number | null
    email: string
    phone?: string
    status: AccountStatus
    createdDate?: Date | string
    lastUpdateDate?: Date | string
    address?: AddressUncheckedCreateNestedManyWithoutAccountInput
    Invoice?: InvoiceUncheckedCreateNestedManyWithoutAccountInput
    Vendor?: VendorUncheckedCreateNestedManyWithoutAccountInput
    User?: UserUncheckedCreateNestedManyWithoutAccountInput
    Project?: ProjectUncheckedCreateNestedManyWithoutAccountInput
  }

  export type AccountUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    ein?: StringFieldUpdateOperationsInput | string
    bankId?: NullableIntFieldUpdateOperationsInput | number | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    status?: EnumAccountStatusFieldUpdateOperationsInput | AccountStatus
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: AddressUpdateManyWithoutAccountNestedInput
    Invoice?: InvoiceUpdateManyWithoutAccountNestedInput
    Vendor?: VendorUpdateManyWithoutAccountNestedInput
    User?: UserUpdateManyWithoutAccountNestedInput
    Project?: ProjectUpdateManyWithoutAccountNestedInput
  }

  export type AccountUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    ein?: StringFieldUpdateOperationsInput | string
    bankId?: NullableIntFieldUpdateOperationsInput | number | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    status?: EnumAccountStatusFieldUpdateOperationsInput | AccountStatus
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: AddressUncheckedUpdateManyWithoutAccountNestedInput
    Invoice?: InvoiceUncheckedUpdateManyWithoutAccountNestedInput
    Vendor?: VendorUncheckedUpdateManyWithoutAccountNestedInput
    User?: UserUncheckedUpdateManyWithoutAccountNestedInput
    Project?: ProjectUncheckedUpdateManyWithoutAccountNestedInput
  }

  export type AccountCreateManyInput = {
    id?: number
    name: string
    description: string
    ein: string
    bankId?: number | null
    email: string
    phone?: string
    status: AccountStatus
    createdDate?: Date | string
    lastUpdateDate?: Date | string
  }

  export type AccountUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    ein?: StringFieldUpdateOperationsInput | string
    bankId?: NullableIntFieldUpdateOperationsInput | number | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    status?: EnumAccountStatusFieldUpdateOperationsInput | AccountStatus
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    ein?: StringFieldUpdateOperationsInput | string
    bankId?: NullableIntFieldUpdateOperationsInput | number | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    status?: EnumAccountStatusFieldUpdateOperationsInput | AccountStatus
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VendorCreateInput = {
    name: string
    description?: string | null
    email: string
    phone?: string
    type?: VendorType
    address?: AddressCreateNestedManyWithoutVendorInput
    account?: AccountCreateNestedOneWithoutVendorInput
    ein: string
    bankDetails?: string | null
    status: VendorStatus
    createdDate?: Date | string
    accountContactName?: string | null
    accountContactEmail?: string | null
    accountContactPhone?: string | null
    lastUpdateDate?: Date | string
    Invoice?: InvoiceCreateNestedManyWithoutVendorInput
    User?: UserCreateNestedManyWithoutVendorInput
    Project?: ProjectCreateNestedManyWithoutVendorInput
  }

  export type VendorUncheckedCreateInput = {
    id?: number
    name: string
    description?: string | null
    email: string
    phone?: string
    type?: VendorType
    address?: AddressUncheckedCreateNestedManyWithoutVendorInput
    accountId?: number | null
    ein: string
    bankDetails?: string | null
    status: VendorStatus
    createdDate?: Date | string
    accountContactName?: string | null
    accountContactEmail?: string | null
    accountContactPhone?: string | null
    lastUpdateDate?: Date | string
    Invoice?: InvoiceUncheckedCreateNestedManyWithoutVendorInput
    User?: UserUncheckedCreateNestedManyWithoutVendorInput
    Project?: ProjectUncheckedCreateNestedManyWithoutVendorInput
  }

  export type VendorUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    type?: EnumVendorTypeFieldUpdateOperationsInput | VendorType
    address?: AddressUpdateManyWithoutVendorNestedInput
    account?: AccountUpdateOneWithoutVendorNestedInput
    ein?: StringFieldUpdateOperationsInput | string
    bankDetails?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumVendorStatusFieldUpdateOperationsInput | VendorStatus
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    accountContactName?: NullableStringFieldUpdateOperationsInput | string | null
    accountContactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    accountContactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Invoice?: InvoiceUpdateManyWithoutVendorNestedInput
    User?: UserUpdateManyWithoutVendorNestedInput
    Project?: ProjectUpdateManyWithoutVendorNestedInput
  }

  export type VendorUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    type?: EnumVendorTypeFieldUpdateOperationsInput | VendorType
    address?: AddressUncheckedUpdateManyWithoutVendorNestedInput
    accountId?: NullableIntFieldUpdateOperationsInput | number | null
    ein?: StringFieldUpdateOperationsInput | string
    bankDetails?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumVendorStatusFieldUpdateOperationsInput | VendorStatus
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    accountContactName?: NullableStringFieldUpdateOperationsInput | string | null
    accountContactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    accountContactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Invoice?: InvoiceUncheckedUpdateManyWithoutVendorNestedInput
    User?: UserUncheckedUpdateManyWithoutVendorNestedInput
    Project?: ProjectUncheckedUpdateManyWithoutVendorNestedInput
  }

  export type VendorCreateManyInput = {
    id?: number
    name: string
    description?: string | null
    email: string
    phone?: string
    type?: VendorType
    accountId?: number | null
    ein: string
    bankDetails?: string | null
    status: VendorStatus
    createdDate?: Date | string
    accountContactName?: string | null
    accountContactEmail?: string | null
    accountContactPhone?: string | null
    lastUpdateDate?: Date | string
  }

  export type VendorUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    type?: EnumVendorTypeFieldUpdateOperationsInput | VendorType
    ein?: StringFieldUpdateOperationsInput | string
    bankDetails?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumVendorStatusFieldUpdateOperationsInput | VendorStatus
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    accountContactName?: NullableStringFieldUpdateOperationsInput | string | null
    accountContactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    accountContactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VendorUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    type?: EnumVendorTypeFieldUpdateOperationsInput | VendorType
    accountId?: NullableIntFieldUpdateOperationsInput | number | null
    ein?: StringFieldUpdateOperationsInput | string
    bankDetails?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumVendorStatusFieldUpdateOperationsInput | VendorStatus
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    accountContactName?: NullableStringFieldUpdateOperationsInput | string | null
    accountContactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    accountContactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectResourceCreateInput = {
    project?: ProjectCreateNestedOneWithoutProjectResourceInput
    user?: UserCreateNestedOneWithoutProjectResourceInput
    unitPrice?: Decimal | DecimalJsLike | number | string | null
    currency?: Currency | null
    quantity?: number | null
    uom?: UnitOfMeasure | null
    budgetAllocated?: Decimal | DecimalJsLike | number | string | null
  }

  export type ProjectResourceUncheckedCreateInput = {
    id?: number
    projectId?: number | null
    userId?: number | null
    unitPrice?: Decimal | DecimalJsLike | number | string | null
    currency?: Currency | null
    quantity?: number | null
    uom?: UnitOfMeasure | null
    budgetAllocated?: Decimal | DecimalJsLike | number | string | null
  }

  export type ProjectResourceUpdateInput = {
    project?: ProjectUpdateOneWithoutProjectResourceNestedInput
    user?: UserUpdateOneWithoutProjectResourceNestedInput
    unitPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    currency?: NullableEnumCurrencyFieldUpdateOperationsInput | Currency | null
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    uom?: NullableEnumUnitOfMeasureFieldUpdateOperationsInput | UnitOfMeasure | null
    budgetAllocated?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type ProjectResourceUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    projectId?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    unitPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    currency?: NullableEnumCurrencyFieldUpdateOperationsInput | Currency | null
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    uom?: NullableEnumUnitOfMeasureFieldUpdateOperationsInput | UnitOfMeasure | null
    budgetAllocated?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type ProjectResourceCreateManyInput = {
    id?: number
    projectId?: number | null
    userId?: number | null
    unitPrice?: Decimal | DecimalJsLike | number | string | null
    currency?: Currency | null
    quantity?: number | null
    uom?: UnitOfMeasure | null
    budgetAllocated?: Decimal | DecimalJsLike | number | string | null
  }

  export type ProjectResourceUpdateManyMutationInput = {
    unitPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    currency?: NullableEnumCurrencyFieldUpdateOperationsInput | Currency | null
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    uom?: NullableEnumUnitOfMeasureFieldUpdateOperationsInput | UnitOfMeasure | null
    budgetAllocated?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type ProjectResourceUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    projectId?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    unitPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    currency?: NullableEnumCurrencyFieldUpdateOperationsInput | Currency | null
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    uom?: NullableEnumUnitOfMeasureFieldUpdateOperationsInput | UnitOfMeasure | null
    budgetAllocated?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type InvoiceCreateInput = {
    description?: string
    type: InvoiceType
    vendor?: VendorCreateNestedOneWithoutInvoiceInput
    account?: AccountCreateNestedOneWithoutInvoiceInput
    project?: ProjectCreateNestedOneWithoutInvoiceInput
    invoiceDate?: Date | string
    dueDte?: Date | string | null
    transactionId?: string | null
    notes?: string | null
    total: Decimal | DecimalJsLike | number | string
    paidAmount?: Decimal | DecimalJsLike | number | string | null
    status: InvoiceStatus
    paymentTerms: PaymentTerms
    createdDate?: Date | string
    lastUpdateDate?: Date | string
    user?: UserCreateNestedOneWithoutInvoiceInput
  }

  export type InvoiceUncheckedCreateInput = {
    id?: number
    description?: string
    type: InvoiceType
    vendorId?: number | null
    accountId?: number | null
    projectId?: number | null
    invoiceDate?: Date | string
    dueDte?: Date | string | null
    transactionId?: string | null
    notes?: string | null
    total: Decimal | DecimalJsLike | number | string
    paidAmount?: Decimal | DecimalJsLike | number | string | null
    status: InvoiceStatus
    paymentTerms: PaymentTerms
    createdDate?: Date | string
    lastUpdateDate?: Date | string
    userId?: number | null
  }

  export type InvoiceUpdateInput = {
    description?: StringFieldUpdateOperationsInput | string
    type?: EnumInvoiceTypeFieldUpdateOperationsInput | InvoiceType
    vendor?: VendorUpdateOneWithoutInvoiceNestedInput
    account?: AccountUpdateOneWithoutInvoiceNestedInput
    project?: ProjectUpdateOneWithoutInvoiceNestedInput
    invoiceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDte?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    total?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paidAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: EnumInvoiceStatusFieldUpdateOperationsInput | InvoiceStatus
    paymentTerms?: EnumPaymentTermsFieldUpdateOperationsInput | PaymentTerms
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutInvoiceNestedInput
  }

  export type InvoiceUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    type?: EnumInvoiceTypeFieldUpdateOperationsInput | InvoiceType
    vendorId?: NullableIntFieldUpdateOperationsInput | number | null
    accountId?: NullableIntFieldUpdateOperationsInput | number | null
    projectId?: NullableIntFieldUpdateOperationsInput | number | null
    invoiceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDte?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    total?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paidAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: EnumInvoiceStatusFieldUpdateOperationsInput | InvoiceStatus
    paymentTerms?: EnumPaymentTermsFieldUpdateOperationsInput | PaymentTerms
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type InvoiceCreateManyInput = {
    id?: number
    description?: string
    type: InvoiceType
    vendorId?: number | null
    accountId?: number | null
    projectId?: number | null
    invoiceDate?: Date | string
    dueDte?: Date | string | null
    transactionId?: string | null
    notes?: string | null
    total: Decimal | DecimalJsLike | number | string
    paidAmount?: Decimal | DecimalJsLike | number | string | null
    status: InvoiceStatus
    paymentTerms: PaymentTerms
    createdDate?: Date | string
    lastUpdateDate?: Date | string
    userId?: number | null
  }

  export type InvoiceUpdateManyMutationInput = {
    description?: StringFieldUpdateOperationsInput | string
    type?: EnumInvoiceTypeFieldUpdateOperationsInput | InvoiceType
    invoiceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDte?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    total?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paidAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: EnumInvoiceStatusFieldUpdateOperationsInput | InvoiceStatus
    paymentTerms?: EnumPaymentTermsFieldUpdateOperationsInput | PaymentTerms
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InvoiceUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    type?: EnumInvoiceTypeFieldUpdateOperationsInput | InvoiceType
    vendorId?: NullableIntFieldUpdateOperationsInput | number | null
    accountId?: NullableIntFieldUpdateOperationsInput | number | null
    projectId?: NullableIntFieldUpdateOperationsInput | number | null
    invoiceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDte?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    total?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paidAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: EnumInvoiceStatusFieldUpdateOperationsInput | InvoiceStatus
    paymentTerms?: EnumPaymentTermsFieldUpdateOperationsInput | PaymentTerms
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type InvoiceItemCreateInput = {
    description?: string | null
    type: InvoiceItemType
    unitPrice?: Decimal | DecimalJsLike | number | string
    currency: Currency
    quantity?: number
    uom: UnitOfMeasure
    total?: Decimal | DecimalJsLike | number | string
    status: InvoiceStatus
    generalNote?: string | null
    user?: UserCreateNestedOneWithoutInvoiceItemInput
    fromDate?: Date | string | null
    toDate?: Date | string | null
    createdDate?: Date | string
    lastUpdateDate?: Date | string
  }

  export type InvoiceItemUncheckedCreateInput = {
    id?: number
    description?: string | null
    type: InvoiceItemType
    unitPrice?: Decimal | DecimalJsLike | number | string
    currency: Currency
    quantity?: number
    uom: UnitOfMeasure
    total?: Decimal | DecimalJsLike | number | string
    status: InvoiceStatus
    generalNote?: string | null
    userId?: number | null
    fromDate?: Date | string | null
    toDate?: Date | string | null
    createdDate?: Date | string
    lastUpdateDate?: Date | string
  }

  export type InvoiceItemUpdateInput = {
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumInvoiceItemTypeFieldUpdateOperationsInput | InvoiceItemType
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: EnumCurrencyFieldUpdateOperationsInput | Currency
    quantity?: IntFieldUpdateOperationsInput | number
    uom?: EnumUnitOfMeasureFieldUpdateOperationsInput | UnitOfMeasure
    total?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumInvoiceStatusFieldUpdateOperationsInput | InvoiceStatus
    generalNote?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneWithoutInvoiceItemNestedInput
    fromDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    toDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InvoiceItemUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumInvoiceItemTypeFieldUpdateOperationsInput | InvoiceItemType
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: EnumCurrencyFieldUpdateOperationsInput | Currency
    quantity?: IntFieldUpdateOperationsInput | number
    uom?: EnumUnitOfMeasureFieldUpdateOperationsInput | UnitOfMeasure
    total?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumInvoiceStatusFieldUpdateOperationsInput | InvoiceStatus
    generalNote?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    fromDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    toDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InvoiceItemCreateManyInput = {
    id?: number
    description?: string | null
    type: InvoiceItemType
    unitPrice?: Decimal | DecimalJsLike | number | string
    currency: Currency
    quantity?: number
    uom: UnitOfMeasure
    total?: Decimal | DecimalJsLike | number | string
    status: InvoiceStatus
    generalNote?: string | null
    userId?: number | null
    fromDate?: Date | string | null
    toDate?: Date | string | null
    createdDate?: Date | string
    lastUpdateDate?: Date | string
  }

  export type InvoiceItemUpdateManyMutationInput = {
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumInvoiceItemTypeFieldUpdateOperationsInput | InvoiceItemType
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: EnumCurrencyFieldUpdateOperationsInput | Currency
    quantity?: IntFieldUpdateOperationsInput | number
    uom?: EnumUnitOfMeasureFieldUpdateOperationsInput | UnitOfMeasure
    total?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumInvoiceStatusFieldUpdateOperationsInput | InvoiceStatus
    generalNote?: NullableStringFieldUpdateOperationsInput | string | null
    fromDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    toDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InvoiceItemUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumInvoiceItemTypeFieldUpdateOperationsInput | InvoiceItemType
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: EnumCurrencyFieldUpdateOperationsInput | Currency
    quantity?: IntFieldUpdateOperationsInput | number
    uom?: EnumUnitOfMeasureFieldUpdateOperationsInput | UnitOfMeasure
    total?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumInvoiceStatusFieldUpdateOperationsInput | InvoiceStatus
    generalNote?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    fromDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    toDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectCreateInput = {
    name: string
    referenceCode: string
    description?: string
    type: InvoiceItemType
    invoiceCycle: InvoiceCycle
    address?: AddressCreateNestedOneWithoutProjectInput
    vendor?: VendorCreateNestedOneWithoutProjectInput
    account?: AccountCreateNestedOneWithoutProjectInput
    budget?: Decimal | DecimalJsLike | number | string
    totalHours?: number | null
    averageRate?: Decimal | DecimalJsLike | number | string | null
    status: ProjectStatus
    createdDate?: Date | string
    lastUpdateDate?: Date | string
    Invoice?: InvoiceCreateNestedManyWithoutProjectInput
    ProjectResource?: ProjectResourceCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateInput = {
    id?: number
    name: string
    referenceCode: string
    description?: string
    type: InvoiceItemType
    invoiceCycle: InvoiceCycle
    addressId?: number
    vendorId?: number
    accountId?: number
    budget?: Decimal | DecimalJsLike | number | string
    totalHours?: number | null
    averageRate?: Decimal | DecimalJsLike | number | string | null
    status: ProjectStatus
    createdDate?: Date | string
    lastUpdateDate?: Date | string
    Invoice?: InvoiceUncheckedCreateNestedManyWithoutProjectInput
    ProjectResource?: ProjectResourceUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    referenceCode?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: EnumInvoiceItemTypeFieldUpdateOperationsInput | InvoiceItemType
    invoiceCycle?: EnumInvoiceCycleFieldUpdateOperationsInput | InvoiceCycle
    address?: AddressUpdateOneWithoutProjectNestedInput
    vendor?: VendorUpdateOneWithoutProjectNestedInput
    account?: AccountUpdateOneWithoutProjectNestedInput
    budget?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalHours?: NullableIntFieldUpdateOperationsInput | number | null
    averageRate?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | ProjectStatus
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Invoice?: InvoiceUpdateManyWithoutProjectNestedInput
    ProjectResource?: ProjectResourceUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    referenceCode?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: EnumInvoiceItemTypeFieldUpdateOperationsInput | InvoiceItemType
    invoiceCycle?: EnumInvoiceCycleFieldUpdateOperationsInput | InvoiceCycle
    addressId?: IntFieldUpdateOperationsInput | number
    vendorId?: IntFieldUpdateOperationsInput | number
    accountId?: IntFieldUpdateOperationsInput | number
    budget?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalHours?: NullableIntFieldUpdateOperationsInput | number | null
    averageRate?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | ProjectStatus
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Invoice?: InvoiceUncheckedUpdateManyWithoutProjectNestedInput
    ProjectResource?: ProjectResourceUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ProjectCreateManyInput = {
    id?: number
    name: string
    referenceCode: string
    description?: string
    type: InvoiceItemType
    invoiceCycle: InvoiceCycle
    addressId?: number
    vendorId?: number
    accountId?: number
    budget?: Decimal | DecimalJsLike | number | string
    totalHours?: number | null
    averageRate?: Decimal | DecimalJsLike | number | string | null
    status: ProjectStatus
    createdDate?: Date | string
    lastUpdateDate?: Date | string
  }

  export type ProjectUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    referenceCode?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: EnumInvoiceItemTypeFieldUpdateOperationsInput | InvoiceItemType
    invoiceCycle?: EnumInvoiceCycleFieldUpdateOperationsInput | InvoiceCycle
    budget?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalHours?: NullableIntFieldUpdateOperationsInput | number | null
    averageRate?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | ProjectStatus
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    referenceCode?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: EnumInvoiceItemTypeFieldUpdateOperationsInput | InvoiceItemType
    invoiceCycle?: EnumInvoiceCycleFieldUpdateOperationsInput | InvoiceCycle
    addressId?: IntFieldUpdateOperationsInput | number
    vendorId?: IntFieldUpdateOperationsInput | number
    accountId?: IntFieldUpdateOperationsInput | number
    budget?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalHours?: NullableIntFieldUpdateOperationsInput | number | null
    averageRate?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | ProjectStatus
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateInput = {
    firstName: string
    lastName: string
    role?: Role
    email: string
    phone?: string
    account?: AccountCreateNestedOneWithoutUserInput
    vendor?: VendorCreateNestedOneWithoutUserInput
    isTimeSheetEnabled?: boolean
    address?: AddressCreateNestedManyWithoutUserInput
    userAttributes?: UserAttributesCreateNestedManyWithoutUserInput
    status?: UserStatus
    password?: string
    createdDate?: Date | string
    lastUpdateDate?: Date | string
    Invoice?: InvoiceCreateNestedManyWithoutUserInput
    InvoiceItem?: InvoiceItemCreateNestedManyWithoutUserInput
    ProjectResource?: ProjectResourceCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    firstName: string
    lastName: string
    role?: Role
    email: string
    phone?: string
    accountId?: number | null
    vendorId?: number | null
    isTimeSheetEnabled?: boolean
    address?: AddressUncheckedCreateNestedManyWithoutUserInput
    userAttributes?: UserAttributesUncheckedCreateNestedManyWithoutUserInput
    status?: UserStatus
    password?: string
    createdDate?: Date | string
    lastUpdateDate?: Date | string
    Invoice?: InvoiceUncheckedCreateNestedManyWithoutUserInput
    InvoiceItem?: InvoiceItemUncheckedCreateNestedManyWithoutUserInput
    ProjectResource?: ProjectResourceUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    account?: AccountUpdateOneWithoutUserNestedInput
    vendor?: VendorUpdateOneWithoutUserNestedInput
    isTimeSheetEnabled?: BoolFieldUpdateOperationsInput | boolean
    address?: AddressUpdateManyWithoutUserNestedInput
    userAttributes?: UserAttributesUpdateManyWithoutUserNestedInput
    status?: EnumUserStatusFieldUpdateOperationsInput | UserStatus
    password?: StringFieldUpdateOperationsInput | string
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Invoice?: InvoiceUpdateManyWithoutUserNestedInput
    InvoiceItem?: InvoiceItemUpdateManyWithoutUserNestedInput
    ProjectResource?: ProjectResourceUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    accountId?: NullableIntFieldUpdateOperationsInput | number | null
    vendorId?: NullableIntFieldUpdateOperationsInput | number | null
    isTimeSheetEnabled?: BoolFieldUpdateOperationsInput | boolean
    address?: AddressUncheckedUpdateManyWithoutUserNestedInput
    userAttributes?: UserAttributesUncheckedUpdateManyWithoutUserNestedInput
    status?: EnumUserStatusFieldUpdateOperationsInput | UserStatus
    password?: StringFieldUpdateOperationsInput | string
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Invoice?: InvoiceUncheckedUpdateManyWithoutUserNestedInput
    InvoiceItem?: InvoiceItemUncheckedUpdateManyWithoutUserNestedInput
    ProjectResource?: ProjectResourceUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    firstName: string
    lastName: string
    role?: Role
    email: string
    phone?: string
    accountId?: number | null
    vendorId?: number | null
    isTimeSheetEnabled?: boolean
    status?: UserStatus
    password?: string
    createdDate?: Date | string
    lastUpdateDate?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    isTimeSheetEnabled?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumUserStatusFieldUpdateOperationsInput | UserStatus
    password?: StringFieldUpdateOperationsInput | string
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    accountId?: NullableIntFieldUpdateOperationsInput | number | null
    vendorId?: NullableIntFieldUpdateOperationsInput | number | null
    isTimeSheetEnabled?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumUserStatusFieldUpdateOperationsInput | UserStatus
    password?: StringFieldUpdateOperationsInput | string
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserAttributesCreateInput = {
    userAttributeKey?: UserAttributeKeys
    userAttributeValue?: string | null
    createdDate?: Date | string
    lastUpdateDate?: Date | string
    User: UserCreateNestedOneWithoutUserAttributesInput
  }

  export type UserAttributesUncheckedCreateInput = {
    id?: number
    userAttributeKey?: UserAttributeKeys
    userAttributeValue?: string | null
    createdDate?: Date | string
    lastUpdateDate?: Date | string
    userId: number
  }

  export type UserAttributesUpdateInput = {
    userAttributeKey?: EnumUserAttributeKeysFieldUpdateOperationsInput | UserAttributeKeys
    userAttributeValue?: NullableStringFieldUpdateOperationsInput | string | null
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UserUpdateOneRequiredWithoutUserAttributesNestedInput
  }

  export type UserAttributesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userAttributeKey?: EnumUserAttributeKeysFieldUpdateOperationsInput | UserAttributeKeys
    userAttributeValue?: NullableStringFieldUpdateOperationsInput | string | null
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type UserAttributesCreateManyInput = {
    id?: number
    userAttributeKey?: UserAttributeKeys
    userAttributeValue?: string | null
    createdDate?: Date | string
    lastUpdateDate?: Date | string
    userId: number
  }

  export type UserAttributesUpdateManyMutationInput = {
    userAttributeKey?: EnumUserAttributeKeysFieldUpdateOperationsInput | UserAttributeKeys
    userAttributeValue?: NullableStringFieldUpdateOperationsInput | string | null
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserAttributesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userAttributeKey?: EnumUserAttributeKeysFieldUpdateOperationsInput | UserAttributeKeys
    userAttributeValue?: NullableStringFieldUpdateOperationsInput | string | null
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type EnumAddressTypeFilter = {
    equals?: AddressType
    in?: Enumerable<AddressType>
    notIn?: Enumerable<AddressType>
    not?: NestedEnumAddressTypeFilter | AddressType
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type EnumAddressStatusFilter = {
    equals?: AddressStatus
    in?: Enumerable<AddressStatus>
    notIn?: Enumerable<AddressStatus>
    not?: NestedEnumAddressStatusFilter | AddressStatus
  }

  export type AccountRelationFilter = {
    is?: AccountWhereInput | null
    isNot?: AccountWhereInput | null
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type VendorRelationFilter = {
    is?: VendorWhereInput | null
    isNot?: VendorWhereInput | null
  }

  export type ProjectListRelationFilter = {
    every?: ProjectWhereInput
    some?: ProjectWhereInput
    none?: ProjectWhereInput
  }

  export type ProjectOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AddressCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    address1?: SortOrder
    address2?: SortOrder
    address3?: SortOrder
    county?: SortOrder
    city?: SortOrder
    state?: SortOrder
    zipCode?: SortOrder
    country?: SortOrder
    primary?: SortOrder
    createdDate?: SortOrder
    lastUpdateDate?: SortOrder
    status?: SortOrder
    accountId?: SortOrder
    userId?: SortOrder
    vendorId?: SortOrder
  }

  export type AddressAvgOrderByAggregateInput = {
    id?: SortOrder
    accountId?: SortOrder
    userId?: SortOrder
    vendorId?: SortOrder
  }

  export type AddressMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    address1?: SortOrder
    address2?: SortOrder
    address3?: SortOrder
    county?: SortOrder
    city?: SortOrder
    state?: SortOrder
    zipCode?: SortOrder
    country?: SortOrder
    primary?: SortOrder
    createdDate?: SortOrder
    lastUpdateDate?: SortOrder
    status?: SortOrder
    accountId?: SortOrder
    userId?: SortOrder
    vendorId?: SortOrder
  }

  export type AddressMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    address1?: SortOrder
    address2?: SortOrder
    address3?: SortOrder
    county?: SortOrder
    city?: SortOrder
    state?: SortOrder
    zipCode?: SortOrder
    country?: SortOrder
    primary?: SortOrder
    createdDate?: SortOrder
    lastUpdateDate?: SortOrder
    status?: SortOrder
    accountId?: SortOrder
    userId?: SortOrder
    vendorId?: SortOrder
  }

  export type AddressSumOrderByAggregateInput = {
    id?: SortOrder
    accountId?: SortOrder
    userId?: SortOrder
    vendorId?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type EnumAddressTypeWithAggregatesFilter = {
    equals?: AddressType
    in?: Enumerable<AddressType>
    notIn?: Enumerable<AddressType>
    not?: NestedEnumAddressTypeWithAggregatesFilter | AddressType
    _count?: NestedIntFilter
    _min?: NestedEnumAddressTypeFilter
    _max?: NestedEnumAddressTypeFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type EnumAddressStatusWithAggregatesFilter = {
    equals?: AddressStatus
    in?: Enumerable<AddressStatus>
    notIn?: Enumerable<AddressStatus>
    not?: NestedEnumAddressStatusWithAggregatesFilter | AddressStatus
    _count?: NestedIntFilter
    _min?: NestedEnumAddressStatusFilter
    _max?: NestedEnumAddressStatusFilter
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type EnumAccountStatusFilter = {
    equals?: AccountStatus
    in?: Enumerable<AccountStatus>
    notIn?: Enumerable<AccountStatus>
    not?: NestedEnumAccountStatusFilter | AccountStatus
  }

  export type AddressListRelationFilter = {
    every?: AddressWhereInput
    some?: AddressWhereInput
    none?: AddressWhereInput
  }

  export type InvoiceListRelationFilter = {
    every?: InvoiceWhereInput
    some?: InvoiceWhereInput
    none?: InvoiceWhereInput
  }

  export type VendorListRelationFilter = {
    every?: VendorWhereInput
    some?: VendorWhereInput
    none?: VendorWhereInput
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type AddressOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InvoiceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type VendorOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AccountCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    ein?: SortOrder
    bankId?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    status?: SortOrder
    createdDate?: SortOrder
    lastUpdateDate?: SortOrder
  }

  export type AccountAvgOrderByAggregateInput = {
    id?: SortOrder
    bankId?: SortOrder
  }

  export type AccountMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    ein?: SortOrder
    bankId?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    status?: SortOrder
    createdDate?: SortOrder
    lastUpdateDate?: SortOrder
  }

  export type AccountMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    ein?: SortOrder
    bankId?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    status?: SortOrder
    createdDate?: SortOrder
    lastUpdateDate?: SortOrder
  }

  export type AccountSumOrderByAggregateInput = {
    id?: SortOrder
    bankId?: SortOrder
  }

  export type EnumAccountStatusWithAggregatesFilter = {
    equals?: AccountStatus
    in?: Enumerable<AccountStatus>
    notIn?: Enumerable<AccountStatus>
    not?: NestedEnumAccountStatusWithAggregatesFilter | AccountStatus
    _count?: NestedIntFilter
    _min?: NestedEnumAccountStatusFilter
    _max?: NestedEnumAccountStatusFilter
  }

  export type EnumVendorTypeFilter = {
    equals?: VendorType
    in?: Enumerable<VendorType>
    notIn?: Enumerable<VendorType>
    not?: NestedEnumVendorTypeFilter | VendorType
  }

  export type EnumVendorStatusFilter = {
    equals?: VendorStatus
    in?: Enumerable<VendorStatus>
    notIn?: Enumerable<VendorStatus>
    not?: NestedEnumVendorStatusFilter | VendorStatus
  }

  export type VendorCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    type?: SortOrder
    accountId?: SortOrder
    ein?: SortOrder
    bankDetails?: SortOrder
    status?: SortOrder
    createdDate?: SortOrder
    accountContactName?: SortOrder
    accountContactEmail?: SortOrder
    accountContactPhone?: SortOrder
    lastUpdateDate?: SortOrder
  }

  export type VendorAvgOrderByAggregateInput = {
    id?: SortOrder
    accountId?: SortOrder
  }

  export type VendorMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    type?: SortOrder
    accountId?: SortOrder
    ein?: SortOrder
    bankDetails?: SortOrder
    status?: SortOrder
    createdDate?: SortOrder
    accountContactName?: SortOrder
    accountContactEmail?: SortOrder
    accountContactPhone?: SortOrder
    lastUpdateDate?: SortOrder
  }

  export type VendorMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    type?: SortOrder
    accountId?: SortOrder
    ein?: SortOrder
    bankDetails?: SortOrder
    status?: SortOrder
    createdDate?: SortOrder
    accountContactName?: SortOrder
    accountContactEmail?: SortOrder
    accountContactPhone?: SortOrder
    lastUpdateDate?: SortOrder
  }

  export type VendorSumOrderByAggregateInput = {
    id?: SortOrder
    accountId?: SortOrder
  }

  export type EnumVendorTypeWithAggregatesFilter = {
    equals?: VendorType
    in?: Enumerable<VendorType>
    notIn?: Enumerable<VendorType>
    not?: NestedEnumVendorTypeWithAggregatesFilter | VendorType
    _count?: NestedIntFilter
    _min?: NestedEnumVendorTypeFilter
    _max?: NestedEnumVendorTypeFilter
  }

  export type EnumVendorStatusWithAggregatesFilter = {
    equals?: VendorStatus
    in?: Enumerable<VendorStatus>
    notIn?: Enumerable<VendorStatus>
    not?: NestedEnumVendorStatusWithAggregatesFilter | VendorStatus
    _count?: NestedIntFilter
    _min?: NestedEnumVendorStatusFilter
    _max?: NestedEnumVendorStatusFilter
  }

  export type ProjectRelationFilter = {
    is?: ProjectWhereInput | null
    isNot?: ProjectWhereInput | null
  }

  export type DecimalNullableFilter = {
    equals?: Decimal | DecimalJsLike | number | string | null
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | null
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | null
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalNullableFilter | Decimal | DecimalJsLike | number | string | null
  }

  export type EnumCurrencyNullableFilter = {
    equals?: Currency | null
    in?: Enumerable<Currency> | null
    notIn?: Enumerable<Currency> | null
    not?: NestedEnumCurrencyNullableFilter | Currency | null
  }

  export type EnumUnitOfMeasureNullableFilter = {
    equals?: UnitOfMeasure | null
    in?: Enumerable<UnitOfMeasure> | null
    notIn?: Enumerable<UnitOfMeasure> | null
    not?: NestedEnumUnitOfMeasureNullableFilter | UnitOfMeasure | null
  }

  export type ProjectResourceCountOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
    userId?: SortOrder
    unitPrice?: SortOrder
    currency?: SortOrder
    quantity?: SortOrder
    uom?: SortOrder
    budgetAllocated?: SortOrder
  }

  export type ProjectResourceAvgOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
    userId?: SortOrder
    unitPrice?: SortOrder
    quantity?: SortOrder
    budgetAllocated?: SortOrder
  }

  export type ProjectResourceMaxOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
    userId?: SortOrder
    unitPrice?: SortOrder
    currency?: SortOrder
    quantity?: SortOrder
    uom?: SortOrder
    budgetAllocated?: SortOrder
  }

  export type ProjectResourceMinOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
    userId?: SortOrder
    unitPrice?: SortOrder
    currency?: SortOrder
    quantity?: SortOrder
    uom?: SortOrder
    budgetAllocated?: SortOrder
  }

  export type ProjectResourceSumOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
    userId?: SortOrder
    unitPrice?: SortOrder
    quantity?: SortOrder
    budgetAllocated?: SortOrder
  }

  export type DecimalNullableWithAggregatesFilter = {
    equals?: Decimal | DecimalJsLike | number | string | null
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | null
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | null
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalNullableWithAggregatesFilter | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter
    _avg?: NestedDecimalNullableFilter
    _sum?: NestedDecimalNullableFilter
    _min?: NestedDecimalNullableFilter
    _max?: NestedDecimalNullableFilter
  }

  export type EnumCurrencyNullableWithAggregatesFilter = {
    equals?: Currency | null
    in?: Enumerable<Currency> | null
    notIn?: Enumerable<Currency> | null
    not?: NestedEnumCurrencyNullableWithAggregatesFilter | Currency | null
    _count?: NestedIntNullableFilter
    _min?: NestedEnumCurrencyNullableFilter
    _max?: NestedEnumCurrencyNullableFilter
  }

  export type EnumUnitOfMeasureNullableWithAggregatesFilter = {
    equals?: UnitOfMeasure | null
    in?: Enumerable<UnitOfMeasure> | null
    notIn?: Enumerable<UnitOfMeasure> | null
    not?: NestedEnumUnitOfMeasureNullableWithAggregatesFilter | UnitOfMeasure | null
    _count?: NestedIntNullableFilter
    _min?: NestedEnumUnitOfMeasureNullableFilter
    _max?: NestedEnumUnitOfMeasureNullableFilter
  }

  export type EnumInvoiceTypeFilter = {
    equals?: InvoiceType
    in?: Enumerable<InvoiceType>
    notIn?: Enumerable<InvoiceType>
    not?: NestedEnumInvoiceTypeFilter | InvoiceType
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type DecimalFilter = {
    equals?: Decimal | DecimalJsLike | number | string
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string>
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string>
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalFilter | Decimal | DecimalJsLike | number | string
  }

  export type EnumInvoiceStatusFilter = {
    equals?: InvoiceStatus
    in?: Enumerable<InvoiceStatus>
    notIn?: Enumerable<InvoiceStatus>
    not?: NestedEnumInvoiceStatusFilter | InvoiceStatus
  }

  export type EnumPaymentTermsFilter = {
    equals?: PaymentTerms
    in?: Enumerable<PaymentTerms>
    notIn?: Enumerable<PaymentTerms>
    not?: NestedEnumPaymentTermsFilter | PaymentTerms
  }

  export type InvoiceCountOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    type?: SortOrder
    vendorId?: SortOrder
    accountId?: SortOrder
    projectId?: SortOrder
    invoiceDate?: SortOrder
    dueDte?: SortOrder
    transactionId?: SortOrder
    notes?: SortOrder
    total?: SortOrder
    paidAmount?: SortOrder
    status?: SortOrder
    paymentTerms?: SortOrder
    createdDate?: SortOrder
    lastUpdateDate?: SortOrder
    userId?: SortOrder
  }

  export type InvoiceAvgOrderByAggregateInput = {
    id?: SortOrder
    vendorId?: SortOrder
    accountId?: SortOrder
    projectId?: SortOrder
    total?: SortOrder
    paidAmount?: SortOrder
    userId?: SortOrder
  }

  export type InvoiceMaxOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    type?: SortOrder
    vendorId?: SortOrder
    accountId?: SortOrder
    projectId?: SortOrder
    invoiceDate?: SortOrder
    dueDte?: SortOrder
    transactionId?: SortOrder
    notes?: SortOrder
    total?: SortOrder
    paidAmount?: SortOrder
    status?: SortOrder
    paymentTerms?: SortOrder
    createdDate?: SortOrder
    lastUpdateDate?: SortOrder
    userId?: SortOrder
  }

  export type InvoiceMinOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    type?: SortOrder
    vendorId?: SortOrder
    accountId?: SortOrder
    projectId?: SortOrder
    invoiceDate?: SortOrder
    dueDte?: SortOrder
    transactionId?: SortOrder
    notes?: SortOrder
    total?: SortOrder
    paidAmount?: SortOrder
    status?: SortOrder
    paymentTerms?: SortOrder
    createdDate?: SortOrder
    lastUpdateDate?: SortOrder
    userId?: SortOrder
  }

  export type InvoiceSumOrderByAggregateInput = {
    id?: SortOrder
    vendorId?: SortOrder
    accountId?: SortOrder
    projectId?: SortOrder
    total?: SortOrder
    paidAmount?: SortOrder
    userId?: SortOrder
  }

  export type EnumInvoiceTypeWithAggregatesFilter = {
    equals?: InvoiceType
    in?: Enumerable<InvoiceType>
    notIn?: Enumerable<InvoiceType>
    not?: NestedEnumInvoiceTypeWithAggregatesFilter | InvoiceType
    _count?: NestedIntFilter
    _min?: NestedEnumInvoiceTypeFilter
    _max?: NestedEnumInvoiceTypeFilter
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type DecimalWithAggregatesFilter = {
    equals?: Decimal | DecimalJsLike | number | string
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string>
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string>
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter
    _avg?: NestedDecimalFilter
    _sum?: NestedDecimalFilter
    _min?: NestedDecimalFilter
    _max?: NestedDecimalFilter
  }

  export type EnumInvoiceStatusWithAggregatesFilter = {
    equals?: InvoiceStatus
    in?: Enumerable<InvoiceStatus>
    notIn?: Enumerable<InvoiceStatus>
    not?: NestedEnumInvoiceStatusWithAggregatesFilter | InvoiceStatus
    _count?: NestedIntFilter
    _min?: NestedEnumInvoiceStatusFilter
    _max?: NestedEnumInvoiceStatusFilter
  }

  export type EnumPaymentTermsWithAggregatesFilter = {
    equals?: PaymentTerms
    in?: Enumerable<PaymentTerms>
    notIn?: Enumerable<PaymentTerms>
    not?: NestedEnumPaymentTermsWithAggregatesFilter | PaymentTerms
    _count?: NestedIntFilter
    _min?: NestedEnumPaymentTermsFilter
    _max?: NestedEnumPaymentTermsFilter
  }

  export type EnumInvoiceItemTypeFilter = {
    equals?: InvoiceItemType
    in?: Enumerable<InvoiceItemType>
    notIn?: Enumerable<InvoiceItemType>
    not?: NestedEnumInvoiceItemTypeFilter | InvoiceItemType
  }

  export type EnumCurrencyFilter = {
    equals?: Currency
    in?: Enumerable<Currency>
    notIn?: Enumerable<Currency>
    not?: NestedEnumCurrencyFilter | Currency
  }

  export type EnumUnitOfMeasureFilter = {
    equals?: UnitOfMeasure
    in?: Enumerable<UnitOfMeasure>
    notIn?: Enumerable<UnitOfMeasure>
    not?: NestedEnumUnitOfMeasureFilter | UnitOfMeasure
  }

  export type InvoiceItemCountOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    type?: SortOrder
    unitPrice?: SortOrder
    currency?: SortOrder
    quantity?: SortOrder
    uom?: SortOrder
    total?: SortOrder
    status?: SortOrder
    generalNote?: SortOrder
    userId?: SortOrder
    fromDate?: SortOrder
    toDate?: SortOrder
    createdDate?: SortOrder
    lastUpdateDate?: SortOrder
  }

  export type InvoiceItemAvgOrderByAggregateInput = {
    id?: SortOrder
    unitPrice?: SortOrder
    quantity?: SortOrder
    total?: SortOrder
    userId?: SortOrder
  }

  export type InvoiceItemMaxOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    type?: SortOrder
    unitPrice?: SortOrder
    currency?: SortOrder
    quantity?: SortOrder
    uom?: SortOrder
    total?: SortOrder
    status?: SortOrder
    generalNote?: SortOrder
    userId?: SortOrder
    fromDate?: SortOrder
    toDate?: SortOrder
    createdDate?: SortOrder
    lastUpdateDate?: SortOrder
  }

  export type InvoiceItemMinOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    type?: SortOrder
    unitPrice?: SortOrder
    currency?: SortOrder
    quantity?: SortOrder
    uom?: SortOrder
    total?: SortOrder
    status?: SortOrder
    generalNote?: SortOrder
    userId?: SortOrder
    fromDate?: SortOrder
    toDate?: SortOrder
    createdDate?: SortOrder
    lastUpdateDate?: SortOrder
  }

  export type InvoiceItemSumOrderByAggregateInput = {
    id?: SortOrder
    unitPrice?: SortOrder
    quantity?: SortOrder
    total?: SortOrder
    userId?: SortOrder
  }

  export type EnumInvoiceItemTypeWithAggregatesFilter = {
    equals?: InvoiceItemType
    in?: Enumerable<InvoiceItemType>
    notIn?: Enumerable<InvoiceItemType>
    not?: NestedEnumInvoiceItemTypeWithAggregatesFilter | InvoiceItemType
    _count?: NestedIntFilter
    _min?: NestedEnumInvoiceItemTypeFilter
    _max?: NestedEnumInvoiceItemTypeFilter
  }

  export type EnumCurrencyWithAggregatesFilter = {
    equals?: Currency
    in?: Enumerable<Currency>
    notIn?: Enumerable<Currency>
    not?: NestedEnumCurrencyWithAggregatesFilter | Currency
    _count?: NestedIntFilter
    _min?: NestedEnumCurrencyFilter
    _max?: NestedEnumCurrencyFilter
  }

  export type EnumUnitOfMeasureWithAggregatesFilter = {
    equals?: UnitOfMeasure
    in?: Enumerable<UnitOfMeasure>
    notIn?: Enumerable<UnitOfMeasure>
    not?: NestedEnumUnitOfMeasureWithAggregatesFilter | UnitOfMeasure
    _count?: NestedIntFilter
    _min?: NestedEnumUnitOfMeasureFilter
    _max?: NestedEnumUnitOfMeasureFilter
  }

  export type EnumInvoiceCycleFilter = {
    equals?: InvoiceCycle
    in?: Enumerable<InvoiceCycle>
    notIn?: Enumerable<InvoiceCycle>
    not?: NestedEnumInvoiceCycleFilter | InvoiceCycle
  }

  export type AddressRelationFilter = {
    is?: AddressWhereInput | null
    isNot?: AddressWhereInput | null
  }

  export type EnumProjectStatusFilter = {
    equals?: ProjectStatus
    in?: Enumerable<ProjectStatus>
    notIn?: Enumerable<ProjectStatus>
    not?: NestedEnumProjectStatusFilter | ProjectStatus
  }

  export type ProjectResourceListRelationFilter = {
    every?: ProjectResourceWhereInput
    some?: ProjectResourceWhereInput
    none?: ProjectResourceWhereInput
  }

  export type ProjectResourceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProjectCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    referenceCode?: SortOrder
    description?: SortOrder
    type?: SortOrder
    invoiceCycle?: SortOrder
    addressId?: SortOrder
    vendorId?: SortOrder
    accountId?: SortOrder
    budget?: SortOrder
    totalHours?: SortOrder
    averageRate?: SortOrder
    status?: SortOrder
    createdDate?: SortOrder
    lastUpdateDate?: SortOrder
  }

  export type ProjectAvgOrderByAggregateInput = {
    id?: SortOrder
    addressId?: SortOrder
    vendorId?: SortOrder
    accountId?: SortOrder
    budget?: SortOrder
    totalHours?: SortOrder
    averageRate?: SortOrder
  }

  export type ProjectMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    referenceCode?: SortOrder
    description?: SortOrder
    type?: SortOrder
    invoiceCycle?: SortOrder
    addressId?: SortOrder
    vendorId?: SortOrder
    accountId?: SortOrder
    budget?: SortOrder
    totalHours?: SortOrder
    averageRate?: SortOrder
    status?: SortOrder
    createdDate?: SortOrder
    lastUpdateDate?: SortOrder
  }

  export type ProjectMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    referenceCode?: SortOrder
    description?: SortOrder
    type?: SortOrder
    invoiceCycle?: SortOrder
    addressId?: SortOrder
    vendorId?: SortOrder
    accountId?: SortOrder
    budget?: SortOrder
    totalHours?: SortOrder
    averageRate?: SortOrder
    status?: SortOrder
    createdDate?: SortOrder
    lastUpdateDate?: SortOrder
  }

  export type ProjectSumOrderByAggregateInput = {
    id?: SortOrder
    addressId?: SortOrder
    vendorId?: SortOrder
    accountId?: SortOrder
    budget?: SortOrder
    totalHours?: SortOrder
    averageRate?: SortOrder
  }

  export type EnumInvoiceCycleWithAggregatesFilter = {
    equals?: InvoiceCycle
    in?: Enumerable<InvoiceCycle>
    notIn?: Enumerable<InvoiceCycle>
    not?: NestedEnumInvoiceCycleWithAggregatesFilter | InvoiceCycle
    _count?: NestedIntFilter
    _min?: NestedEnumInvoiceCycleFilter
    _max?: NestedEnumInvoiceCycleFilter
  }

  export type EnumProjectStatusWithAggregatesFilter = {
    equals?: ProjectStatus
    in?: Enumerable<ProjectStatus>
    notIn?: Enumerable<ProjectStatus>
    not?: NestedEnumProjectStatusWithAggregatesFilter | ProjectStatus
    _count?: NestedIntFilter
    _min?: NestedEnumProjectStatusFilter
    _max?: NestedEnumProjectStatusFilter
  }

  export type EnumRoleFilter = {
    equals?: Role
    in?: Enumerable<Role>
    notIn?: Enumerable<Role>
    not?: NestedEnumRoleFilter | Role
  }

  export type UserAttributesListRelationFilter = {
    every?: UserAttributesWhereInput
    some?: UserAttributesWhereInput
    none?: UserAttributesWhereInput
  }

  export type EnumUserStatusFilter = {
    equals?: UserStatus
    in?: Enumerable<UserStatus>
    notIn?: Enumerable<UserStatus>
    not?: NestedEnumUserStatusFilter | UserStatus
  }

  export type InvoiceItemListRelationFilter = {
    every?: InvoiceItemWhereInput
    some?: InvoiceItemWhereInput
    none?: InvoiceItemWhereInput
  }

  export type UserAttributesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InvoiceItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    role?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    accountId?: SortOrder
    vendorId?: SortOrder
    isTimeSheetEnabled?: SortOrder
    status?: SortOrder
    password?: SortOrder
    createdDate?: SortOrder
    lastUpdateDate?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
    accountId?: SortOrder
    vendorId?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    role?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    accountId?: SortOrder
    vendorId?: SortOrder
    isTimeSheetEnabled?: SortOrder
    status?: SortOrder
    password?: SortOrder
    createdDate?: SortOrder
    lastUpdateDate?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    role?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    accountId?: SortOrder
    vendorId?: SortOrder
    isTimeSheetEnabled?: SortOrder
    status?: SortOrder
    password?: SortOrder
    createdDate?: SortOrder
    lastUpdateDate?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
    accountId?: SortOrder
    vendorId?: SortOrder
  }

  export type EnumRoleWithAggregatesFilter = {
    equals?: Role
    in?: Enumerable<Role>
    notIn?: Enumerable<Role>
    not?: NestedEnumRoleWithAggregatesFilter | Role
    _count?: NestedIntFilter
    _min?: NestedEnumRoleFilter
    _max?: NestedEnumRoleFilter
  }

  export type EnumUserStatusWithAggregatesFilter = {
    equals?: UserStatus
    in?: Enumerable<UserStatus>
    notIn?: Enumerable<UserStatus>
    not?: NestedEnumUserStatusWithAggregatesFilter | UserStatus
    _count?: NestedIntFilter
    _min?: NestedEnumUserStatusFilter
    _max?: NestedEnumUserStatusFilter
  }

  export type EnumUserAttributeKeysFilter = {
    equals?: UserAttributeKeys
    in?: Enumerable<UserAttributeKeys>
    notIn?: Enumerable<UserAttributeKeys>
    not?: NestedEnumUserAttributeKeysFilter | UserAttributeKeys
  }

  export type UserAttributesCountOrderByAggregateInput = {
    id?: SortOrder
    userAttributeKey?: SortOrder
    userAttributeValue?: SortOrder
    createdDate?: SortOrder
    lastUpdateDate?: SortOrder
    userId?: SortOrder
  }

  export type UserAttributesAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type UserAttributesMaxOrderByAggregateInput = {
    id?: SortOrder
    userAttributeKey?: SortOrder
    userAttributeValue?: SortOrder
    createdDate?: SortOrder
    lastUpdateDate?: SortOrder
    userId?: SortOrder
  }

  export type UserAttributesMinOrderByAggregateInput = {
    id?: SortOrder
    userAttributeKey?: SortOrder
    userAttributeValue?: SortOrder
    createdDate?: SortOrder
    lastUpdateDate?: SortOrder
    userId?: SortOrder
  }

  export type UserAttributesSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type EnumUserAttributeKeysWithAggregatesFilter = {
    equals?: UserAttributeKeys
    in?: Enumerable<UserAttributeKeys>
    notIn?: Enumerable<UserAttributeKeys>
    not?: NestedEnumUserAttributeKeysWithAggregatesFilter | UserAttributeKeys
    _count?: NestedIntFilter
    _min?: NestedEnumUserAttributeKeysFilter
    _max?: NestedEnumUserAttributeKeysFilter
  }

  export type AccountCreateNestedOneWithoutAddressInput = {
    create?: XOR<AccountCreateWithoutAddressInput, AccountUncheckedCreateWithoutAddressInput>
    connectOrCreate?: AccountCreateOrConnectWithoutAddressInput
    connect?: AccountWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAddressInput = {
    create?: XOR<UserCreateWithoutAddressInput, UserUncheckedCreateWithoutAddressInput>
    connectOrCreate?: UserCreateOrConnectWithoutAddressInput
    connect?: UserWhereUniqueInput
  }

  export type VendorCreateNestedOneWithoutAddressInput = {
    create?: XOR<VendorCreateWithoutAddressInput, VendorUncheckedCreateWithoutAddressInput>
    connectOrCreate?: VendorCreateOrConnectWithoutAddressInput
    connect?: VendorWhereUniqueInput
  }

  export type ProjectCreateNestedManyWithoutAddressInput = {
    create?: XOR<Enumerable<ProjectCreateWithoutAddressInput>, Enumerable<ProjectUncheckedCreateWithoutAddressInput>>
    connectOrCreate?: Enumerable<ProjectCreateOrConnectWithoutAddressInput>
    createMany?: ProjectCreateManyAddressInputEnvelope
    connect?: Enumerable<ProjectWhereUniqueInput>
  }

  export type ProjectUncheckedCreateNestedManyWithoutAddressInput = {
    create?: XOR<Enumerable<ProjectCreateWithoutAddressInput>, Enumerable<ProjectUncheckedCreateWithoutAddressInput>>
    connectOrCreate?: Enumerable<ProjectCreateOrConnectWithoutAddressInput>
    createMany?: ProjectCreateManyAddressInputEnvelope
    connect?: Enumerable<ProjectWhereUniqueInput>
  }

  export type EnumAddressTypeFieldUpdateOperationsInput = {
    set?: AddressType
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type EnumAddressStatusFieldUpdateOperationsInput = {
    set?: AddressStatus
  }

  export type AccountUpdateOneRequiredWithoutAddressNestedInput = {
    create?: XOR<AccountCreateWithoutAddressInput, AccountUncheckedCreateWithoutAddressInput>
    connectOrCreate?: AccountCreateOrConnectWithoutAddressInput
    upsert?: AccountUpsertWithoutAddressInput
    connect?: AccountWhereUniqueInput
    update?: XOR<AccountUpdateWithoutAddressInput, AccountUncheckedUpdateWithoutAddressInput>
  }

  export type UserUpdateOneWithoutAddressNestedInput = {
    create?: XOR<UserCreateWithoutAddressInput, UserUncheckedCreateWithoutAddressInput>
    connectOrCreate?: UserCreateOrConnectWithoutAddressInput
    upsert?: UserUpsertWithoutAddressInput
    disconnect?: boolean
    delete?: boolean
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutAddressInput, UserUncheckedUpdateWithoutAddressInput>
  }

  export type VendorUpdateOneWithoutAddressNestedInput = {
    create?: XOR<VendorCreateWithoutAddressInput, VendorUncheckedCreateWithoutAddressInput>
    connectOrCreate?: VendorCreateOrConnectWithoutAddressInput
    upsert?: VendorUpsertWithoutAddressInput
    disconnect?: boolean
    delete?: boolean
    connect?: VendorWhereUniqueInput
    update?: XOR<VendorUpdateWithoutAddressInput, VendorUncheckedUpdateWithoutAddressInput>
  }

  export type ProjectUpdateManyWithoutAddressNestedInput = {
    create?: XOR<Enumerable<ProjectCreateWithoutAddressInput>, Enumerable<ProjectUncheckedCreateWithoutAddressInput>>
    connectOrCreate?: Enumerable<ProjectCreateOrConnectWithoutAddressInput>
    upsert?: Enumerable<ProjectUpsertWithWhereUniqueWithoutAddressInput>
    createMany?: ProjectCreateManyAddressInputEnvelope
    set?: Enumerable<ProjectWhereUniqueInput>
    disconnect?: Enumerable<ProjectWhereUniqueInput>
    delete?: Enumerable<ProjectWhereUniqueInput>
    connect?: Enumerable<ProjectWhereUniqueInput>
    update?: Enumerable<ProjectUpdateWithWhereUniqueWithoutAddressInput>
    updateMany?: Enumerable<ProjectUpdateManyWithWhereWithoutAddressInput>
    deleteMany?: Enumerable<ProjectScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ProjectUncheckedUpdateManyWithoutAddressNestedInput = {
    create?: XOR<Enumerable<ProjectCreateWithoutAddressInput>, Enumerable<ProjectUncheckedCreateWithoutAddressInput>>
    connectOrCreate?: Enumerable<ProjectCreateOrConnectWithoutAddressInput>
    upsert?: Enumerable<ProjectUpsertWithWhereUniqueWithoutAddressInput>
    createMany?: ProjectCreateManyAddressInputEnvelope
    set?: Enumerable<ProjectWhereUniqueInput>
    disconnect?: Enumerable<ProjectWhereUniqueInput>
    delete?: Enumerable<ProjectWhereUniqueInput>
    connect?: Enumerable<ProjectWhereUniqueInput>
    update?: Enumerable<ProjectUpdateWithWhereUniqueWithoutAddressInput>
    updateMany?: Enumerable<ProjectUpdateManyWithWhereWithoutAddressInput>
    deleteMany?: Enumerable<ProjectScalarWhereInput>
  }

  export type AddressCreateNestedManyWithoutAccountInput = {
    create?: XOR<Enumerable<AddressCreateWithoutAccountInput>, Enumerable<AddressUncheckedCreateWithoutAccountInput>>
    connectOrCreate?: Enumerable<AddressCreateOrConnectWithoutAccountInput>
    createMany?: AddressCreateManyAccountInputEnvelope
    connect?: Enumerable<AddressWhereUniqueInput>
  }

  export type InvoiceCreateNestedManyWithoutAccountInput = {
    create?: XOR<Enumerable<InvoiceCreateWithoutAccountInput>, Enumerable<InvoiceUncheckedCreateWithoutAccountInput>>
    connectOrCreate?: Enumerable<InvoiceCreateOrConnectWithoutAccountInput>
    createMany?: InvoiceCreateManyAccountInputEnvelope
    connect?: Enumerable<InvoiceWhereUniqueInput>
  }

  export type VendorCreateNestedManyWithoutAccountInput = {
    create?: XOR<Enumerable<VendorCreateWithoutAccountInput>, Enumerable<VendorUncheckedCreateWithoutAccountInput>>
    connectOrCreate?: Enumerable<VendorCreateOrConnectWithoutAccountInput>
    createMany?: VendorCreateManyAccountInputEnvelope
    connect?: Enumerable<VendorWhereUniqueInput>
  }

  export type UserCreateNestedManyWithoutAccountInput = {
    create?: XOR<Enumerable<UserCreateWithoutAccountInput>, Enumerable<UserUncheckedCreateWithoutAccountInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutAccountInput>
    createMany?: UserCreateManyAccountInputEnvelope
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type ProjectCreateNestedManyWithoutAccountInput = {
    create?: XOR<Enumerable<ProjectCreateWithoutAccountInput>, Enumerable<ProjectUncheckedCreateWithoutAccountInput>>
    connectOrCreate?: Enumerable<ProjectCreateOrConnectWithoutAccountInput>
    createMany?: ProjectCreateManyAccountInputEnvelope
    connect?: Enumerable<ProjectWhereUniqueInput>
  }

  export type AddressUncheckedCreateNestedManyWithoutAccountInput = {
    create?: XOR<Enumerable<AddressCreateWithoutAccountInput>, Enumerable<AddressUncheckedCreateWithoutAccountInput>>
    connectOrCreate?: Enumerable<AddressCreateOrConnectWithoutAccountInput>
    createMany?: AddressCreateManyAccountInputEnvelope
    connect?: Enumerable<AddressWhereUniqueInput>
  }

  export type InvoiceUncheckedCreateNestedManyWithoutAccountInput = {
    create?: XOR<Enumerable<InvoiceCreateWithoutAccountInput>, Enumerable<InvoiceUncheckedCreateWithoutAccountInput>>
    connectOrCreate?: Enumerable<InvoiceCreateOrConnectWithoutAccountInput>
    createMany?: InvoiceCreateManyAccountInputEnvelope
    connect?: Enumerable<InvoiceWhereUniqueInput>
  }

  export type VendorUncheckedCreateNestedManyWithoutAccountInput = {
    create?: XOR<Enumerable<VendorCreateWithoutAccountInput>, Enumerable<VendorUncheckedCreateWithoutAccountInput>>
    connectOrCreate?: Enumerable<VendorCreateOrConnectWithoutAccountInput>
    createMany?: VendorCreateManyAccountInputEnvelope
    connect?: Enumerable<VendorWhereUniqueInput>
  }

  export type UserUncheckedCreateNestedManyWithoutAccountInput = {
    create?: XOR<Enumerable<UserCreateWithoutAccountInput>, Enumerable<UserUncheckedCreateWithoutAccountInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutAccountInput>
    createMany?: UserCreateManyAccountInputEnvelope
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type ProjectUncheckedCreateNestedManyWithoutAccountInput = {
    create?: XOR<Enumerable<ProjectCreateWithoutAccountInput>, Enumerable<ProjectUncheckedCreateWithoutAccountInput>>
    connectOrCreate?: Enumerable<ProjectCreateOrConnectWithoutAccountInput>
    createMany?: ProjectCreateManyAccountInputEnvelope
    connect?: Enumerable<ProjectWhereUniqueInput>
  }

  export type EnumAccountStatusFieldUpdateOperationsInput = {
    set?: AccountStatus
  }

  export type AddressUpdateManyWithoutAccountNestedInput = {
    create?: XOR<Enumerable<AddressCreateWithoutAccountInput>, Enumerable<AddressUncheckedCreateWithoutAccountInput>>
    connectOrCreate?: Enumerable<AddressCreateOrConnectWithoutAccountInput>
    upsert?: Enumerable<AddressUpsertWithWhereUniqueWithoutAccountInput>
    createMany?: AddressCreateManyAccountInputEnvelope
    set?: Enumerable<AddressWhereUniqueInput>
    disconnect?: Enumerable<AddressWhereUniqueInput>
    delete?: Enumerable<AddressWhereUniqueInput>
    connect?: Enumerable<AddressWhereUniqueInput>
    update?: Enumerable<AddressUpdateWithWhereUniqueWithoutAccountInput>
    updateMany?: Enumerable<AddressUpdateManyWithWhereWithoutAccountInput>
    deleteMany?: Enumerable<AddressScalarWhereInput>
  }

  export type InvoiceUpdateManyWithoutAccountNestedInput = {
    create?: XOR<Enumerable<InvoiceCreateWithoutAccountInput>, Enumerable<InvoiceUncheckedCreateWithoutAccountInput>>
    connectOrCreate?: Enumerable<InvoiceCreateOrConnectWithoutAccountInput>
    upsert?: Enumerable<InvoiceUpsertWithWhereUniqueWithoutAccountInput>
    createMany?: InvoiceCreateManyAccountInputEnvelope
    set?: Enumerable<InvoiceWhereUniqueInput>
    disconnect?: Enumerable<InvoiceWhereUniqueInput>
    delete?: Enumerable<InvoiceWhereUniqueInput>
    connect?: Enumerable<InvoiceWhereUniqueInput>
    update?: Enumerable<InvoiceUpdateWithWhereUniqueWithoutAccountInput>
    updateMany?: Enumerable<InvoiceUpdateManyWithWhereWithoutAccountInput>
    deleteMany?: Enumerable<InvoiceScalarWhereInput>
  }

  export type VendorUpdateManyWithoutAccountNestedInput = {
    create?: XOR<Enumerable<VendorCreateWithoutAccountInput>, Enumerable<VendorUncheckedCreateWithoutAccountInput>>
    connectOrCreate?: Enumerable<VendorCreateOrConnectWithoutAccountInput>
    upsert?: Enumerable<VendorUpsertWithWhereUniqueWithoutAccountInput>
    createMany?: VendorCreateManyAccountInputEnvelope
    set?: Enumerable<VendorWhereUniqueInput>
    disconnect?: Enumerable<VendorWhereUniqueInput>
    delete?: Enumerable<VendorWhereUniqueInput>
    connect?: Enumerable<VendorWhereUniqueInput>
    update?: Enumerable<VendorUpdateWithWhereUniqueWithoutAccountInput>
    updateMany?: Enumerable<VendorUpdateManyWithWhereWithoutAccountInput>
    deleteMany?: Enumerable<VendorScalarWhereInput>
  }

  export type UserUpdateManyWithoutAccountNestedInput = {
    create?: XOR<Enumerable<UserCreateWithoutAccountInput>, Enumerable<UserUncheckedCreateWithoutAccountInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutAccountInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutAccountInput>
    createMany?: UserCreateManyAccountInputEnvelope
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    connect?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutAccountInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutAccountInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type ProjectUpdateManyWithoutAccountNestedInput = {
    create?: XOR<Enumerable<ProjectCreateWithoutAccountInput>, Enumerable<ProjectUncheckedCreateWithoutAccountInput>>
    connectOrCreate?: Enumerable<ProjectCreateOrConnectWithoutAccountInput>
    upsert?: Enumerable<ProjectUpsertWithWhereUniqueWithoutAccountInput>
    createMany?: ProjectCreateManyAccountInputEnvelope
    set?: Enumerable<ProjectWhereUniqueInput>
    disconnect?: Enumerable<ProjectWhereUniqueInput>
    delete?: Enumerable<ProjectWhereUniqueInput>
    connect?: Enumerable<ProjectWhereUniqueInput>
    update?: Enumerable<ProjectUpdateWithWhereUniqueWithoutAccountInput>
    updateMany?: Enumerable<ProjectUpdateManyWithWhereWithoutAccountInput>
    deleteMany?: Enumerable<ProjectScalarWhereInput>
  }

  export type AddressUncheckedUpdateManyWithoutAccountNestedInput = {
    create?: XOR<Enumerable<AddressCreateWithoutAccountInput>, Enumerable<AddressUncheckedCreateWithoutAccountInput>>
    connectOrCreate?: Enumerable<AddressCreateOrConnectWithoutAccountInput>
    upsert?: Enumerable<AddressUpsertWithWhereUniqueWithoutAccountInput>
    createMany?: AddressCreateManyAccountInputEnvelope
    set?: Enumerable<AddressWhereUniqueInput>
    disconnect?: Enumerable<AddressWhereUniqueInput>
    delete?: Enumerable<AddressWhereUniqueInput>
    connect?: Enumerable<AddressWhereUniqueInput>
    update?: Enumerable<AddressUpdateWithWhereUniqueWithoutAccountInput>
    updateMany?: Enumerable<AddressUpdateManyWithWhereWithoutAccountInput>
    deleteMany?: Enumerable<AddressScalarWhereInput>
  }

  export type InvoiceUncheckedUpdateManyWithoutAccountNestedInput = {
    create?: XOR<Enumerable<InvoiceCreateWithoutAccountInput>, Enumerable<InvoiceUncheckedCreateWithoutAccountInput>>
    connectOrCreate?: Enumerable<InvoiceCreateOrConnectWithoutAccountInput>
    upsert?: Enumerable<InvoiceUpsertWithWhereUniqueWithoutAccountInput>
    createMany?: InvoiceCreateManyAccountInputEnvelope
    set?: Enumerable<InvoiceWhereUniqueInput>
    disconnect?: Enumerable<InvoiceWhereUniqueInput>
    delete?: Enumerable<InvoiceWhereUniqueInput>
    connect?: Enumerable<InvoiceWhereUniqueInput>
    update?: Enumerable<InvoiceUpdateWithWhereUniqueWithoutAccountInput>
    updateMany?: Enumerable<InvoiceUpdateManyWithWhereWithoutAccountInput>
    deleteMany?: Enumerable<InvoiceScalarWhereInput>
  }

  export type VendorUncheckedUpdateManyWithoutAccountNestedInput = {
    create?: XOR<Enumerable<VendorCreateWithoutAccountInput>, Enumerable<VendorUncheckedCreateWithoutAccountInput>>
    connectOrCreate?: Enumerable<VendorCreateOrConnectWithoutAccountInput>
    upsert?: Enumerable<VendorUpsertWithWhereUniqueWithoutAccountInput>
    createMany?: VendorCreateManyAccountInputEnvelope
    set?: Enumerable<VendorWhereUniqueInput>
    disconnect?: Enumerable<VendorWhereUniqueInput>
    delete?: Enumerable<VendorWhereUniqueInput>
    connect?: Enumerable<VendorWhereUniqueInput>
    update?: Enumerable<VendorUpdateWithWhereUniqueWithoutAccountInput>
    updateMany?: Enumerable<VendorUpdateManyWithWhereWithoutAccountInput>
    deleteMany?: Enumerable<VendorScalarWhereInput>
  }

  export type UserUncheckedUpdateManyWithoutAccountNestedInput = {
    create?: XOR<Enumerable<UserCreateWithoutAccountInput>, Enumerable<UserUncheckedCreateWithoutAccountInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutAccountInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutAccountInput>
    createMany?: UserCreateManyAccountInputEnvelope
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    connect?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutAccountInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutAccountInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type ProjectUncheckedUpdateManyWithoutAccountNestedInput = {
    create?: XOR<Enumerable<ProjectCreateWithoutAccountInput>, Enumerable<ProjectUncheckedCreateWithoutAccountInput>>
    connectOrCreate?: Enumerable<ProjectCreateOrConnectWithoutAccountInput>
    upsert?: Enumerable<ProjectUpsertWithWhereUniqueWithoutAccountInput>
    createMany?: ProjectCreateManyAccountInputEnvelope
    set?: Enumerable<ProjectWhereUniqueInput>
    disconnect?: Enumerable<ProjectWhereUniqueInput>
    delete?: Enumerable<ProjectWhereUniqueInput>
    connect?: Enumerable<ProjectWhereUniqueInput>
    update?: Enumerable<ProjectUpdateWithWhereUniqueWithoutAccountInput>
    updateMany?: Enumerable<ProjectUpdateManyWithWhereWithoutAccountInput>
    deleteMany?: Enumerable<ProjectScalarWhereInput>
  }

  export type AddressCreateNestedManyWithoutVendorInput = {
    create?: XOR<Enumerable<AddressCreateWithoutVendorInput>, Enumerable<AddressUncheckedCreateWithoutVendorInput>>
    connectOrCreate?: Enumerable<AddressCreateOrConnectWithoutVendorInput>
    createMany?: AddressCreateManyVendorInputEnvelope
    connect?: Enumerable<AddressWhereUniqueInput>
  }

  export type AccountCreateNestedOneWithoutVendorInput = {
    create?: XOR<AccountCreateWithoutVendorInput, AccountUncheckedCreateWithoutVendorInput>
    connectOrCreate?: AccountCreateOrConnectWithoutVendorInput
    connect?: AccountWhereUniqueInput
  }

  export type InvoiceCreateNestedManyWithoutVendorInput = {
    create?: XOR<Enumerable<InvoiceCreateWithoutVendorInput>, Enumerable<InvoiceUncheckedCreateWithoutVendorInput>>
    connectOrCreate?: Enumerable<InvoiceCreateOrConnectWithoutVendorInput>
    createMany?: InvoiceCreateManyVendorInputEnvelope
    connect?: Enumerable<InvoiceWhereUniqueInput>
  }

  export type UserCreateNestedManyWithoutVendorInput = {
    create?: XOR<Enumerable<UserCreateWithoutVendorInput>, Enumerable<UserUncheckedCreateWithoutVendorInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutVendorInput>
    createMany?: UserCreateManyVendorInputEnvelope
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type ProjectCreateNestedManyWithoutVendorInput = {
    create?: XOR<Enumerable<ProjectCreateWithoutVendorInput>, Enumerable<ProjectUncheckedCreateWithoutVendorInput>>
    connectOrCreate?: Enumerable<ProjectCreateOrConnectWithoutVendorInput>
    createMany?: ProjectCreateManyVendorInputEnvelope
    connect?: Enumerable<ProjectWhereUniqueInput>
  }

  export type AddressUncheckedCreateNestedManyWithoutVendorInput = {
    create?: XOR<Enumerable<AddressCreateWithoutVendorInput>, Enumerable<AddressUncheckedCreateWithoutVendorInput>>
    connectOrCreate?: Enumerable<AddressCreateOrConnectWithoutVendorInput>
    createMany?: AddressCreateManyVendorInputEnvelope
    connect?: Enumerable<AddressWhereUniqueInput>
  }

  export type InvoiceUncheckedCreateNestedManyWithoutVendorInput = {
    create?: XOR<Enumerable<InvoiceCreateWithoutVendorInput>, Enumerable<InvoiceUncheckedCreateWithoutVendorInput>>
    connectOrCreate?: Enumerable<InvoiceCreateOrConnectWithoutVendorInput>
    createMany?: InvoiceCreateManyVendorInputEnvelope
    connect?: Enumerable<InvoiceWhereUniqueInput>
  }

  export type UserUncheckedCreateNestedManyWithoutVendorInput = {
    create?: XOR<Enumerable<UserCreateWithoutVendorInput>, Enumerable<UserUncheckedCreateWithoutVendorInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutVendorInput>
    createMany?: UserCreateManyVendorInputEnvelope
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type ProjectUncheckedCreateNestedManyWithoutVendorInput = {
    create?: XOR<Enumerable<ProjectCreateWithoutVendorInput>, Enumerable<ProjectUncheckedCreateWithoutVendorInput>>
    connectOrCreate?: Enumerable<ProjectCreateOrConnectWithoutVendorInput>
    createMany?: ProjectCreateManyVendorInputEnvelope
    connect?: Enumerable<ProjectWhereUniqueInput>
  }

  export type EnumVendorTypeFieldUpdateOperationsInput = {
    set?: VendorType
  }

  export type AddressUpdateManyWithoutVendorNestedInput = {
    create?: XOR<Enumerable<AddressCreateWithoutVendorInput>, Enumerable<AddressUncheckedCreateWithoutVendorInput>>
    connectOrCreate?: Enumerable<AddressCreateOrConnectWithoutVendorInput>
    upsert?: Enumerable<AddressUpsertWithWhereUniqueWithoutVendorInput>
    createMany?: AddressCreateManyVendorInputEnvelope
    set?: Enumerable<AddressWhereUniqueInput>
    disconnect?: Enumerable<AddressWhereUniqueInput>
    delete?: Enumerable<AddressWhereUniqueInput>
    connect?: Enumerable<AddressWhereUniqueInput>
    update?: Enumerable<AddressUpdateWithWhereUniqueWithoutVendorInput>
    updateMany?: Enumerable<AddressUpdateManyWithWhereWithoutVendorInput>
    deleteMany?: Enumerable<AddressScalarWhereInput>
  }

  export type AccountUpdateOneWithoutVendorNestedInput = {
    create?: XOR<AccountCreateWithoutVendorInput, AccountUncheckedCreateWithoutVendorInput>
    connectOrCreate?: AccountCreateOrConnectWithoutVendorInput
    upsert?: AccountUpsertWithoutVendorInput
    disconnect?: boolean
    delete?: boolean
    connect?: AccountWhereUniqueInput
    update?: XOR<AccountUpdateWithoutVendorInput, AccountUncheckedUpdateWithoutVendorInput>
  }

  export type EnumVendorStatusFieldUpdateOperationsInput = {
    set?: VendorStatus
  }

  export type InvoiceUpdateManyWithoutVendorNestedInput = {
    create?: XOR<Enumerable<InvoiceCreateWithoutVendorInput>, Enumerable<InvoiceUncheckedCreateWithoutVendorInput>>
    connectOrCreate?: Enumerable<InvoiceCreateOrConnectWithoutVendorInput>
    upsert?: Enumerable<InvoiceUpsertWithWhereUniqueWithoutVendorInput>
    createMany?: InvoiceCreateManyVendorInputEnvelope
    set?: Enumerable<InvoiceWhereUniqueInput>
    disconnect?: Enumerable<InvoiceWhereUniqueInput>
    delete?: Enumerable<InvoiceWhereUniqueInput>
    connect?: Enumerable<InvoiceWhereUniqueInput>
    update?: Enumerable<InvoiceUpdateWithWhereUniqueWithoutVendorInput>
    updateMany?: Enumerable<InvoiceUpdateManyWithWhereWithoutVendorInput>
    deleteMany?: Enumerable<InvoiceScalarWhereInput>
  }

  export type UserUpdateManyWithoutVendorNestedInput = {
    create?: XOR<Enumerable<UserCreateWithoutVendorInput>, Enumerable<UserUncheckedCreateWithoutVendorInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutVendorInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutVendorInput>
    createMany?: UserCreateManyVendorInputEnvelope
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    connect?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutVendorInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutVendorInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type ProjectUpdateManyWithoutVendorNestedInput = {
    create?: XOR<Enumerable<ProjectCreateWithoutVendorInput>, Enumerable<ProjectUncheckedCreateWithoutVendorInput>>
    connectOrCreate?: Enumerable<ProjectCreateOrConnectWithoutVendorInput>
    upsert?: Enumerable<ProjectUpsertWithWhereUniqueWithoutVendorInput>
    createMany?: ProjectCreateManyVendorInputEnvelope
    set?: Enumerable<ProjectWhereUniqueInput>
    disconnect?: Enumerable<ProjectWhereUniqueInput>
    delete?: Enumerable<ProjectWhereUniqueInput>
    connect?: Enumerable<ProjectWhereUniqueInput>
    update?: Enumerable<ProjectUpdateWithWhereUniqueWithoutVendorInput>
    updateMany?: Enumerable<ProjectUpdateManyWithWhereWithoutVendorInput>
    deleteMany?: Enumerable<ProjectScalarWhereInput>
  }

  export type AddressUncheckedUpdateManyWithoutVendorNestedInput = {
    create?: XOR<Enumerable<AddressCreateWithoutVendorInput>, Enumerable<AddressUncheckedCreateWithoutVendorInput>>
    connectOrCreate?: Enumerable<AddressCreateOrConnectWithoutVendorInput>
    upsert?: Enumerable<AddressUpsertWithWhereUniqueWithoutVendorInput>
    createMany?: AddressCreateManyVendorInputEnvelope
    set?: Enumerable<AddressWhereUniqueInput>
    disconnect?: Enumerable<AddressWhereUniqueInput>
    delete?: Enumerable<AddressWhereUniqueInput>
    connect?: Enumerable<AddressWhereUniqueInput>
    update?: Enumerable<AddressUpdateWithWhereUniqueWithoutVendorInput>
    updateMany?: Enumerable<AddressUpdateManyWithWhereWithoutVendorInput>
    deleteMany?: Enumerable<AddressScalarWhereInput>
  }

  export type InvoiceUncheckedUpdateManyWithoutVendorNestedInput = {
    create?: XOR<Enumerable<InvoiceCreateWithoutVendorInput>, Enumerable<InvoiceUncheckedCreateWithoutVendorInput>>
    connectOrCreate?: Enumerable<InvoiceCreateOrConnectWithoutVendorInput>
    upsert?: Enumerable<InvoiceUpsertWithWhereUniqueWithoutVendorInput>
    createMany?: InvoiceCreateManyVendorInputEnvelope
    set?: Enumerable<InvoiceWhereUniqueInput>
    disconnect?: Enumerable<InvoiceWhereUniqueInput>
    delete?: Enumerable<InvoiceWhereUniqueInput>
    connect?: Enumerable<InvoiceWhereUniqueInput>
    update?: Enumerable<InvoiceUpdateWithWhereUniqueWithoutVendorInput>
    updateMany?: Enumerable<InvoiceUpdateManyWithWhereWithoutVendorInput>
    deleteMany?: Enumerable<InvoiceScalarWhereInput>
  }

  export type UserUncheckedUpdateManyWithoutVendorNestedInput = {
    create?: XOR<Enumerable<UserCreateWithoutVendorInput>, Enumerable<UserUncheckedCreateWithoutVendorInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutVendorInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutVendorInput>
    createMany?: UserCreateManyVendorInputEnvelope
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    connect?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutVendorInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutVendorInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type ProjectUncheckedUpdateManyWithoutVendorNestedInput = {
    create?: XOR<Enumerable<ProjectCreateWithoutVendorInput>, Enumerable<ProjectUncheckedCreateWithoutVendorInput>>
    connectOrCreate?: Enumerable<ProjectCreateOrConnectWithoutVendorInput>
    upsert?: Enumerable<ProjectUpsertWithWhereUniqueWithoutVendorInput>
    createMany?: ProjectCreateManyVendorInputEnvelope
    set?: Enumerable<ProjectWhereUniqueInput>
    disconnect?: Enumerable<ProjectWhereUniqueInput>
    delete?: Enumerable<ProjectWhereUniqueInput>
    connect?: Enumerable<ProjectWhereUniqueInput>
    update?: Enumerable<ProjectUpdateWithWhereUniqueWithoutVendorInput>
    updateMany?: Enumerable<ProjectUpdateManyWithWhereWithoutVendorInput>
    deleteMany?: Enumerable<ProjectScalarWhereInput>
  }

  export type ProjectCreateNestedOneWithoutProjectResourceInput = {
    create?: XOR<ProjectCreateWithoutProjectResourceInput, ProjectUncheckedCreateWithoutProjectResourceInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutProjectResourceInput
    connect?: ProjectWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutProjectResourceInput = {
    create?: XOR<UserCreateWithoutProjectResourceInput, UserUncheckedCreateWithoutProjectResourceInput>
    connectOrCreate?: UserCreateOrConnectWithoutProjectResourceInput
    connect?: UserWhereUniqueInput
  }

  export type ProjectUpdateOneWithoutProjectResourceNestedInput = {
    create?: XOR<ProjectCreateWithoutProjectResourceInput, ProjectUncheckedCreateWithoutProjectResourceInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutProjectResourceInput
    upsert?: ProjectUpsertWithoutProjectResourceInput
    disconnect?: boolean
    delete?: boolean
    connect?: ProjectWhereUniqueInput
    update?: XOR<ProjectUpdateWithoutProjectResourceInput, ProjectUncheckedUpdateWithoutProjectResourceInput>
  }

  export type UserUpdateOneWithoutProjectResourceNestedInput = {
    create?: XOR<UserCreateWithoutProjectResourceInput, UserUncheckedCreateWithoutProjectResourceInput>
    connectOrCreate?: UserCreateOrConnectWithoutProjectResourceInput
    upsert?: UserUpsertWithoutProjectResourceInput
    disconnect?: boolean
    delete?: boolean
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutProjectResourceInput, UserUncheckedUpdateWithoutProjectResourceInput>
  }

  export type NullableDecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string | null
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type NullableEnumCurrencyFieldUpdateOperationsInput = {
    set?: Currency | null
  }

  export type NullableEnumUnitOfMeasureFieldUpdateOperationsInput = {
    set?: UnitOfMeasure | null
  }

  export type VendorCreateNestedOneWithoutInvoiceInput = {
    create?: XOR<VendorCreateWithoutInvoiceInput, VendorUncheckedCreateWithoutInvoiceInput>
    connectOrCreate?: VendorCreateOrConnectWithoutInvoiceInput
    connect?: VendorWhereUniqueInput
  }

  export type AccountCreateNestedOneWithoutInvoiceInput = {
    create?: XOR<AccountCreateWithoutInvoiceInput, AccountUncheckedCreateWithoutInvoiceInput>
    connectOrCreate?: AccountCreateOrConnectWithoutInvoiceInput
    connect?: AccountWhereUniqueInput
  }

  export type ProjectCreateNestedOneWithoutInvoiceInput = {
    create?: XOR<ProjectCreateWithoutInvoiceInput, ProjectUncheckedCreateWithoutInvoiceInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutInvoiceInput
    connect?: ProjectWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutInvoiceInput = {
    create?: XOR<UserCreateWithoutInvoiceInput, UserUncheckedCreateWithoutInvoiceInput>
    connectOrCreate?: UserCreateOrConnectWithoutInvoiceInput
    connect?: UserWhereUniqueInput
  }

  export type EnumInvoiceTypeFieldUpdateOperationsInput = {
    set?: InvoiceType
  }

  export type VendorUpdateOneWithoutInvoiceNestedInput = {
    create?: XOR<VendorCreateWithoutInvoiceInput, VendorUncheckedCreateWithoutInvoiceInput>
    connectOrCreate?: VendorCreateOrConnectWithoutInvoiceInput
    upsert?: VendorUpsertWithoutInvoiceInput
    disconnect?: boolean
    delete?: boolean
    connect?: VendorWhereUniqueInput
    update?: XOR<VendorUpdateWithoutInvoiceInput, VendorUncheckedUpdateWithoutInvoiceInput>
  }

  export type AccountUpdateOneWithoutInvoiceNestedInput = {
    create?: XOR<AccountCreateWithoutInvoiceInput, AccountUncheckedCreateWithoutInvoiceInput>
    connectOrCreate?: AccountCreateOrConnectWithoutInvoiceInput
    upsert?: AccountUpsertWithoutInvoiceInput
    disconnect?: boolean
    delete?: boolean
    connect?: AccountWhereUniqueInput
    update?: XOR<AccountUpdateWithoutInvoiceInput, AccountUncheckedUpdateWithoutInvoiceInput>
  }

  export type ProjectUpdateOneWithoutInvoiceNestedInput = {
    create?: XOR<ProjectCreateWithoutInvoiceInput, ProjectUncheckedCreateWithoutInvoiceInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutInvoiceInput
    upsert?: ProjectUpsertWithoutInvoiceInput
    disconnect?: boolean
    delete?: boolean
    connect?: ProjectWhereUniqueInput
    update?: XOR<ProjectUpdateWithoutInvoiceInput, ProjectUncheckedUpdateWithoutInvoiceInput>
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type EnumInvoiceStatusFieldUpdateOperationsInput = {
    set?: InvoiceStatus
  }

  export type EnumPaymentTermsFieldUpdateOperationsInput = {
    set?: PaymentTerms
  }

  export type UserUpdateOneWithoutInvoiceNestedInput = {
    create?: XOR<UserCreateWithoutInvoiceInput, UserUncheckedCreateWithoutInvoiceInput>
    connectOrCreate?: UserCreateOrConnectWithoutInvoiceInput
    upsert?: UserUpsertWithoutInvoiceInput
    disconnect?: boolean
    delete?: boolean
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutInvoiceInput, UserUncheckedUpdateWithoutInvoiceInput>
  }

  export type UserCreateNestedOneWithoutInvoiceItemInput = {
    create?: XOR<UserCreateWithoutInvoiceItemInput, UserUncheckedCreateWithoutInvoiceItemInput>
    connectOrCreate?: UserCreateOrConnectWithoutInvoiceItemInput
    connect?: UserWhereUniqueInput
  }

  export type EnumInvoiceItemTypeFieldUpdateOperationsInput = {
    set?: InvoiceItemType
  }

  export type EnumCurrencyFieldUpdateOperationsInput = {
    set?: Currency
  }

  export type EnumUnitOfMeasureFieldUpdateOperationsInput = {
    set?: UnitOfMeasure
  }

  export type UserUpdateOneWithoutInvoiceItemNestedInput = {
    create?: XOR<UserCreateWithoutInvoiceItemInput, UserUncheckedCreateWithoutInvoiceItemInput>
    connectOrCreate?: UserCreateOrConnectWithoutInvoiceItemInput
    upsert?: UserUpsertWithoutInvoiceItemInput
    disconnect?: boolean
    delete?: boolean
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutInvoiceItemInput, UserUncheckedUpdateWithoutInvoiceItemInput>
  }

  export type AddressCreateNestedOneWithoutProjectInput = {
    create?: XOR<AddressCreateWithoutProjectInput, AddressUncheckedCreateWithoutProjectInput>
    connectOrCreate?: AddressCreateOrConnectWithoutProjectInput
    connect?: AddressWhereUniqueInput
  }

  export type VendorCreateNestedOneWithoutProjectInput = {
    create?: XOR<VendorCreateWithoutProjectInput, VendorUncheckedCreateWithoutProjectInput>
    connectOrCreate?: VendorCreateOrConnectWithoutProjectInput
    connect?: VendorWhereUniqueInput
  }

  export type AccountCreateNestedOneWithoutProjectInput = {
    create?: XOR<AccountCreateWithoutProjectInput, AccountUncheckedCreateWithoutProjectInput>
    connectOrCreate?: AccountCreateOrConnectWithoutProjectInput
    connect?: AccountWhereUniqueInput
  }

  export type InvoiceCreateNestedManyWithoutProjectInput = {
    create?: XOR<Enumerable<InvoiceCreateWithoutProjectInput>, Enumerable<InvoiceUncheckedCreateWithoutProjectInput>>
    connectOrCreate?: Enumerable<InvoiceCreateOrConnectWithoutProjectInput>
    createMany?: InvoiceCreateManyProjectInputEnvelope
    connect?: Enumerable<InvoiceWhereUniqueInput>
  }

  export type ProjectResourceCreateNestedManyWithoutProjectInput = {
    create?: XOR<Enumerable<ProjectResourceCreateWithoutProjectInput>, Enumerable<ProjectResourceUncheckedCreateWithoutProjectInput>>
    connectOrCreate?: Enumerable<ProjectResourceCreateOrConnectWithoutProjectInput>
    createMany?: ProjectResourceCreateManyProjectInputEnvelope
    connect?: Enumerable<ProjectResourceWhereUniqueInput>
  }

  export type InvoiceUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<Enumerable<InvoiceCreateWithoutProjectInput>, Enumerable<InvoiceUncheckedCreateWithoutProjectInput>>
    connectOrCreate?: Enumerable<InvoiceCreateOrConnectWithoutProjectInput>
    createMany?: InvoiceCreateManyProjectInputEnvelope
    connect?: Enumerable<InvoiceWhereUniqueInput>
  }

  export type ProjectResourceUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<Enumerable<ProjectResourceCreateWithoutProjectInput>, Enumerable<ProjectResourceUncheckedCreateWithoutProjectInput>>
    connectOrCreate?: Enumerable<ProjectResourceCreateOrConnectWithoutProjectInput>
    createMany?: ProjectResourceCreateManyProjectInputEnvelope
    connect?: Enumerable<ProjectResourceWhereUniqueInput>
  }

  export type EnumInvoiceCycleFieldUpdateOperationsInput = {
    set?: InvoiceCycle
  }

  export type AddressUpdateOneWithoutProjectNestedInput = {
    create?: XOR<AddressCreateWithoutProjectInput, AddressUncheckedCreateWithoutProjectInput>
    connectOrCreate?: AddressCreateOrConnectWithoutProjectInput
    upsert?: AddressUpsertWithoutProjectInput
    disconnect?: boolean
    delete?: boolean
    connect?: AddressWhereUniqueInput
    update?: XOR<AddressUpdateWithoutProjectInput, AddressUncheckedUpdateWithoutProjectInput>
  }

  export type VendorUpdateOneWithoutProjectNestedInput = {
    create?: XOR<VendorCreateWithoutProjectInput, VendorUncheckedCreateWithoutProjectInput>
    connectOrCreate?: VendorCreateOrConnectWithoutProjectInput
    upsert?: VendorUpsertWithoutProjectInput
    disconnect?: boolean
    delete?: boolean
    connect?: VendorWhereUniqueInput
    update?: XOR<VendorUpdateWithoutProjectInput, VendorUncheckedUpdateWithoutProjectInput>
  }

  export type AccountUpdateOneWithoutProjectNestedInput = {
    create?: XOR<AccountCreateWithoutProjectInput, AccountUncheckedCreateWithoutProjectInput>
    connectOrCreate?: AccountCreateOrConnectWithoutProjectInput
    upsert?: AccountUpsertWithoutProjectInput
    disconnect?: boolean
    delete?: boolean
    connect?: AccountWhereUniqueInput
    update?: XOR<AccountUpdateWithoutProjectInput, AccountUncheckedUpdateWithoutProjectInput>
  }

  export type EnumProjectStatusFieldUpdateOperationsInput = {
    set?: ProjectStatus
  }

  export type InvoiceUpdateManyWithoutProjectNestedInput = {
    create?: XOR<Enumerable<InvoiceCreateWithoutProjectInput>, Enumerable<InvoiceUncheckedCreateWithoutProjectInput>>
    connectOrCreate?: Enumerable<InvoiceCreateOrConnectWithoutProjectInput>
    upsert?: Enumerable<InvoiceUpsertWithWhereUniqueWithoutProjectInput>
    createMany?: InvoiceCreateManyProjectInputEnvelope
    set?: Enumerable<InvoiceWhereUniqueInput>
    disconnect?: Enumerable<InvoiceWhereUniqueInput>
    delete?: Enumerable<InvoiceWhereUniqueInput>
    connect?: Enumerable<InvoiceWhereUniqueInput>
    update?: Enumerable<InvoiceUpdateWithWhereUniqueWithoutProjectInput>
    updateMany?: Enumerable<InvoiceUpdateManyWithWhereWithoutProjectInput>
    deleteMany?: Enumerable<InvoiceScalarWhereInput>
  }

  export type ProjectResourceUpdateManyWithoutProjectNestedInput = {
    create?: XOR<Enumerable<ProjectResourceCreateWithoutProjectInput>, Enumerable<ProjectResourceUncheckedCreateWithoutProjectInput>>
    connectOrCreate?: Enumerable<ProjectResourceCreateOrConnectWithoutProjectInput>
    upsert?: Enumerable<ProjectResourceUpsertWithWhereUniqueWithoutProjectInput>
    createMany?: ProjectResourceCreateManyProjectInputEnvelope
    set?: Enumerable<ProjectResourceWhereUniqueInput>
    disconnect?: Enumerable<ProjectResourceWhereUniqueInput>
    delete?: Enumerable<ProjectResourceWhereUniqueInput>
    connect?: Enumerable<ProjectResourceWhereUniqueInput>
    update?: Enumerable<ProjectResourceUpdateWithWhereUniqueWithoutProjectInput>
    updateMany?: Enumerable<ProjectResourceUpdateManyWithWhereWithoutProjectInput>
    deleteMany?: Enumerable<ProjectResourceScalarWhereInput>
  }

  export type InvoiceUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<Enumerable<InvoiceCreateWithoutProjectInput>, Enumerable<InvoiceUncheckedCreateWithoutProjectInput>>
    connectOrCreate?: Enumerable<InvoiceCreateOrConnectWithoutProjectInput>
    upsert?: Enumerable<InvoiceUpsertWithWhereUniqueWithoutProjectInput>
    createMany?: InvoiceCreateManyProjectInputEnvelope
    set?: Enumerable<InvoiceWhereUniqueInput>
    disconnect?: Enumerable<InvoiceWhereUniqueInput>
    delete?: Enumerable<InvoiceWhereUniqueInput>
    connect?: Enumerable<InvoiceWhereUniqueInput>
    update?: Enumerable<InvoiceUpdateWithWhereUniqueWithoutProjectInput>
    updateMany?: Enumerable<InvoiceUpdateManyWithWhereWithoutProjectInput>
    deleteMany?: Enumerable<InvoiceScalarWhereInput>
  }

  export type ProjectResourceUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<Enumerable<ProjectResourceCreateWithoutProjectInput>, Enumerable<ProjectResourceUncheckedCreateWithoutProjectInput>>
    connectOrCreate?: Enumerable<ProjectResourceCreateOrConnectWithoutProjectInput>
    upsert?: Enumerable<ProjectResourceUpsertWithWhereUniqueWithoutProjectInput>
    createMany?: ProjectResourceCreateManyProjectInputEnvelope
    set?: Enumerable<ProjectResourceWhereUniqueInput>
    disconnect?: Enumerable<ProjectResourceWhereUniqueInput>
    delete?: Enumerable<ProjectResourceWhereUniqueInput>
    connect?: Enumerable<ProjectResourceWhereUniqueInput>
    update?: Enumerable<ProjectResourceUpdateWithWhereUniqueWithoutProjectInput>
    updateMany?: Enumerable<ProjectResourceUpdateManyWithWhereWithoutProjectInput>
    deleteMany?: Enumerable<ProjectResourceScalarWhereInput>
  }

  export type AccountCreateNestedOneWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput
    connect?: AccountWhereUniqueInput
  }

  export type VendorCreateNestedOneWithoutUserInput = {
    create?: XOR<VendorCreateWithoutUserInput, VendorUncheckedCreateWithoutUserInput>
    connectOrCreate?: VendorCreateOrConnectWithoutUserInput
    connect?: VendorWhereUniqueInput
  }

  export type AddressCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<AddressCreateWithoutUserInput>, Enumerable<AddressUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<AddressCreateOrConnectWithoutUserInput>
    createMany?: AddressCreateManyUserInputEnvelope
    connect?: Enumerable<AddressWhereUniqueInput>
  }

  export type UserAttributesCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<UserAttributesCreateWithoutUserInput>, Enumerable<UserAttributesUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UserAttributesCreateOrConnectWithoutUserInput>
    createMany?: UserAttributesCreateManyUserInputEnvelope
    connect?: Enumerable<UserAttributesWhereUniqueInput>
  }

  export type InvoiceCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<InvoiceCreateWithoutUserInput>, Enumerable<InvoiceUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<InvoiceCreateOrConnectWithoutUserInput>
    createMany?: InvoiceCreateManyUserInputEnvelope
    connect?: Enumerable<InvoiceWhereUniqueInput>
  }

  export type InvoiceItemCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<InvoiceItemCreateWithoutUserInput>, Enumerable<InvoiceItemUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<InvoiceItemCreateOrConnectWithoutUserInput>
    createMany?: InvoiceItemCreateManyUserInputEnvelope
    connect?: Enumerable<InvoiceItemWhereUniqueInput>
  }

  export type ProjectResourceCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<ProjectResourceCreateWithoutUserInput>, Enumerable<ProjectResourceUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ProjectResourceCreateOrConnectWithoutUserInput>
    createMany?: ProjectResourceCreateManyUserInputEnvelope
    connect?: Enumerable<ProjectResourceWhereUniqueInput>
  }

  export type AddressUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<AddressCreateWithoutUserInput>, Enumerable<AddressUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<AddressCreateOrConnectWithoutUserInput>
    createMany?: AddressCreateManyUserInputEnvelope
    connect?: Enumerable<AddressWhereUniqueInput>
  }

  export type UserAttributesUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<UserAttributesCreateWithoutUserInput>, Enumerable<UserAttributesUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UserAttributesCreateOrConnectWithoutUserInput>
    createMany?: UserAttributesCreateManyUserInputEnvelope
    connect?: Enumerable<UserAttributesWhereUniqueInput>
  }

  export type InvoiceUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<InvoiceCreateWithoutUserInput>, Enumerable<InvoiceUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<InvoiceCreateOrConnectWithoutUserInput>
    createMany?: InvoiceCreateManyUserInputEnvelope
    connect?: Enumerable<InvoiceWhereUniqueInput>
  }

  export type InvoiceItemUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<InvoiceItemCreateWithoutUserInput>, Enumerable<InvoiceItemUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<InvoiceItemCreateOrConnectWithoutUserInput>
    createMany?: InvoiceItemCreateManyUserInputEnvelope
    connect?: Enumerable<InvoiceItemWhereUniqueInput>
  }

  export type ProjectResourceUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<ProjectResourceCreateWithoutUserInput>, Enumerable<ProjectResourceUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ProjectResourceCreateOrConnectWithoutUserInput>
    createMany?: ProjectResourceCreateManyUserInputEnvelope
    connect?: Enumerable<ProjectResourceWhereUniqueInput>
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: Role
  }

  export type AccountUpdateOneWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput
    upsert?: AccountUpsertWithoutUserInput
    disconnect?: boolean
    delete?: boolean
    connect?: AccountWhereUniqueInput
    update?: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
  }

  export type VendorUpdateOneWithoutUserNestedInput = {
    create?: XOR<VendorCreateWithoutUserInput, VendorUncheckedCreateWithoutUserInput>
    connectOrCreate?: VendorCreateOrConnectWithoutUserInput
    upsert?: VendorUpsertWithoutUserInput
    disconnect?: boolean
    delete?: boolean
    connect?: VendorWhereUniqueInput
    update?: XOR<VendorUpdateWithoutUserInput, VendorUncheckedUpdateWithoutUserInput>
  }

  export type AddressUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<AddressCreateWithoutUserInput>, Enumerable<AddressUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<AddressCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<AddressUpsertWithWhereUniqueWithoutUserInput>
    createMany?: AddressCreateManyUserInputEnvelope
    set?: Enumerable<AddressWhereUniqueInput>
    disconnect?: Enumerable<AddressWhereUniqueInput>
    delete?: Enumerable<AddressWhereUniqueInput>
    connect?: Enumerable<AddressWhereUniqueInput>
    update?: Enumerable<AddressUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<AddressUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<AddressScalarWhereInput>
  }

  export type UserAttributesUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<UserAttributesCreateWithoutUserInput>, Enumerable<UserAttributesUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UserAttributesCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<UserAttributesUpsertWithWhereUniqueWithoutUserInput>
    createMany?: UserAttributesCreateManyUserInputEnvelope
    set?: Enumerable<UserAttributesWhereUniqueInput>
    disconnect?: Enumerable<UserAttributesWhereUniqueInput>
    delete?: Enumerable<UserAttributesWhereUniqueInput>
    connect?: Enumerable<UserAttributesWhereUniqueInput>
    update?: Enumerable<UserAttributesUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<UserAttributesUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<UserAttributesScalarWhereInput>
  }

  export type EnumUserStatusFieldUpdateOperationsInput = {
    set?: UserStatus
  }

  export type InvoiceUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<InvoiceCreateWithoutUserInput>, Enumerable<InvoiceUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<InvoiceCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<InvoiceUpsertWithWhereUniqueWithoutUserInput>
    createMany?: InvoiceCreateManyUserInputEnvelope
    set?: Enumerable<InvoiceWhereUniqueInput>
    disconnect?: Enumerable<InvoiceWhereUniqueInput>
    delete?: Enumerable<InvoiceWhereUniqueInput>
    connect?: Enumerable<InvoiceWhereUniqueInput>
    update?: Enumerable<InvoiceUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<InvoiceUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<InvoiceScalarWhereInput>
  }

  export type InvoiceItemUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<InvoiceItemCreateWithoutUserInput>, Enumerable<InvoiceItemUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<InvoiceItemCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<InvoiceItemUpsertWithWhereUniqueWithoutUserInput>
    createMany?: InvoiceItemCreateManyUserInputEnvelope
    set?: Enumerable<InvoiceItemWhereUniqueInput>
    disconnect?: Enumerable<InvoiceItemWhereUniqueInput>
    delete?: Enumerable<InvoiceItemWhereUniqueInput>
    connect?: Enumerable<InvoiceItemWhereUniqueInput>
    update?: Enumerable<InvoiceItemUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<InvoiceItemUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<InvoiceItemScalarWhereInput>
  }

  export type ProjectResourceUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<ProjectResourceCreateWithoutUserInput>, Enumerable<ProjectResourceUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ProjectResourceCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<ProjectResourceUpsertWithWhereUniqueWithoutUserInput>
    createMany?: ProjectResourceCreateManyUserInputEnvelope
    set?: Enumerable<ProjectResourceWhereUniqueInput>
    disconnect?: Enumerable<ProjectResourceWhereUniqueInput>
    delete?: Enumerable<ProjectResourceWhereUniqueInput>
    connect?: Enumerable<ProjectResourceWhereUniqueInput>
    update?: Enumerable<ProjectResourceUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<ProjectResourceUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<ProjectResourceScalarWhereInput>
  }

  export type AddressUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<AddressCreateWithoutUserInput>, Enumerable<AddressUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<AddressCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<AddressUpsertWithWhereUniqueWithoutUserInput>
    createMany?: AddressCreateManyUserInputEnvelope
    set?: Enumerable<AddressWhereUniqueInput>
    disconnect?: Enumerable<AddressWhereUniqueInput>
    delete?: Enumerable<AddressWhereUniqueInput>
    connect?: Enumerable<AddressWhereUniqueInput>
    update?: Enumerable<AddressUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<AddressUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<AddressScalarWhereInput>
  }

  export type UserAttributesUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<UserAttributesCreateWithoutUserInput>, Enumerable<UserAttributesUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UserAttributesCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<UserAttributesUpsertWithWhereUniqueWithoutUserInput>
    createMany?: UserAttributesCreateManyUserInputEnvelope
    set?: Enumerable<UserAttributesWhereUniqueInput>
    disconnect?: Enumerable<UserAttributesWhereUniqueInput>
    delete?: Enumerable<UserAttributesWhereUniqueInput>
    connect?: Enumerable<UserAttributesWhereUniqueInput>
    update?: Enumerable<UserAttributesUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<UserAttributesUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<UserAttributesScalarWhereInput>
  }

  export type InvoiceUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<InvoiceCreateWithoutUserInput>, Enumerable<InvoiceUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<InvoiceCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<InvoiceUpsertWithWhereUniqueWithoutUserInput>
    createMany?: InvoiceCreateManyUserInputEnvelope
    set?: Enumerable<InvoiceWhereUniqueInput>
    disconnect?: Enumerable<InvoiceWhereUniqueInput>
    delete?: Enumerable<InvoiceWhereUniqueInput>
    connect?: Enumerable<InvoiceWhereUniqueInput>
    update?: Enumerable<InvoiceUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<InvoiceUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<InvoiceScalarWhereInput>
  }

  export type InvoiceItemUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<InvoiceItemCreateWithoutUserInput>, Enumerable<InvoiceItemUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<InvoiceItemCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<InvoiceItemUpsertWithWhereUniqueWithoutUserInput>
    createMany?: InvoiceItemCreateManyUserInputEnvelope
    set?: Enumerable<InvoiceItemWhereUniqueInput>
    disconnect?: Enumerable<InvoiceItemWhereUniqueInput>
    delete?: Enumerable<InvoiceItemWhereUniqueInput>
    connect?: Enumerable<InvoiceItemWhereUniqueInput>
    update?: Enumerable<InvoiceItemUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<InvoiceItemUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<InvoiceItemScalarWhereInput>
  }

  export type ProjectResourceUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<ProjectResourceCreateWithoutUserInput>, Enumerable<ProjectResourceUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ProjectResourceCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<ProjectResourceUpsertWithWhereUniqueWithoutUserInput>
    createMany?: ProjectResourceCreateManyUserInputEnvelope
    set?: Enumerable<ProjectResourceWhereUniqueInput>
    disconnect?: Enumerable<ProjectResourceWhereUniqueInput>
    delete?: Enumerable<ProjectResourceWhereUniqueInput>
    connect?: Enumerable<ProjectResourceWhereUniqueInput>
    update?: Enumerable<ProjectResourceUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<ProjectResourceUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<ProjectResourceScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutUserAttributesInput = {
    create?: XOR<UserCreateWithoutUserAttributesInput, UserUncheckedCreateWithoutUserAttributesInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserAttributesInput
    connect?: UserWhereUniqueInput
  }

  export type EnumUserAttributeKeysFieldUpdateOperationsInput = {
    set?: UserAttributeKeys
  }

  export type UserUpdateOneRequiredWithoutUserAttributesNestedInput = {
    create?: XOR<UserCreateWithoutUserAttributesInput, UserUncheckedCreateWithoutUserAttributesInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserAttributesInput
    upsert?: UserUpsertWithoutUserAttributesInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutUserAttributesInput, UserUncheckedUpdateWithoutUserAttributesInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedEnumAddressTypeFilter = {
    equals?: AddressType
    in?: Enumerable<AddressType>
    notIn?: Enumerable<AddressType>
    not?: NestedEnumAddressTypeFilter | AddressType
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedEnumAddressStatusFilter = {
    equals?: AddressStatus
    in?: Enumerable<AddressStatus>
    notIn?: Enumerable<AddressStatus>
    not?: NestedEnumAddressStatusFilter | AddressStatus
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedEnumAddressTypeWithAggregatesFilter = {
    equals?: AddressType
    in?: Enumerable<AddressType>
    notIn?: Enumerable<AddressType>
    not?: NestedEnumAddressTypeWithAggregatesFilter | AddressType
    _count?: NestedIntFilter
    _min?: NestedEnumAddressTypeFilter
    _max?: NestedEnumAddressTypeFilter
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedEnumAddressStatusWithAggregatesFilter = {
    equals?: AddressStatus
    in?: Enumerable<AddressStatus>
    notIn?: Enumerable<AddressStatus>
    not?: NestedEnumAddressStatusWithAggregatesFilter | AddressStatus
    _count?: NestedIntFilter
    _min?: NestedEnumAddressStatusFilter
    _max?: NestedEnumAddressStatusFilter
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedEnumAccountStatusFilter = {
    equals?: AccountStatus
    in?: Enumerable<AccountStatus>
    notIn?: Enumerable<AccountStatus>
    not?: NestedEnumAccountStatusFilter | AccountStatus
  }

  export type NestedEnumAccountStatusWithAggregatesFilter = {
    equals?: AccountStatus
    in?: Enumerable<AccountStatus>
    notIn?: Enumerable<AccountStatus>
    not?: NestedEnumAccountStatusWithAggregatesFilter | AccountStatus
    _count?: NestedIntFilter
    _min?: NestedEnumAccountStatusFilter
    _max?: NestedEnumAccountStatusFilter
  }

  export type NestedEnumVendorTypeFilter = {
    equals?: VendorType
    in?: Enumerable<VendorType>
    notIn?: Enumerable<VendorType>
    not?: NestedEnumVendorTypeFilter | VendorType
  }

  export type NestedEnumVendorStatusFilter = {
    equals?: VendorStatus
    in?: Enumerable<VendorStatus>
    notIn?: Enumerable<VendorStatus>
    not?: NestedEnumVendorStatusFilter | VendorStatus
  }

  export type NestedEnumVendorTypeWithAggregatesFilter = {
    equals?: VendorType
    in?: Enumerable<VendorType>
    notIn?: Enumerable<VendorType>
    not?: NestedEnumVendorTypeWithAggregatesFilter | VendorType
    _count?: NestedIntFilter
    _min?: NestedEnumVendorTypeFilter
    _max?: NestedEnumVendorTypeFilter
  }

  export type NestedEnumVendorStatusWithAggregatesFilter = {
    equals?: VendorStatus
    in?: Enumerable<VendorStatus>
    notIn?: Enumerable<VendorStatus>
    not?: NestedEnumVendorStatusWithAggregatesFilter | VendorStatus
    _count?: NestedIntFilter
    _min?: NestedEnumVendorStatusFilter
    _max?: NestedEnumVendorStatusFilter
  }

  export type NestedDecimalNullableFilter = {
    equals?: Decimal | DecimalJsLike | number | string | null
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | null
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | null
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalNullableFilter | Decimal | DecimalJsLike | number | string | null
  }

  export type NestedEnumCurrencyNullableFilter = {
    equals?: Currency | null
    in?: Enumerable<Currency> | null
    notIn?: Enumerable<Currency> | null
    not?: NestedEnumCurrencyNullableFilter | Currency | null
  }

  export type NestedEnumUnitOfMeasureNullableFilter = {
    equals?: UnitOfMeasure | null
    in?: Enumerable<UnitOfMeasure> | null
    notIn?: Enumerable<UnitOfMeasure> | null
    not?: NestedEnumUnitOfMeasureNullableFilter | UnitOfMeasure | null
  }

  export type NestedDecimalNullableWithAggregatesFilter = {
    equals?: Decimal | DecimalJsLike | number | string | null
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | null
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | null
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalNullableWithAggregatesFilter | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter
    _avg?: NestedDecimalNullableFilter
    _sum?: NestedDecimalNullableFilter
    _min?: NestedDecimalNullableFilter
    _max?: NestedDecimalNullableFilter
  }

  export type NestedEnumCurrencyNullableWithAggregatesFilter = {
    equals?: Currency | null
    in?: Enumerable<Currency> | null
    notIn?: Enumerable<Currency> | null
    not?: NestedEnumCurrencyNullableWithAggregatesFilter | Currency | null
    _count?: NestedIntNullableFilter
    _min?: NestedEnumCurrencyNullableFilter
    _max?: NestedEnumCurrencyNullableFilter
  }

  export type NestedEnumUnitOfMeasureNullableWithAggregatesFilter = {
    equals?: UnitOfMeasure | null
    in?: Enumerable<UnitOfMeasure> | null
    notIn?: Enumerable<UnitOfMeasure> | null
    not?: NestedEnumUnitOfMeasureNullableWithAggregatesFilter | UnitOfMeasure | null
    _count?: NestedIntNullableFilter
    _min?: NestedEnumUnitOfMeasureNullableFilter
    _max?: NestedEnumUnitOfMeasureNullableFilter
  }

  export type NestedEnumInvoiceTypeFilter = {
    equals?: InvoiceType
    in?: Enumerable<InvoiceType>
    notIn?: Enumerable<InvoiceType>
    not?: NestedEnumInvoiceTypeFilter | InvoiceType
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedDecimalFilter = {
    equals?: Decimal | DecimalJsLike | number | string
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string>
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string>
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalFilter | Decimal | DecimalJsLike | number | string
  }

  export type NestedEnumInvoiceStatusFilter = {
    equals?: InvoiceStatus
    in?: Enumerable<InvoiceStatus>
    notIn?: Enumerable<InvoiceStatus>
    not?: NestedEnumInvoiceStatusFilter | InvoiceStatus
  }

  export type NestedEnumPaymentTermsFilter = {
    equals?: PaymentTerms
    in?: Enumerable<PaymentTerms>
    notIn?: Enumerable<PaymentTerms>
    not?: NestedEnumPaymentTermsFilter | PaymentTerms
  }

  export type NestedEnumInvoiceTypeWithAggregatesFilter = {
    equals?: InvoiceType
    in?: Enumerable<InvoiceType>
    notIn?: Enumerable<InvoiceType>
    not?: NestedEnumInvoiceTypeWithAggregatesFilter | InvoiceType
    _count?: NestedIntFilter
    _min?: NestedEnumInvoiceTypeFilter
    _max?: NestedEnumInvoiceTypeFilter
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type NestedDecimalWithAggregatesFilter = {
    equals?: Decimal | DecimalJsLike | number | string
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string>
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string>
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter
    _avg?: NestedDecimalFilter
    _sum?: NestedDecimalFilter
    _min?: NestedDecimalFilter
    _max?: NestedDecimalFilter
  }

  export type NestedEnumInvoiceStatusWithAggregatesFilter = {
    equals?: InvoiceStatus
    in?: Enumerable<InvoiceStatus>
    notIn?: Enumerable<InvoiceStatus>
    not?: NestedEnumInvoiceStatusWithAggregatesFilter | InvoiceStatus
    _count?: NestedIntFilter
    _min?: NestedEnumInvoiceStatusFilter
    _max?: NestedEnumInvoiceStatusFilter
  }

  export type NestedEnumPaymentTermsWithAggregatesFilter = {
    equals?: PaymentTerms
    in?: Enumerable<PaymentTerms>
    notIn?: Enumerable<PaymentTerms>
    not?: NestedEnumPaymentTermsWithAggregatesFilter | PaymentTerms
    _count?: NestedIntFilter
    _min?: NestedEnumPaymentTermsFilter
    _max?: NestedEnumPaymentTermsFilter
  }

  export type NestedEnumInvoiceItemTypeFilter = {
    equals?: InvoiceItemType
    in?: Enumerable<InvoiceItemType>
    notIn?: Enumerable<InvoiceItemType>
    not?: NestedEnumInvoiceItemTypeFilter | InvoiceItemType
  }

  export type NestedEnumCurrencyFilter = {
    equals?: Currency
    in?: Enumerable<Currency>
    notIn?: Enumerable<Currency>
    not?: NestedEnumCurrencyFilter | Currency
  }

  export type NestedEnumUnitOfMeasureFilter = {
    equals?: UnitOfMeasure
    in?: Enumerable<UnitOfMeasure>
    notIn?: Enumerable<UnitOfMeasure>
    not?: NestedEnumUnitOfMeasureFilter | UnitOfMeasure
  }

  export type NestedEnumInvoiceItemTypeWithAggregatesFilter = {
    equals?: InvoiceItemType
    in?: Enumerable<InvoiceItemType>
    notIn?: Enumerable<InvoiceItemType>
    not?: NestedEnumInvoiceItemTypeWithAggregatesFilter | InvoiceItemType
    _count?: NestedIntFilter
    _min?: NestedEnumInvoiceItemTypeFilter
    _max?: NestedEnumInvoiceItemTypeFilter
  }

  export type NestedEnumCurrencyWithAggregatesFilter = {
    equals?: Currency
    in?: Enumerable<Currency>
    notIn?: Enumerable<Currency>
    not?: NestedEnumCurrencyWithAggregatesFilter | Currency
    _count?: NestedIntFilter
    _min?: NestedEnumCurrencyFilter
    _max?: NestedEnumCurrencyFilter
  }

  export type NestedEnumUnitOfMeasureWithAggregatesFilter = {
    equals?: UnitOfMeasure
    in?: Enumerable<UnitOfMeasure>
    notIn?: Enumerable<UnitOfMeasure>
    not?: NestedEnumUnitOfMeasureWithAggregatesFilter | UnitOfMeasure
    _count?: NestedIntFilter
    _min?: NestedEnumUnitOfMeasureFilter
    _max?: NestedEnumUnitOfMeasureFilter
  }

  export type NestedEnumInvoiceCycleFilter = {
    equals?: InvoiceCycle
    in?: Enumerable<InvoiceCycle>
    notIn?: Enumerable<InvoiceCycle>
    not?: NestedEnumInvoiceCycleFilter | InvoiceCycle
  }

  export type NestedEnumProjectStatusFilter = {
    equals?: ProjectStatus
    in?: Enumerable<ProjectStatus>
    notIn?: Enumerable<ProjectStatus>
    not?: NestedEnumProjectStatusFilter | ProjectStatus
  }

  export type NestedEnumInvoiceCycleWithAggregatesFilter = {
    equals?: InvoiceCycle
    in?: Enumerable<InvoiceCycle>
    notIn?: Enumerable<InvoiceCycle>
    not?: NestedEnumInvoiceCycleWithAggregatesFilter | InvoiceCycle
    _count?: NestedIntFilter
    _min?: NestedEnumInvoiceCycleFilter
    _max?: NestedEnumInvoiceCycleFilter
  }

  export type NestedEnumProjectStatusWithAggregatesFilter = {
    equals?: ProjectStatus
    in?: Enumerable<ProjectStatus>
    notIn?: Enumerable<ProjectStatus>
    not?: NestedEnumProjectStatusWithAggregatesFilter | ProjectStatus
    _count?: NestedIntFilter
    _min?: NestedEnumProjectStatusFilter
    _max?: NestedEnumProjectStatusFilter
  }

  export type NestedEnumRoleFilter = {
    equals?: Role
    in?: Enumerable<Role>
    notIn?: Enumerable<Role>
    not?: NestedEnumRoleFilter | Role
  }

  export type NestedEnumUserStatusFilter = {
    equals?: UserStatus
    in?: Enumerable<UserStatus>
    notIn?: Enumerable<UserStatus>
    not?: NestedEnumUserStatusFilter | UserStatus
  }

  export type NestedEnumRoleWithAggregatesFilter = {
    equals?: Role
    in?: Enumerable<Role>
    notIn?: Enumerable<Role>
    not?: NestedEnumRoleWithAggregatesFilter | Role
    _count?: NestedIntFilter
    _min?: NestedEnumRoleFilter
    _max?: NestedEnumRoleFilter
  }

  export type NestedEnumUserStatusWithAggregatesFilter = {
    equals?: UserStatus
    in?: Enumerable<UserStatus>
    notIn?: Enumerable<UserStatus>
    not?: NestedEnumUserStatusWithAggregatesFilter | UserStatus
    _count?: NestedIntFilter
    _min?: NestedEnumUserStatusFilter
    _max?: NestedEnumUserStatusFilter
  }

  export type NestedEnumUserAttributeKeysFilter = {
    equals?: UserAttributeKeys
    in?: Enumerable<UserAttributeKeys>
    notIn?: Enumerable<UserAttributeKeys>
    not?: NestedEnumUserAttributeKeysFilter | UserAttributeKeys
  }

  export type NestedEnumUserAttributeKeysWithAggregatesFilter = {
    equals?: UserAttributeKeys
    in?: Enumerable<UserAttributeKeys>
    notIn?: Enumerable<UserAttributeKeys>
    not?: NestedEnumUserAttributeKeysWithAggregatesFilter | UserAttributeKeys
    _count?: NestedIntFilter
    _min?: NestedEnumUserAttributeKeysFilter
    _max?: NestedEnumUserAttributeKeysFilter
  }

  export type AccountCreateWithoutAddressInput = {
    name: string
    description: string
    ein: string
    bankId?: number | null
    email: string
    phone?: string
    status: AccountStatus
    createdDate?: Date | string
    lastUpdateDate?: Date | string
    Invoice?: InvoiceCreateNestedManyWithoutAccountInput
    Vendor?: VendorCreateNestedManyWithoutAccountInput
    User?: UserCreateNestedManyWithoutAccountInput
    Project?: ProjectCreateNestedManyWithoutAccountInput
  }

  export type AccountUncheckedCreateWithoutAddressInput = {
    id?: number
    name: string
    description: string
    ein: string
    bankId?: number | null
    email: string
    phone?: string
    status: AccountStatus
    createdDate?: Date | string
    lastUpdateDate?: Date | string
    Invoice?: InvoiceUncheckedCreateNestedManyWithoutAccountInput
    Vendor?: VendorUncheckedCreateNestedManyWithoutAccountInput
    User?: UserUncheckedCreateNestedManyWithoutAccountInput
    Project?: ProjectUncheckedCreateNestedManyWithoutAccountInput
  }

  export type AccountCreateOrConnectWithoutAddressInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutAddressInput, AccountUncheckedCreateWithoutAddressInput>
  }

  export type UserCreateWithoutAddressInput = {
    firstName: string
    lastName: string
    role?: Role
    email: string
    phone?: string
    account?: AccountCreateNestedOneWithoutUserInput
    vendor?: VendorCreateNestedOneWithoutUserInput
    isTimeSheetEnabled?: boolean
    userAttributes?: UserAttributesCreateNestedManyWithoutUserInput
    status?: UserStatus
    password?: string
    createdDate?: Date | string
    lastUpdateDate?: Date | string
    Invoice?: InvoiceCreateNestedManyWithoutUserInput
    InvoiceItem?: InvoiceItemCreateNestedManyWithoutUserInput
    ProjectResource?: ProjectResourceCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAddressInput = {
    id?: number
    firstName: string
    lastName: string
    role?: Role
    email: string
    phone?: string
    accountId?: number | null
    vendorId?: number | null
    isTimeSheetEnabled?: boolean
    userAttributes?: UserAttributesUncheckedCreateNestedManyWithoutUserInput
    status?: UserStatus
    password?: string
    createdDate?: Date | string
    lastUpdateDate?: Date | string
    Invoice?: InvoiceUncheckedCreateNestedManyWithoutUserInput
    InvoiceItem?: InvoiceItemUncheckedCreateNestedManyWithoutUserInput
    ProjectResource?: ProjectResourceUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAddressInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAddressInput, UserUncheckedCreateWithoutAddressInput>
  }

  export type VendorCreateWithoutAddressInput = {
    name: string
    description?: string | null
    email: string
    phone?: string
    type?: VendorType
    account?: AccountCreateNestedOneWithoutVendorInput
    ein: string
    bankDetails?: string | null
    status: VendorStatus
    createdDate?: Date | string
    accountContactName?: string | null
    accountContactEmail?: string | null
    accountContactPhone?: string | null
    lastUpdateDate?: Date | string
    Invoice?: InvoiceCreateNestedManyWithoutVendorInput
    User?: UserCreateNestedManyWithoutVendorInput
    Project?: ProjectCreateNestedManyWithoutVendorInput
  }

  export type VendorUncheckedCreateWithoutAddressInput = {
    id?: number
    name: string
    description?: string | null
    email: string
    phone?: string
    type?: VendorType
    accountId?: number | null
    ein: string
    bankDetails?: string | null
    status: VendorStatus
    createdDate?: Date | string
    accountContactName?: string | null
    accountContactEmail?: string | null
    accountContactPhone?: string | null
    lastUpdateDate?: Date | string
    Invoice?: InvoiceUncheckedCreateNestedManyWithoutVendorInput
    User?: UserUncheckedCreateNestedManyWithoutVendorInput
    Project?: ProjectUncheckedCreateNestedManyWithoutVendorInput
  }

  export type VendorCreateOrConnectWithoutAddressInput = {
    where: VendorWhereUniqueInput
    create: XOR<VendorCreateWithoutAddressInput, VendorUncheckedCreateWithoutAddressInput>
  }

  export type ProjectCreateWithoutAddressInput = {
    name: string
    referenceCode: string
    description?: string
    type: InvoiceItemType
    invoiceCycle: InvoiceCycle
    vendor?: VendorCreateNestedOneWithoutProjectInput
    account?: AccountCreateNestedOneWithoutProjectInput
    budget?: Decimal | DecimalJsLike | number | string
    totalHours?: number | null
    averageRate?: Decimal | DecimalJsLike | number | string | null
    status: ProjectStatus
    createdDate?: Date | string
    lastUpdateDate?: Date | string
    Invoice?: InvoiceCreateNestedManyWithoutProjectInput
    ProjectResource?: ProjectResourceCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutAddressInput = {
    id?: number
    name: string
    referenceCode: string
    description?: string
    type: InvoiceItemType
    invoiceCycle: InvoiceCycle
    vendorId?: number
    accountId?: number
    budget?: Decimal | DecimalJsLike | number | string
    totalHours?: number | null
    averageRate?: Decimal | DecimalJsLike | number | string | null
    status: ProjectStatus
    createdDate?: Date | string
    lastUpdateDate?: Date | string
    Invoice?: InvoiceUncheckedCreateNestedManyWithoutProjectInput
    ProjectResource?: ProjectResourceUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutAddressInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutAddressInput, ProjectUncheckedCreateWithoutAddressInput>
  }

  export type ProjectCreateManyAddressInputEnvelope = {
    data: Enumerable<ProjectCreateManyAddressInput>
    skipDuplicates?: boolean
  }

  export type AccountUpsertWithoutAddressInput = {
    update: XOR<AccountUpdateWithoutAddressInput, AccountUncheckedUpdateWithoutAddressInput>
    create: XOR<AccountCreateWithoutAddressInput, AccountUncheckedCreateWithoutAddressInput>
  }

  export type AccountUpdateWithoutAddressInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    ein?: StringFieldUpdateOperationsInput | string
    bankId?: NullableIntFieldUpdateOperationsInput | number | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    status?: EnumAccountStatusFieldUpdateOperationsInput | AccountStatus
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Invoice?: InvoiceUpdateManyWithoutAccountNestedInput
    Vendor?: VendorUpdateManyWithoutAccountNestedInput
    User?: UserUpdateManyWithoutAccountNestedInput
    Project?: ProjectUpdateManyWithoutAccountNestedInput
  }

  export type AccountUncheckedUpdateWithoutAddressInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    ein?: StringFieldUpdateOperationsInput | string
    bankId?: NullableIntFieldUpdateOperationsInput | number | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    status?: EnumAccountStatusFieldUpdateOperationsInput | AccountStatus
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Invoice?: InvoiceUncheckedUpdateManyWithoutAccountNestedInput
    Vendor?: VendorUncheckedUpdateManyWithoutAccountNestedInput
    User?: UserUncheckedUpdateManyWithoutAccountNestedInput
    Project?: ProjectUncheckedUpdateManyWithoutAccountNestedInput
  }

  export type UserUpsertWithoutAddressInput = {
    update: XOR<UserUpdateWithoutAddressInput, UserUncheckedUpdateWithoutAddressInput>
    create: XOR<UserCreateWithoutAddressInput, UserUncheckedCreateWithoutAddressInput>
  }

  export type UserUpdateWithoutAddressInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    account?: AccountUpdateOneWithoutUserNestedInput
    vendor?: VendorUpdateOneWithoutUserNestedInput
    isTimeSheetEnabled?: BoolFieldUpdateOperationsInput | boolean
    userAttributes?: UserAttributesUpdateManyWithoutUserNestedInput
    status?: EnumUserStatusFieldUpdateOperationsInput | UserStatus
    password?: StringFieldUpdateOperationsInput | string
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Invoice?: InvoiceUpdateManyWithoutUserNestedInput
    InvoiceItem?: InvoiceItemUpdateManyWithoutUserNestedInput
    ProjectResource?: ProjectResourceUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAddressInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    accountId?: NullableIntFieldUpdateOperationsInput | number | null
    vendorId?: NullableIntFieldUpdateOperationsInput | number | null
    isTimeSheetEnabled?: BoolFieldUpdateOperationsInput | boolean
    userAttributes?: UserAttributesUncheckedUpdateManyWithoutUserNestedInput
    status?: EnumUserStatusFieldUpdateOperationsInput | UserStatus
    password?: StringFieldUpdateOperationsInput | string
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Invoice?: InvoiceUncheckedUpdateManyWithoutUserNestedInput
    InvoiceItem?: InvoiceItemUncheckedUpdateManyWithoutUserNestedInput
    ProjectResource?: ProjectResourceUncheckedUpdateManyWithoutUserNestedInput
  }

  export type VendorUpsertWithoutAddressInput = {
    update: XOR<VendorUpdateWithoutAddressInput, VendorUncheckedUpdateWithoutAddressInput>
    create: XOR<VendorCreateWithoutAddressInput, VendorUncheckedCreateWithoutAddressInput>
  }

  export type VendorUpdateWithoutAddressInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    type?: EnumVendorTypeFieldUpdateOperationsInput | VendorType
    account?: AccountUpdateOneWithoutVendorNestedInput
    ein?: StringFieldUpdateOperationsInput | string
    bankDetails?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumVendorStatusFieldUpdateOperationsInput | VendorStatus
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    accountContactName?: NullableStringFieldUpdateOperationsInput | string | null
    accountContactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    accountContactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Invoice?: InvoiceUpdateManyWithoutVendorNestedInput
    User?: UserUpdateManyWithoutVendorNestedInput
    Project?: ProjectUpdateManyWithoutVendorNestedInput
  }

  export type VendorUncheckedUpdateWithoutAddressInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    type?: EnumVendorTypeFieldUpdateOperationsInput | VendorType
    accountId?: NullableIntFieldUpdateOperationsInput | number | null
    ein?: StringFieldUpdateOperationsInput | string
    bankDetails?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumVendorStatusFieldUpdateOperationsInput | VendorStatus
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    accountContactName?: NullableStringFieldUpdateOperationsInput | string | null
    accountContactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    accountContactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Invoice?: InvoiceUncheckedUpdateManyWithoutVendorNestedInput
    User?: UserUncheckedUpdateManyWithoutVendorNestedInput
    Project?: ProjectUncheckedUpdateManyWithoutVendorNestedInput
  }

  export type ProjectUpsertWithWhereUniqueWithoutAddressInput = {
    where: ProjectWhereUniqueInput
    update: XOR<ProjectUpdateWithoutAddressInput, ProjectUncheckedUpdateWithoutAddressInput>
    create: XOR<ProjectCreateWithoutAddressInput, ProjectUncheckedCreateWithoutAddressInput>
  }

  export type ProjectUpdateWithWhereUniqueWithoutAddressInput = {
    where: ProjectWhereUniqueInput
    data: XOR<ProjectUpdateWithoutAddressInput, ProjectUncheckedUpdateWithoutAddressInput>
  }

  export type ProjectUpdateManyWithWhereWithoutAddressInput = {
    where: ProjectScalarWhereInput
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyWithoutProjectInput>
  }

  export type ProjectScalarWhereInput = {
    AND?: Enumerable<ProjectScalarWhereInput>
    OR?: Enumerable<ProjectScalarWhereInput>
    NOT?: Enumerable<ProjectScalarWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    referenceCode?: StringFilter | string
    description?: StringFilter | string
    type?: EnumInvoiceItemTypeFilter | InvoiceItemType
    invoiceCycle?: EnumInvoiceCycleFilter | InvoiceCycle
    addressId?: IntFilter | number
    vendorId?: IntFilter | number
    accountId?: IntFilter | number
    budget?: DecimalFilter | Decimal | DecimalJsLike | number | string
    totalHours?: IntNullableFilter | number | null
    averageRate?: DecimalNullableFilter | Decimal | DecimalJsLike | number | string | null
    status?: EnumProjectStatusFilter | ProjectStatus
    createdDate?: DateTimeFilter | Date | string
    lastUpdateDate?: DateTimeFilter | Date | string
  }

  export type AddressCreateWithoutAccountInput = {
    type?: AddressType
    address1: string
    address2?: string | null
    address3?: string | null
    county?: string | null
    city: string
    state: string
    zipCode: string
    country: string
    primary?: boolean
    createdDate?: Date | string
    lastUpdateDate?: Date | string
    status: AddressStatus
    User?: UserCreateNestedOneWithoutAddressInput
    Vendor?: VendorCreateNestedOneWithoutAddressInput
    Project?: ProjectCreateNestedManyWithoutAddressInput
  }

  export type AddressUncheckedCreateWithoutAccountInput = {
    id?: number
    type?: AddressType
    address1: string
    address2?: string | null
    address3?: string | null
    county?: string | null
    city: string
    state: string
    zipCode: string
    country: string
    primary?: boolean
    createdDate?: Date | string
    lastUpdateDate?: Date | string
    status: AddressStatus
    userId?: number | null
    vendorId?: number | null
    Project?: ProjectUncheckedCreateNestedManyWithoutAddressInput
  }

  export type AddressCreateOrConnectWithoutAccountInput = {
    where: AddressWhereUniqueInput
    create: XOR<AddressCreateWithoutAccountInput, AddressUncheckedCreateWithoutAccountInput>
  }

  export type AddressCreateManyAccountInputEnvelope = {
    data: Enumerable<AddressCreateManyAccountInput>
    skipDuplicates?: boolean
  }

  export type InvoiceCreateWithoutAccountInput = {
    description?: string
    type: InvoiceType
    vendor?: VendorCreateNestedOneWithoutInvoiceInput
    project?: ProjectCreateNestedOneWithoutInvoiceInput
    invoiceDate?: Date | string
    dueDte?: Date | string | null
    transactionId?: string | null
    notes?: string | null
    total: Decimal | DecimalJsLike | number | string
    paidAmount?: Decimal | DecimalJsLike | number | string | null
    status: InvoiceStatus
    paymentTerms: PaymentTerms
    createdDate?: Date | string
    lastUpdateDate?: Date | string
    user?: UserCreateNestedOneWithoutInvoiceInput
  }

  export type InvoiceUncheckedCreateWithoutAccountInput = {
    id?: number
    description?: string
    type: InvoiceType
    vendorId?: number | null
    projectId?: number | null
    invoiceDate?: Date | string
    dueDte?: Date | string | null
    transactionId?: string | null
    notes?: string | null
    total: Decimal | DecimalJsLike | number | string
    paidAmount?: Decimal | DecimalJsLike | number | string | null
    status: InvoiceStatus
    paymentTerms: PaymentTerms
    createdDate?: Date | string
    lastUpdateDate?: Date | string
    userId?: number | null
  }

  export type InvoiceCreateOrConnectWithoutAccountInput = {
    where: InvoiceWhereUniqueInput
    create: XOR<InvoiceCreateWithoutAccountInput, InvoiceUncheckedCreateWithoutAccountInput>
  }

  export type InvoiceCreateManyAccountInputEnvelope = {
    data: Enumerable<InvoiceCreateManyAccountInput>
    skipDuplicates?: boolean
  }

  export type VendorCreateWithoutAccountInput = {
    name: string
    description?: string | null
    email: string
    phone?: string
    type?: VendorType
    address?: AddressCreateNestedManyWithoutVendorInput
    ein: string
    bankDetails?: string | null
    status: VendorStatus
    createdDate?: Date | string
    accountContactName?: string | null
    accountContactEmail?: string | null
    accountContactPhone?: string | null
    lastUpdateDate?: Date | string
    Invoice?: InvoiceCreateNestedManyWithoutVendorInput
    User?: UserCreateNestedManyWithoutVendorInput
    Project?: ProjectCreateNestedManyWithoutVendorInput
  }

  export type VendorUncheckedCreateWithoutAccountInput = {
    id?: number
    name: string
    description?: string | null
    email: string
    phone?: string
    type?: VendorType
    address?: AddressUncheckedCreateNestedManyWithoutVendorInput
    ein: string
    bankDetails?: string | null
    status: VendorStatus
    createdDate?: Date | string
    accountContactName?: string | null
    accountContactEmail?: string | null
    accountContactPhone?: string | null
    lastUpdateDate?: Date | string
    Invoice?: InvoiceUncheckedCreateNestedManyWithoutVendorInput
    User?: UserUncheckedCreateNestedManyWithoutVendorInput
    Project?: ProjectUncheckedCreateNestedManyWithoutVendorInput
  }

  export type VendorCreateOrConnectWithoutAccountInput = {
    where: VendorWhereUniqueInput
    create: XOR<VendorCreateWithoutAccountInput, VendorUncheckedCreateWithoutAccountInput>
  }

  export type VendorCreateManyAccountInputEnvelope = {
    data: Enumerable<VendorCreateManyAccountInput>
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutAccountInput = {
    firstName: string
    lastName: string
    role?: Role
    email: string
    phone?: string
    vendor?: VendorCreateNestedOneWithoutUserInput
    isTimeSheetEnabled?: boolean
    address?: AddressCreateNestedManyWithoutUserInput
    userAttributes?: UserAttributesCreateNestedManyWithoutUserInput
    status?: UserStatus
    password?: string
    createdDate?: Date | string
    lastUpdateDate?: Date | string
    Invoice?: InvoiceCreateNestedManyWithoutUserInput
    InvoiceItem?: InvoiceItemCreateNestedManyWithoutUserInput
    ProjectResource?: ProjectResourceCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAccountInput = {
    id?: number
    firstName: string
    lastName: string
    role?: Role
    email: string
    phone?: string
    vendorId?: number | null
    isTimeSheetEnabled?: boolean
    address?: AddressUncheckedCreateNestedManyWithoutUserInput
    userAttributes?: UserAttributesUncheckedCreateNestedManyWithoutUserInput
    status?: UserStatus
    password?: string
    createdDate?: Date | string
    lastUpdateDate?: Date | string
    Invoice?: InvoiceUncheckedCreateNestedManyWithoutUserInput
    InvoiceItem?: InvoiceItemUncheckedCreateNestedManyWithoutUserInput
    ProjectResource?: ProjectResourceUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAccountInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAccountInput, UserUncheckedCreateWithoutAccountInput>
  }

  export type UserCreateManyAccountInputEnvelope = {
    data: Enumerable<UserCreateManyAccountInput>
    skipDuplicates?: boolean
  }

  export type ProjectCreateWithoutAccountInput = {
    name: string
    referenceCode: string
    description?: string
    type: InvoiceItemType
    invoiceCycle: InvoiceCycle
    address?: AddressCreateNestedOneWithoutProjectInput
    vendor?: VendorCreateNestedOneWithoutProjectInput
    budget?: Decimal | DecimalJsLike | number | string
    totalHours?: number | null
    averageRate?: Decimal | DecimalJsLike | number | string | null
    status: ProjectStatus
    createdDate?: Date | string
    lastUpdateDate?: Date | string
    Invoice?: InvoiceCreateNestedManyWithoutProjectInput
    ProjectResource?: ProjectResourceCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutAccountInput = {
    id?: number
    name: string
    referenceCode: string
    description?: string
    type: InvoiceItemType
    invoiceCycle: InvoiceCycle
    addressId?: number
    vendorId?: number
    budget?: Decimal | DecimalJsLike | number | string
    totalHours?: number | null
    averageRate?: Decimal | DecimalJsLike | number | string | null
    status: ProjectStatus
    createdDate?: Date | string
    lastUpdateDate?: Date | string
    Invoice?: InvoiceUncheckedCreateNestedManyWithoutProjectInput
    ProjectResource?: ProjectResourceUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutAccountInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutAccountInput, ProjectUncheckedCreateWithoutAccountInput>
  }

  export type ProjectCreateManyAccountInputEnvelope = {
    data: Enumerable<ProjectCreateManyAccountInput>
    skipDuplicates?: boolean
  }

  export type AddressUpsertWithWhereUniqueWithoutAccountInput = {
    where: AddressWhereUniqueInput
    update: XOR<AddressUpdateWithoutAccountInput, AddressUncheckedUpdateWithoutAccountInput>
    create: XOR<AddressCreateWithoutAccountInput, AddressUncheckedCreateWithoutAccountInput>
  }

  export type AddressUpdateWithWhereUniqueWithoutAccountInput = {
    where: AddressWhereUniqueInput
    data: XOR<AddressUpdateWithoutAccountInput, AddressUncheckedUpdateWithoutAccountInput>
  }

  export type AddressUpdateManyWithWhereWithoutAccountInput = {
    where: AddressScalarWhereInput
    data: XOR<AddressUpdateManyMutationInput, AddressUncheckedUpdateManyWithoutAddressInput>
  }

  export type AddressScalarWhereInput = {
    AND?: Enumerable<AddressScalarWhereInput>
    OR?: Enumerable<AddressScalarWhereInput>
    NOT?: Enumerable<AddressScalarWhereInput>
    id?: IntFilter | number
    type?: EnumAddressTypeFilter | AddressType
    address1?: StringFilter | string
    address2?: StringNullableFilter | string | null
    address3?: StringNullableFilter | string | null
    county?: StringNullableFilter | string | null
    city?: StringFilter | string
    state?: StringFilter | string
    zipCode?: StringFilter | string
    country?: StringFilter | string
    primary?: BoolFilter | boolean
    createdDate?: DateTimeFilter | Date | string
    lastUpdateDate?: DateTimeFilter | Date | string
    status?: EnumAddressStatusFilter | AddressStatus
    accountId?: IntFilter | number
    userId?: IntNullableFilter | number | null
    vendorId?: IntNullableFilter | number | null
  }

  export type InvoiceUpsertWithWhereUniqueWithoutAccountInput = {
    where: InvoiceWhereUniqueInput
    update: XOR<InvoiceUpdateWithoutAccountInput, InvoiceUncheckedUpdateWithoutAccountInput>
    create: XOR<InvoiceCreateWithoutAccountInput, InvoiceUncheckedCreateWithoutAccountInput>
  }

  export type InvoiceUpdateWithWhereUniqueWithoutAccountInput = {
    where: InvoiceWhereUniqueInput
    data: XOR<InvoiceUpdateWithoutAccountInput, InvoiceUncheckedUpdateWithoutAccountInput>
  }

  export type InvoiceUpdateManyWithWhereWithoutAccountInput = {
    where: InvoiceScalarWhereInput
    data: XOR<InvoiceUpdateManyMutationInput, InvoiceUncheckedUpdateManyWithoutInvoiceInput>
  }

  export type InvoiceScalarWhereInput = {
    AND?: Enumerable<InvoiceScalarWhereInput>
    OR?: Enumerable<InvoiceScalarWhereInput>
    NOT?: Enumerable<InvoiceScalarWhereInput>
    id?: IntFilter | number
    description?: StringFilter | string
    type?: EnumInvoiceTypeFilter | InvoiceType
    vendorId?: IntNullableFilter | number | null
    accountId?: IntNullableFilter | number | null
    projectId?: IntNullableFilter | number | null
    invoiceDate?: DateTimeFilter | Date | string
    dueDte?: DateTimeNullableFilter | Date | string | null
    transactionId?: StringNullableFilter | string | null
    notes?: StringNullableFilter | string | null
    total?: DecimalFilter | Decimal | DecimalJsLike | number | string
    paidAmount?: DecimalNullableFilter | Decimal | DecimalJsLike | number | string | null
    status?: EnumInvoiceStatusFilter | InvoiceStatus
    paymentTerms?: EnumPaymentTermsFilter | PaymentTerms
    createdDate?: DateTimeFilter | Date | string
    lastUpdateDate?: DateTimeFilter | Date | string
    userId?: IntNullableFilter | number | null
  }

  export type VendorUpsertWithWhereUniqueWithoutAccountInput = {
    where: VendorWhereUniqueInput
    update: XOR<VendorUpdateWithoutAccountInput, VendorUncheckedUpdateWithoutAccountInput>
    create: XOR<VendorCreateWithoutAccountInput, VendorUncheckedCreateWithoutAccountInput>
  }

  export type VendorUpdateWithWhereUniqueWithoutAccountInput = {
    where: VendorWhereUniqueInput
    data: XOR<VendorUpdateWithoutAccountInput, VendorUncheckedUpdateWithoutAccountInput>
  }

  export type VendorUpdateManyWithWhereWithoutAccountInput = {
    where: VendorScalarWhereInput
    data: XOR<VendorUpdateManyMutationInput, VendorUncheckedUpdateManyWithoutVendorInput>
  }

  export type VendorScalarWhereInput = {
    AND?: Enumerable<VendorScalarWhereInput>
    OR?: Enumerable<VendorScalarWhereInput>
    NOT?: Enumerable<VendorScalarWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    description?: StringNullableFilter | string | null
    email?: StringFilter | string
    phone?: StringFilter | string
    type?: EnumVendorTypeFilter | VendorType
    accountId?: IntNullableFilter | number | null
    ein?: StringFilter | string
    bankDetails?: StringNullableFilter | string | null
    status?: EnumVendorStatusFilter | VendorStatus
    createdDate?: DateTimeFilter | Date | string
    accountContactName?: StringNullableFilter | string | null
    accountContactEmail?: StringNullableFilter | string | null
    accountContactPhone?: StringNullableFilter | string | null
    lastUpdateDate?: DateTimeFilter | Date | string
  }

  export type UserUpsertWithWhereUniqueWithoutAccountInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutAccountInput, UserUncheckedUpdateWithoutAccountInput>
    create: XOR<UserCreateWithoutAccountInput, UserUncheckedCreateWithoutAccountInput>
  }

  export type UserUpdateWithWhereUniqueWithoutAccountInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutAccountInput, UserUncheckedUpdateWithoutAccountInput>
  }

  export type UserUpdateManyWithWhereWithoutAccountInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutUserInput>
  }

  export type UserScalarWhereInput = {
    AND?: Enumerable<UserScalarWhereInput>
    OR?: Enumerable<UserScalarWhereInput>
    NOT?: Enumerable<UserScalarWhereInput>
    id?: IntFilter | number
    firstName?: StringFilter | string
    lastName?: StringFilter | string
    role?: EnumRoleFilter | Role
    email?: StringFilter | string
    phone?: StringFilter | string
    accountId?: IntNullableFilter | number | null
    vendorId?: IntNullableFilter | number | null
    isTimeSheetEnabled?: BoolFilter | boolean
    status?: EnumUserStatusFilter | UserStatus
    password?: StringFilter | string
    createdDate?: DateTimeFilter | Date | string
    lastUpdateDate?: DateTimeFilter | Date | string
  }

  export type ProjectUpsertWithWhereUniqueWithoutAccountInput = {
    where: ProjectWhereUniqueInput
    update: XOR<ProjectUpdateWithoutAccountInput, ProjectUncheckedUpdateWithoutAccountInput>
    create: XOR<ProjectCreateWithoutAccountInput, ProjectUncheckedCreateWithoutAccountInput>
  }

  export type ProjectUpdateWithWhereUniqueWithoutAccountInput = {
    where: ProjectWhereUniqueInput
    data: XOR<ProjectUpdateWithoutAccountInput, ProjectUncheckedUpdateWithoutAccountInput>
  }

  export type ProjectUpdateManyWithWhereWithoutAccountInput = {
    where: ProjectScalarWhereInput
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyWithoutProjectInput>
  }

  export type AddressCreateWithoutVendorInput = {
    type?: AddressType
    address1: string
    address2?: string | null
    address3?: string | null
    county?: string | null
    city: string
    state: string
    zipCode: string
    country: string
    primary?: boolean
    createdDate?: Date | string
    lastUpdateDate?: Date | string
    status: AddressStatus
    account?: AccountCreateNestedOneWithoutAddressInput
    User?: UserCreateNestedOneWithoutAddressInput
    Project?: ProjectCreateNestedManyWithoutAddressInput
  }

  export type AddressUncheckedCreateWithoutVendorInput = {
    id?: number
    type?: AddressType
    address1: string
    address2?: string | null
    address3?: string | null
    county?: string | null
    city: string
    state: string
    zipCode: string
    country: string
    primary?: boolean
    createdDate?: Date | string
    lastUpdateDate?: Date | string
    status: AddressStatus
    accountId?: number
    userId?: number | null
    Project?: ProjectUncheckedCreateNestedManyWithoutAddressInput
  }

  export type AddressCreateOrConnectWithoutVendorInput = {
    where: AddressWhereUniqueInput
    create: XOR<AddressCreateWithoutVendorInput, AddressUncheckedCreateWithoutVendorInput>
  }

  export type AddressCreateManyVendorInputEnvelope = {
    data: Enumerable<AddressCreateManyVendorInput>
    skipDuplicates?: boolean
  }

  export type AccountCreateWithoutVendorInput = {
    name: string
    description: string
    ein: string
    bankId?: number | null
    email: string
    phone?: string
    status: AccountStatus
    createdDate?: Date | string
    lastUpdateDate?: Date | string
    address?: AddressCreateNestedManyWithoutAccountInput
    Invoice?: InvoiceCreateNestedManyWithoutAccountInput
    User?: UserCreateNestedManyWithoutAccountInput
    Project?: ProjectCreateNestedManyWithoutAccountInput
  }

  export type AccountUncheckedCreateWithoutVendorInput = {
    id?: number
    name: string
    description: string
    ein: string
    bankId?: number | null
    email: string
    phone?: string
    status: AccountStatus
    createdDate?: Date | string
    lastUpdateDate?: Date | string
    address?: AddressUncheckedCreateNestedManyWithoutAccountInput
    Invoice?: InvoiceUncheckedCreateNestedManyWithoutAccountInput
    User?: UserUncheckedCreateNestedManyWithoutAccountInput
    Project?: ProjectUncheckedCreateNestedManyWithoutAccountInput
  }

  export type AccountCreateOrConnectWithoutVendorInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutVendorInput, AccountUncheckedCreateWithoutVendorInput>
  }

  export type InvoiceCreateWithoutVendorInput = {
    description?: string
    type: InvoiceType
    account?: AccountCreateNestedOneWithoutInvoiceInput
    project?: ProjectCreateNestedOneWithoutInvoiceInput
    invoiceDate?: Date | string
    dueDte?: Date | string | null
    transactionId?: string | null
    notes?: string | null
    total: Decimal | DecimalJsLike | number | string
    paidAmount?: Decimal | DecimalJsLike | number | string | null
    status: InvoiceStatus
    paymentTerms: PaymentTerms
    createdDate?: Date | string
    lastUpdateDate?: Date | string
    user?: UserCreateNestedOneWithoutInvoiceInput
  }

  export type InvoiceUncheckedCreateWithoutVendorInput = {
    id?: number
    description?: string
    type: InvoiceType
    accountId?: number | null
    projectId?: number | null
    invoiceDate?: Date | string
    dueDte?: Date | string | null
    transactionId?: string | null
    notes?: string | null
    total: Decimal | DecimalJsLike | number | string
    paidAmount?: Decimal | DecimalJsLike | number | string | null
    status: InvoiceStatus
    paymentTerms: PaymentTerms
    createdDate?: Date | string
    lastUpdateDate?: Date | string
    userId?: number | null
  }

  export type InvoiceCreateOrConnectWithoutVendorInput = {
    where: InvoiceWhereUniqueInput
    create: XOR<InvoiceCreateWithoutVendorInput, InvoiceUncheckedCreateWithoutVendorInput>
  }

  export type InvoiceCreateManyVendorInputEnvelope = {
    data: Enumerable<InvoiceCreateManyVendorInput>
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutVendorInput = {
    firstName: string
    lastName: string
    role?: Role
    email: string
    phone?: string
    account?: AccountCreateNestedOneWithoutUserInput
    isTimeSheetEnabled?: boolean
    address?: AddressCreateNestedManyWithoutUserInput
    userAttributes?: UserAttributesCreateNestedManyWithoutUserInput
    status?: UserStatus
    password?: string
    createdDate?: Date | string
    lastUpdateDate?: Date | string
    Invoice?: InvoiceCreateNestedManyWithoutUserInput
    InvoiceItem?: InvoiceItemCreateNestedManyWithoutUserInput
    ProjectResource?: ProjectResourceCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutVendorInput = {
    id?: number
    firstName: string
    lastName: string
    role?: Role
    email: string
    phone?: string
    accountId?: number | null
    isTimeSheetEnabled?: boolean
    address?: AddressUncheckedCreateNestedManyWithoutUserInput
    userAttributes?: UserAttributesUncheckedCreateNestedManyWithoutUserInput
    status?: UserStatus
    password?: string
    createdDate?: Date | string
    lastUpdateDate?: Date | string
    Invoice?: InvoiceUncheckedCreateNestedManyWithoutUserInput
    InvoiceItem?: InvoiceItemUncheckedCreateNestedManyWithoutUserInput
    ProjectResource?: ProjectResourceUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutVendorInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutVendorInput, UserUncheckedCreateWithoutVendorInput>
  }

  export type UserCreateManyVendorInputEnvelope = {
    data: Enumerable<UserCreateManyVendorInput>
    skipDuplicates?: boolean
  }

  export type ProjectCreateWithoutVendorInput = {
    name: string
    referenceCode: string
    description?: string
    type: InvoiceItemType
    invoiceCycle: InvoiceCycle
    address?: AddressCreateNestedOneWithoutProjectInput
    account?: AccountCreateNestedOneWithoutProjectInput
    budget?: Decimal | DecimalJsLike | number | string
    totalHours?: number | null
    averageRate?: Decimal | DecimalJsLike | number | string | null
    status: ProjectStatus
    createdDate?: Date | string
    lastUpdateDate?: Date | string
    Invoice?: InvoiceCreateNestedManyWithoutProjectInput
    ProjectResource?: ProjectResourceCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutVendorInput = {
    id?: number
    name: string
    referenceCode: string
    description?: string
    type: InvoiceItemType
    invoiceCycle: InvoiceCycle
    addressId?: number
    accountId?: number
    budget?: Decimal | DecimalJsLike | number | string
    totalHours?: number | null
    averageRate?: Decimal | DecimalJsLike | number | string | null
    status: ProjectStatus
    createdDate?: Date | string
    lastUpdateDate?: Date | string
    Invoice?: InvoiceUncheckedCreateNestedManyWithoutProjectInput
    ProjectResource?: ProjectResourceUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutVendorInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutVendorInput, ProjectUncheckedCreateWithoutVendorInput>
  }

  export type ProjectCreateManyVendorInputEnvelope = {
    data: Enumerable<ProjectCreateManyVendorInput>
    skipDuplicates?: boolean
  }

  export type AddressUpsertWithWhereUniqueWithoutVendorInput = {
    where: AddressWhereUniqueInput
    update: XOR<AddressUpdateWithoutVendorInput, AddressUncheckedUpdateWithoutVendorInput>
    create: XOR<AddressCreateWithoutVendorInput, AddressUncheckedCreateWithoutVendorInput>
  }

  export type AddressUpdateWithWhereUniqueWithoutVendorInput = {
    where: AddressWhereUniqueInput
    data: XOR<AddressUpdateWithoutVendorInput, AddressUncheckedUpdateWithoutVendorInput>
  }

  export type AddressUpdateManyWithWhereWithoutVendorInput = {
    where: AddressScalarWhereInput
    data: XOR<AddressUpdateManyMutationInput, AddressUncheckedUpdateManyWithoutAddressInput>
  }

  export type AccountUpsertWithoutVendorInput = {
    update: XOR<AccountUpdateWithoutVendorInput, AccountUncheckedUpdateWithoutVendorInput>
    create: XOR<AccountCreateWithoutVendorInput, AccountUncheckedCreateWithoutVendorInput>
  }

  export type AccountUpdateWithoutVendorInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    ein?: StringFieldUpdateOperationsInput | string
    bankId?: NullableIntFieldUpdateOperationsInput | number | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    status?: EnumAccountStatusFieldUpdateOperationsInput | AccountStatus
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: AddressUpdateManyWithoutAccountNestedInput
    Invoice?: InvoiceUpdateManyWithoutAccountNestedInput
    User?: UserUpdateManyWithoutAccountNestedInput
    Project?: ProjectUpdateManyWithoutAccountNestedInput
  }

  export type AccountUncheckedUpdateWithoutVendorInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    ein?: StringFieldUpdateOperationsInput | string
    bankId?: NullableIntFieldUpdateOperationsInput | number | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    status?: EnumAccountStatusFieldUpdateOperationsInput | AccountStatus
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: AddressUncheckedUpdateManyWithoutAccountNestedInput
    Invoice?: InvoiceUncheckedUpdateManyWithoutAccountNestedInput
    User?: UserUncheckedUpdateManyWithoutAccountNestedInput
    Project?: ProjectUncheckedUpdateManyWithoutAccountNestedInput
  }

  export type InvoiceUpsertWithWhereUniqueWithoutVendorInput = {
    where: InvoiceWhereUniqueInput
    update: XOR<InvoiceUpdateWithoutVendorInput, InvoiceUncheckedUpdateWithoutVendorInput>
    create: XOR<InvoiceCreateWithoutVendorInput, InvoiceUncheckedCreateWithoutVendorInput>
  }

  export type InvoiceUpdateWithWhereUniqueWithoutVendorInput = {
    where: InvoiceWhereUniqueInput
    data: XOR<InvoiceUpdateWithoutVendorInput, InvoiceUncheckedUpdateWithoutVendorInput>
  }

  export type InvoiceUpdateManyWithWhereWithoutVendorInput = {
    where: InvoiceScalarWhereInput
    data: XOR<InvoiceUpdateManyMutationInput, InvoiceUncheckedUpdateManyWithoutInvoiceInput>
  }

  export type UserUpsertWithWhereUniqueWithoutVendorInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutVendorInput, UserUncheckedUpdateWithoutVendorInput>
    create: XOR<UserCreateWithoutVendorInput, UserUncheckedCreateWithoutVendorInput>
  }

  export type UserUpdateWithWhereUniqueWithoutVendorInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutVendorInput, UserUncheckedUpdateWithoutVendorInput>
  }

  export type UserUpdateManyWithWhereWithoutVendorInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutUserInput>
  }

  export type ProjectUpsertWithWhereUniqueWithoutVendorInput = {
    where: ProjectWhereUniqueInput
    update: XOR<ProjectUpdateWithoutVendorInput, ProjectUncheckedUpdateWithoutVendorInput>
    create: XOR<ProjectCreateWithoutVendorInput, ProjectUncheckedCreateWithoutVendorInput>
  }

  export type ProjectUpdateWithWhereUniqueWithoutVendorInput = {
    where: ProjectWhereUniqueInput
    data: XOR<ProjectUpdateWithoutVendorInput, ProjectUncheckedUpdateWithoutVendorInput>
  }

  export type ProjectUpdateManyWithWhereWithoutVendorInput = {
    where: ProjectScalarWhereInput
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyWithoutProjectInput>
  }

  export type ProjectCreateWithoutProjectResourceInput = {
    name: string
    referenceCode: string
    description?: string
    type: InvoiceItemType
    invoiceCycle: InvoiceCycle
    address?: AddressCreateNestedOneWithoutProjectInput
    vendor?: VendorCreateNestedOneWithoutProjectInput
    account?: AccountCreateNestedOneWithoutProjectInput
    budget?: Decimal | DecimalJsLike | number | string
    totalHours?: number | null
    averageRate?: Decimal | DecimalJsLike | number | string | null
    status: ProjectStatus
    createdDate?: Date | string
    lastUpdateDate?: Date | string
    Invoice?: InvoiceCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutProjectResourceInput = {
    id?: number
    name: string
    referenceCode: string
    description?: string
    type: InvoiceItemType
    invoiceCycle: InvoiceCycle
    addressId?: number
    vendorId?: number
    accountId?: number
    budget?: Decimal | DecimalJsLike | number | string
    totalHours?: number | null
    averageRate?: Decimal | DecimalJsLike | number | string | null
    status: ProjectStatus
    createdDate?: Date | string
    lastUpdateDate?: Date | string
    Invoice?: InvoiceUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutProjectResourceInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutProjectResourceInput, ProjectUncheckedCreateWithoutProjectResourceInput>
  }

  export type UserCreateWithoutProjectResourceInput = {
    firstName: string
    lastName: string
    role?: Role
    email: string
    phone?: string
    account?: AccountCreateNestedOneWithoutUserInput
    vendor?: VendorCreateNestedOneWithoutUserInput
    isTimeSheetEnabled?: boolean
    address?: AddressCreateNestedManyWithoutUserInput
    userAttributes?: UserAttributesCreateNestedManyWithoutUserInput
    status?: UserStatus
    password?: string
    createdDate?: Date | string
    lastUpdateDate?: Date | string
    Invoice?: InvoiceCreateNestedManyWithoutUserInput
    InvoiceItem?: InvoiceItemCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutProjectResourceInput = {
    id?: number
    firstName: string
    lastName: string
    role?: Role
    email: string
    phone?: string
    accountId?: number | null
    vendorId?: number | null
    isTimeSheetEnabled?: boolean
    address?: AddressUncheckedCreateNestedManyWithoutUserInput
    userAttributes?: UserAttributesUncheckedCreateNestedManyWithoutUserInput
    status?: UserStatus
    password?: string
    createdDate?: Date | string
    lastUpdateDate?: Date | string
    Invoice?: InvoiceUncheckedCreateNestedManyWithoutUserInput
    InvoiceItem?: InvoiceItemUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutProjectResourceInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProjectResourceInput, UserUncheckedCreateWithoutProjectResourceInput>
  }

  export type ProjectUpsertWithoutProjectResourceInput = {
    update: XOR<ProjectUpdateWithoutProjectResourceInput, ProjectUncheckedUpdateWithoutProjectResourceInput>
    create: XOR<ProjectCreateWithoutProjectResourceInput, ProjectUncheckedCreateWithoutProjectResourceInput>
  }

  export type ProjectUpdateWithoutProjectResourceInput = {
    name?: StringFieldUpdateOperationsInput | string
    referenceCode?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: EnumInvoiceItemTypeFieldUpdateOperationsInput | InvoiceItemType
    invoiceCycle?: EnumInvoiceCycleFieldUpdateOperationsInput | InvoiceCycle
    address?: AddressUpdateOneWithoutProjectNestedInput
    vendor?: VendorUpdateOneWithoutProjectNestedInput
    account?: AccountUpdateOneWithoutProjectNestedInput
    budget?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalHours?: NullableIntFieldUpdateOperationsInput | number | null
    averageRate?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | ProjectStatus
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Invoice?: InvoiceUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutProjectResourceInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    referenceCode?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: EnumInvoiceItemTypeFieldUpdateOperationsInput | InvoiceItemType
    invoiceCycle?: EnumInvoiceCycleFieldUpdateOperationsInput | InvoiceCycle
    addressId?: IntFieldUpdateOperationsInput | number
    vendorId?: IntFieldUpdateOperationsInput | number
    accountId?: IntFieldUpdateOperationsInput | number
    budget?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalHours?: NullableIntFieldUpdateOperationsInput | number | null
    averageRate?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | ProjectStatus
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Invoice?: InvoiceUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type UserUpsertWithoutProjectResourceInput = {
    update: XOR<UserUpdateWithoutProjectResourceInput, UserUncheckedUpdateWithoutProjectResourceInput>
    create: XOR<UserCreateWithoutProjectResourceInput, UserUncheckedCreateWithoutProjectResourceInput>
  }

  export type UserUpdateWithoutProjectResourceInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    account?: AccountUpdateOneWithoutUserNestedInput
    vendor?: VendorUpdateOneWithoutUserNestedInput
    isTimeSheetEnabled?: BoolFieldUpdateOperationsInput | boolean
    address?: AddressUpdateManyWithoutUserNestedInput
    userAttributes?: UserAttributesUpdateManyWithoutUserNestedInput
    status?: EnumUserStatusFieldUpdateOperationsInput | UserStatus
    password?: StringFieldUpdateOperationsInput | string
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Invoice?: InvoiceUpdateManyWithoutUserNestedInput
    InvoiceItem?: InvoiceItemUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutProjectResourceInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    accountId?: NullableIntFieldUpdateOperationsInput | number | null
    vendorId?: NullableIntFieldUpdateOperationsInput | number | null
    isTimeSheetEnabled?: BoolFieldUpdateOperationsInput | boolean
    address?: AddressUncheckedUpdateManyWithoutUserNestedInput
    userAttributes?: UserAttributesUncheckedUpdateManyWithoutUserNestedInput
    status?: EnumUserStatusFieldUpdateOperationsInput | UserStatus
    password?: StringFieldUpdateOperationsInput | string
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Invoice?: InvoiceUncheckedUpdateManyWithoutUserNestedInput
    InvoiceItem?: InvoiceItemUncheckedUpdateManyWithoutUserNestedInput
  }

  export type VendorCreateWithoutInvoiceInput = {
    name: string
    description?: string | null
    email: string
    phone?: string
    type?: VendorType
    address?: AddressCreateNestedManyWithoutVendorInput
    account?: AccountCreateNestedOneWithoutVendorInput
    ein: string
    bankDetails?: string | null
    status: VendorStatus
    createdDate?: Date | string
    accountContactName?: string | null
    accountContactEmail?: string | null
    accountContactPhone?: string | null
    lastUpdateDate?: Date | string
    User?: UserCreateNestedManyWithoutVendorInput
    Project?: ProjectCreateNestedManyWithoutVendorInput
  }

  export type VendorUncheckedCreateWithoutInvoiceInput = {
    id?: number
    name: string
    description?: string | null
    email: string
    phone?: string
    type?: VendorType
    address?: AddressUncheckedCreateNestedManyWithoutVendorInput
    accountId?: number | null
    ein: string
    bankDetails?: string | null
    status: VendorStatus
    createdDate?: Date | string
    accountContactName?: string | null
    accountContactEmail?: string | null
    accountContactPhone?: string | null
    lastUpdateDate?: Date | string
    User?: UserUncheckedCreateNestedManyWithoutVendorInput
    Project?: ProjectUncheckedCreateNestedManyWithoutVendorInput
  }

  export type VendorCreateOrConnectWithoutInvoiceInput = {
    where: VendorWhereUniqueInput
    create: XOR<VendorCreateWithoutInvoiceInput, VendorUncheckedCreateWithoutInvoiceInput>
  }

  export type AccountCreateWithoutInvoiceInput = {
    name: string
    description: string
    ein: string
    bankId?: number | null
    email: string
    phone?: string
    status: AccountStatus
    createdDate?: Date | string
    lastUpdateDate?: Date | string
    address?: AddressCreateNestedManyWithoutAccountInput
    Vendor?: VendorCreateNestedManyWithoutAccountInput
    User?: UserCreateNestedManyWithoutAccountInput
    Project?: ProjectCreateNestedManyWithoutAccountInput
  }

  export type AccountUncheckedCreateWithoutInvoiceInput = {
    id?: number
    name: string
    description: string
    ein: string
    bankId?: number | null
    email: string
    phone?: string
    status: AccountStatus
    createdDate?: Date | string
    lastUpdateDate?: Date | string
    address?: AddressUncheckedCreateNestedManyWithoutAccountInput
    Vendor?: VendorUncheckedCreateNestedManyWithoutAccountInput
    User?: UserUncheckedCreateNestedManyWithoutAccountInput
    Project?: ProjectUncheckedCreateNestedManyWithoutAccountInput
  }

  export type AccountCreateOrConnectWithoutInvoiceInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutInvoiceInput, AccountUncheckedCreateWithoutInvoiceInput>
  }

  export type ProjectCreateWithoutInvoiceInput = {
    name: string
    referenceCode: string
    description?: string
    type: InvoiceItemType
    invoiceCycle: InvoiceCycle
    address?: AddressCreateNestedOneWithoutProjectInput
    vendor?: VendorCreateNestedOneWithoutProjectInput
    account?: AccountCreateNestedOneWithoutProjectInput
    budget?: Decimal | DecimalJsLike | number | string
    totalHours?: number | null
    averageRate?: Decimal | DecimalJsLike | number | string | null
    status: ProjectStatus
    createdDate?: Date | string
    lastUpdateDate?: Date | string
    ProjectResource?: ProjectResourceCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutInvoiceInput = {
    id?: number
    name: string
    referenceCode: string
    description?: string
    type: InvoiceItemType
    invoiceCycle: InvoiceCycle
    addressId?: number
    vendorId?: number
    accountId?: number
    budget?: Decimal | DecimalJsLike | number | string
    totalHours?: number | null
    averageRate?: Decimal | DecimalJsLike | number | string | null
    status: ProjectStatus
    createdDate?: Date | string
    lastUpdateDate?: Date | string
    ProjectResource?: ProjectResourceUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutInvoiceInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutInvoiceInput, ProjectUncheckedCreateWithoutInvoiceInput>
  }

  export type UserCreateWithoutInvoiceInput = {
    firstName: string
    lastName: string
    role?: Role
    email: string
    phone?: string
    account?: AccountCreateNestedOneWithoutUserInput
    vendor?: VendorCreateNestedOneWithoutUserInput
    isTimeSheetEnabled?: boolean
    address?: AddressCreateNestedManyWithoutUserInput
    userAttributes?: UserAttributesCreateNestedManyWithoutUserInput
    status?: UserStatus
    password?: string
    createdDate?: Date | string
    lastUpdateDate?: Date | string
    InvoiceItem?: InvoiceItemCreateNestedManyWithoutUserInput
    ProjectResource?: ProjectResourceCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutInvoiceInput = {
    id?: number
    firstName: string
    lastName: string
    role?: Role
    email: string
    phone?: string
    accountId?: number | null
    vendorId?: number | null
    isTimeSheetEnabled?: boolean
    address?: AddressUncheckedCreateNestedManyWithoutUserInput
    userAttributes?: UserAttributesUncheckedCreateNestedManyWithoutUserInput
    status?: UserStatus
    password?: string
    createdDate?: Date | string
    lastUpdateDate?: Date | string
    InvoiceItem?: InvoiceItemUncheckedCreateNestedManyWithoutUserInput
    ProjectResource?: ProjectResourceUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutInvoiceInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutInvoiceInput, UserUncheckedCreateWithoutInvoiceInput>
  }

  export type VendorUpsertWithoutInvoiceInput = {
    update: XOR<VendorUpdateWithoutInvoiceInput, VendorUncheckedUpdateWithoutInvoiceInput>
    create: XOR<VendorCreateWithoutInvoiceInput, VendorUncheckedCreateWithoutInvoiceInput>
  }

  export type VendorUpdateWithoutInvoiceInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    type?: EnumVendorTypeFieldUpdateOperationsInput | VendorType
    address?: AddressUpdateManyWithoutVendorNestedInput
    account?: AccountUpdateOneWithoutVendorNestedInput
    ein?: StringFieldUpdateOperationsInput | string
    bankDetails?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumVendorStatusFieldUpdateOperationsInput | VendorStatus
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    accountContactName?: NullableStringFieldUpdateOperationsInput | string | null
    accountContactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    accountContactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UserUpdateManyWithoutVendorNestedInput
    Project?: ProjectUpdateManyWithoutVendorNestedInput
  }

  export type VendorUncheckedUpdateWithoutInvoiceInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    type?: EnumVendorTypeFieldUpdateOperationsInput | VendorType
    address?: AddressUncheckedUpdateManyWithoutVendorNestedInput
    accountId?: NullableIntFieldUpdateOperationsInput | number | null
    ein?: StringFieldUpdateOperationsInput | string
    bankDetails?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumVendorStatusFieldUpdateOperationsInput | VendorStatus
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    accountContactName?: NullableStringFieldUpdateOperationsInput | string | null
    accountContactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    accountContactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UserUncheckedUpdateManyWithoutVendorNestedInput
    Project?: ProjectUncheckedUpdateManyWithoutVendorNestedInput
  }

  export type AccountUpsertWithoutInvoiceInput = {
    update: XOR<AccountUpdateWithoutInvoiceInput, AccountUncheckedUpdateWithoutInvoiceInput>
    create: XOR<AccountCreateWithoutInvoiceInput, AccountUncheckedCreateWithoutInvoiceInput>
  }

  export type AccountUpdateWithoutInvoiceInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    ein?: StringFieldUpdateOperationsInput | string
    bankId?: NullableIntFieldUpdateOperationsInput | number | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    status?: EnumAccountStatusFieldUpdateOperationsInput | AccountStatus
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: AddressUpdateManyWithoutAccountNestedInput
    Vendor?: VendorUpdateManyWithoutAccountNestedInput
    User?: UserUpdateManyWithoutAccountNestedInput
    Project?: ProjectUpdateManyWithoutAccountNestedInput
  }

  export type AccountUncheckedUpdateWithoutInvoiceInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    ein?: StringFieldUpdateOperationsInput | string
    bankId?: NullableIntFieldUpdateOperationsInput | number | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    status?: EnumAccountStatusFieldUpdateOperationsInput | AccountStatus
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: AddressUncheckedUpdateManyWithoutAccountNestedInput
    Vendor?: VendorUncheckedUpdateManyWithoutAccountNestedInput
    User?: UserUncheckedUpdateManyWithoutAccountNestedInput
    Project?: ProjectUncheckedUpdateManyWithoutAccountNestedInput
  }

  export type ProjectUpsertWithoutInvoiceInput = {
    update: XOR<ProjectUpdateWithoutInvoiceInput, ProjectUncheckedUpdateWithoutInvoiceInput>
    create: XOR<ProjectCreateWithoutInvoiceInput, ProjectUncheckedCreateWithoutInvoiceInput>
  }

  export type ProjectUpdateWithoutInvoiceInput = {
    name?: StringFieldUpdateOperationsInput | string
    referenceCode?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: EnumInvoiceItemTypeFieldUpdateOperationsInput | InvoiceItemType
    invoiceCycle?: EnumInvoiceCycleFieldUpdateOperationsInput | InvoiceCycle
    address?: AddressUpdateOneWithoutProjectNestedInput
    vendor?: VendorUpdateOneWithoutProjectNestedInput
    account?: AccountUpdateOneWithoutProjectNestedInput
    budget?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalHours?: NullableIntFieldUpdateOperationsInput | number | null
    averageRate?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | ProjectStatus
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
    ProjectResource?: ProjectResourceUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutInvoiceInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    referenceCode?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: EnumInvoiceItemTypeFieldUpdateOperationsInput | InvoiceItemType
    invoiceCycle?: EnumInvoiceCycleFieldUpdateOperationsInput | InvoiceCycle
    addressId?: IntFieldUpdateOperationsInput | number
    vendorId?: IntFieldUpdateOperationsInput | number
    accountId?: IntFieldUpdateOperationsInput | number
    budget?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalHours?: NullableIntFieldUpdateOperationsInput | number | null
    averageRate?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | ProjectStatus
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
    ProjectResource?: ProjectResourceUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type UserUpsertWithoutInvoiceInput = {
    update: XOR<UserUpdateWithoutInvoiceInput, UserUncheckedUpdateWithoutInvoiceInput>
    create: XOR<UserCreateWithoutInvoiceInput, UserUncheckedCreateWithoutInvoiceInput>
  }

  export type UserUpdateWithoutInvoiceInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    account?: AccountUpdateOneWithoutUserNestedInput
    vendor?: VendorUpdateOneWithoutUserNestedInput
    isTimeSheetEnabled?: BoolFieldUpdateOperationsInput | boolean
    address?: AddressUpdateManyWithoutUserNestedInput
    userAttributes?: UserAttributesUpdateManyWithoutUserNestedInput
    status?: EnumUserStatusFieldUpdateOperationsInput | UserStatus
    password?: StringFieldUpdateOperationsInput | string
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
    InvoiceItem?: InvoiceItemUpdateManyWithoutUserNestedInput
    ProjectResource?: ProjectResourceUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutInvoiceInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    accountId?: NullableIntFieldUpdateOperationsInput | number | null
    vendorId?: NullableIntFieldUpdateOperationsInput | number | null
    isTimeSheetEnabled?: BoolFieldUpdateOperationsInput | boolean
    address?: AddressUncheckedUpdateManyWithoutUserNestedInput
    userAttributes?: UserAttributesUncheckedUpdateManyWithoutUserNestedInput
    status?: EnumUserStatusFieldUpdateOperationsInput | UserStatus
    password?: StringFieldUpdateOperationsInput | string
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
    InvoiceItem?: InvoiceItemUncheckedUpdateManyWithoutUserNestedInput
    ProjectResource?: ProjectResourceUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutInvoiceItemInput = {
    firstName: string
    lastName: string
    role?: Role
    email: string
    phone?: string
    account?: AccountCreateNestedOneWithoutUserInput
    vendor?: VendorCreateNestedOneWithoutUserInput
    isTimeSheetEnabled?: boolean
    address?: AddressCreateNestedManyWithoutUserInput
    userAttributes?: UserAttributesCreateNestedManyWithoutUserInput
    status?: UserStatus
    password?: string
    createdDate?: Date | string
    lastUpdateDate?: Date | string
    Invoice?: InvoiceCreateNestedManyWithoutUserInput
    ProjectResource?: ProjectResourceCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutInvoiceItemInput = {
    id?: number
    firstName: string
    lastName: string
    role?: Role
    email: string
    phone?: string
    accountId?: number | null
    vendorId?: number | null
    isTimeSheetEnabled?: boolean
    address?: AddressUncheckedCreateNestedManyWithoutUserInput
    userAttributes?: UserAttributesUncheckedCreateNestedManyWithoutUserInput
    status?: UserStatus
    password?: string
    createdDate?: Date | string
    lastUpdateDate?: Date | string
    Invoice?: InvoiceUncheckedCreateNestedManyWithoutUserInput
    ProjectResource?: ProjectResourceUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutInvoiceItemInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutInvoiceItemInput, UserUncheckedCreateWithoutInvoiceItemInput>
  }

  export type UserUpsertWithoutInvoiceItemInput = {
    update: XOR<UserUpdateWithoutInvoiceItemInput, UserUncheckedUpdateWithoutInvoiceItemInput>
    create: XOR<UserCreateWithoutInvoiceItemInput, UserUncheckedCreateWithoutInvoiceItemInput>
  }

  export type UserUpdateWithoutInvoiceItemInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    account?: AccountUpdateOneWithoutUserNestedInput
    vendor?: VendorUpdateOneWithoutUserNestedInput
    isTimeSheetEnabled?: BoolFieldUpdateOperationsInput | boolean
    address?: AddressUpdateManyWithoutUserNestedInput
    userAttributes?: UserAttributesUpdateManyWithoutUserNestedInput
    status?: EnumUserStatusFieldUpdateOperationsInput | UserStatus
    password?: StringFieldUpdateOperationsInput | string
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Invoice?: InvoiceUpdateManyWithoutUserNestedInput
    ProjectResource?: ProjectResourceUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutInvoiceItemInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    accountId?: NullableIntFieldUpdateOperationsInput | number | null
    vendorId?: NullableIntFieldUpdateOperationsInput | number | null
    isTimeSheetEnabled?: BoolFieldUpdateOperationsInput | boolean
    address?: AddressUncheckedUpdateManyWithoutUserNestedInput
    userAttributes?: UserAttributesUncheckedUpdateManyWithoutUserNestedInput
    status?: EnumUserStatusFieldUpdateOperationsInput | UserStatus
    password?: StringFieldUpdateOperationsInput | string
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Invoice?: InvoiceUncheckedUpdateManyWithoutUserNestedInput
    ProjectResource?: ProjectResourceUncheckedUpdateManyWithoutUserNestedInput
  }

  export type AddressCreateWithoutProjectInput = {
    type?: AddressType
    address1: string
    address2?: string | null
    address3?: string | null
    county?: string | null
    city: string
    state: string
    zipCode: string
    country: string
    primary?: boolean
    createdDate?: Date | string
    lastUpdateDate?: Date | string
    status: AddressStatus
    account?: AccountCreateNestedOneWithoutAddressInput
    User?: UserCreateNestedOneWithoutAddressInput
    Vendor?: VendorCreateNestedOneWithoutAddressInput
  }

  export type AddressUncheckedCreateWithoutProjectInput = {
    id?: number
    type?: AddressType
    address1: string
    address2?: string | null
    address3?: string | null
    county?: string | null
    city: string
    state: string
    zipCode: string
    country: string
    primary?: boolean
    createdDate?: Date | string
    lastUpdateDate?: Date | string
    status: AddressStatus
    accountId?: number
    userId?: number | null
    vendorId?: number | null
  }

  export type AddressCreateOrConnectWithoutProjectInput = {
    where: AddressWhereUniqueInput
    create: XOR<AddressCreateWithoutProjectInput, AddressUncheckedCreateWithoutProjectInput>
  }

  export type VendorCreateWithoutProjectInput = {
    name: string
    description?: string | null
    email: string
    phone?: string
    type?: VendorType
    address?: AddressCreateNestedManyWithoutVendorInput
    account?: AccountCreateNestedOneWithoutVendorInput
    ein: string
    bankDetails?: string | null
    status: VendorStatus
    createdDate?: Date | string
    accountContactName?: string | null
    accountContactEmail?: string | null
    accountContactPhone?: string | null
    lastUpdateDate?: Date | string
    Invoice?: InvoiceCreateNestedManyWithoutVendorInput
    User?: UserCreateNestedManyWithoutVendorInput
  }

  export type VendorUncheckedCreateWithoutProjectInput = {
    id?: number
    name: string
    description?: string | null
    email: string
    phone?: string
    type?: VendorType
    address?: AddressUncheckedCreateNestedManyWithoutVendorInput
    accountId?: number | null
    ein: string
    bankDetails?: string | null
    status: VendorStatus
    createdDate?: Date | string
    accountContactName?: string | null
    accountContactEmail?: string | null
    accountContactPhone?: string | null
    lastUpdateDate?: Date | string
    Invoice?: InvoiceUncheckedCreateNestedManyWithoutVendorInput
    User?: UserUncheckedCreateNestedManyWithoutVendorInput
  }

  export type VendorCreateOrConnectWithoutProjectInput = {
    where: VendorWhereUniqueInput
    create: XOR<VendorCreateWithoutProjectInput, VendorUncheckedCreateWithoutProjectInput>
  }

  export type AccountCreateWithoutProjectInput = {
    name: string
    description: string
    ein: string
    bankId?: number | null
    email: string
    phone?: string
    status: AccountStatus
    createdDate?: Date | string
    lastUpdateDate?: Date | string
    address?: AddressCreateNestedManyWithoutAccountInput
    Invoice?: InvoiceCreateNestedManyWithoutAccountInput
    Vendor?: VendorCreateNestedManyWithoutAccountInput
    User?: UserCreateNestedManyWithoutAccountInput
  }

  export type AccountUncheckedCreateWithoutProjectInput = {
    id?: number
    name: string
    description: string
    ein: string
    bankId?: number | null
    email: string
    phone?: string
    status: AccountStatus
    createdDate?: Date | string
    lastUpdateDate?: Date | string
    address?: AddressUncheckedCreateNestedManyWithoutAccountInput
    Invoice?: InvoiceUncheckedCreateNestedManyWithoutAccountInput
    Vendor?: VendorUncheckedCreateNestedManyWithoutAccountInput
    User?: UserUncheckedCreateNestedManyWithoutAccountInput
  }

  export type AccountCreateOrConnectWithoutProjectInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutProjectInput, AccountUncheckedCreateWithoutProjectInput>
  }

  export type InvoiceCreateWithoutProjectInput = {
    description?: string
    type: InvoiceType
    vendor?: VendorCreateNestedOneWithoutInvoiceInput
    account?: AccountCreateNestedOneWithoutInvoiceInput
    invoiceDate?: Date | string
    dueDte?: Date | string | null
    transactionId?: string | null
    notes?: string | null
    total: Decimal | DecimalJsLike | number | string
    paidAmount?: Decimal | DecimalJsLike | number | string | null
    status: InvoiceStatus
    paymentTerms: PaymentTerms
    createdDate?: Date | string
    lastUpdateDate?: Date | string
    user?: UserCreateNestedOneWithoutInvoiceInput
  }

  export type InvoiceUncheckedCreateWithoutProjectInput = {
    id?: number
    description?: string
    type: InvoiceType
    vendorId?: number | null
    accountId?: number | null
    invoiceDate?: Date | string
    dueDte?: Date | string | null
    transactionId?: string | null
    notes?: string | null
    total: Decimal | DecimalJsLike | number | string
    paidAmount?: Decimal | DecimalJsLike | number | string | null
    status: InvoiceStatus
    paymentTerms: PaymentTerms
    createdDate?: Date | string
    lastUpdateDate?: Date | string
    userId?: number | null
  }

  export type InvoiceCreateOrConnectWithoutProjectInput = {
    where: InvoiceWhereUniqueInput
    create: XOR<InvoiceCreateWithoutProjectInput, InvoiceUncheckedCreateWithoutProjectInput>
  }

  export type InvoiceCreateManyProjectInputEnvelope = {
    data: Enumerable<InvoiceCreateManyProjectInput>
    skipDuplicates?: boolean
  }

  export type ProjectResourceCreateWithoutProjectInput = {
    user?: UserCreateNestedOneWithoutProjectResourceInput
    unitPrice?: Decimal | DecimalJsLike | number | string | null
    currency?: Currency | null
    quantity?: number | null
    uom?: UnitOfMeasure | null
    budgetAllocated?: Decimal | DecimalJsLike | number | string | null
  }

  export type ProjectResourceUncheckedCreateWithoutProjectInput = {
    id?: number
    userId?: number | null
    unitPrice?: Decimal | DecimalJsLike | number | string | null
    currency?: Currency | null
    quantity?: number | null
    uom?: UnitOfMeasure | null
    budgetAllocated?: Decimal | DecimalJsLike | number | string | null
  }

  export type ProjectResourceCreateOrConnectWithoutProjectInput = {
    where: ProjectResourceWhereUniqueInput
    create: XOR<ProjectResourceCreateWithoutProjectInput, ProjectResourceUncheckedCreateWithoutProjectInput>
  }

  export type ProjectResourceCreateManyProjectInputEnvelope = {
    data: Enumerable<ProjectResourceCreateManyProjectInput>
    skipDuplicates?: boolean
  }

  export type AddressUpsertWithoutProjectInput = {
    update: XOR<AddressUpdateWithoutProjectInput, AddressUncheckedUpdateWithoutProjectInput>
    create: XOR<AddressCreateWithoutProjectInput, AddressUncheckedCreateWithoutProjectInput>
  }

  export type AddressUpdateWithoutProjectInput = {
    type?: EnumAddressTypeFieldUpdateOperationsInput | AddressType
    address1?: StringFieldUpdateOperationsInput | string
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    address3?: NullableStringFieldUpdateOperationsInput | string | null
    county?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    zipCode?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    primary?: BoolFieldUpdateOperationsInput | boolean
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAddressStatusFieldUpdateOperationsInput | AddressStatus
    account?: AccountUpdateOneRequiredWithoutAddressNestedInput
    User?: UserUpdateOneWithoutAddressNestedInput
    Vendor?: VendorUpdateOneWithoutAddressNestedInput
  }

  export type AddressUncheckedUpdateWithoutProjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: EnumAddressTypeFieldUpdateOperationsInput | AddressType
    address1?: StringFieldUpdateOperationsInput | string
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    address3?: NullableStringFieldUpdateOperationsInput | string | null
    county?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    zipCode?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    primary?: BoolFieldUpdateOperationsInput | boolean
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAddressStatusFieldUpdateOperationsInput | AddressStatus
    accountId?: IntFieldUpdateOperationsInput | number
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    vendorId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type VendorUpsertWithoutProjectInput = {
    update: XOR<VendorUpdateWithoutProjectInput, VendorUncheckedUpdateWithoutProjectInput>
    create: XOR<VendorCreateWithoutProjectInput, VendorUncheckedCreateWithoutProjectInput>
  }

  export type VendorUpdateWithoutProjectInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    type?: EnumVendorTypeFieldUpdateOperationsInput | VendorType
    address?: AddressUpdateManyWithoutVendorNestedInput
    account?: AccountUpdateOneWithoutVendorNestedInput
    ein?: StringFieldUpdateOperationsInput | string
    bankDetails?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumVendorStatusFieldUpdateOperationsInput | VendorStatus
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    accountContactName?: NullableStringFieldUpdateOperationsInput | string | null
    accountContactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    accountContactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Invoice?: InvoiceUpdateManyWithoutVendorNestedInput
    User?: UserUpdateManyWithoutVendorNestedInput
  }

  export type VendorUncheckedUpdateWithoutProjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    type?: EnumVendorTypeFieldUpdateOperationsInput | VendorType
    address?: AddressUncheckedUpdateManyWithoutVendorNestedInput
    accountId?: NullableIntFieldUpdateOperationsInput | number | null
    ein?: StringFieldUpdateOperationsInput | string
    bankDetails?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumVendorStatusFieldUpdateOperationsInput | VendorStatus
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    accountContactName?: NullableStringFieldUpdateOperationsInput | string | null
    accountContactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    accountContactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Invoice?: InvoiceUncheckedUpdateManyWithoutVendorNestedInput
    User?: UserUncheckedUpdateManyWithoutVendorNestedInput
  }

  export type AccountUpsertWithoutProjectInput = {
    update: XOR<AccountUpdateWithoutProjectInput, AccountUncheckedUpdateWithoutProjectInput>
    create: XOR<AccountCreateWithoutProjectInput, AccountUncheckedCreateWithoutProjectInput>
  }

  export type AccountUpdateWithoutProjectInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    ein?: StringFieldUpdateOperationsInput | string
    bankId?: NullableIntFieldUpdateOperationsInput | number | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    status?: EnumAccountStatusFieldUpdateOperationsInput | AccountStatus
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: AddressUpdateManyWithoutAccountNestedInput
    Invoice?: InvoiceUpdateManyWithoutAccountNestedInput
    Vendor?: VendorUpdateManyWithoutAccountNestedInput
    User?: UserUpdateManyWithoutAccountNestedInput
  }

  export type AccountUncheckedUpdateWithoutProjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    ein?: StringFieldUpdateOperationsInput | string
    bankId?: NullableIntFieldUpdateOperationsInput | number | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    status?: EnumAccountStatusFieldUpdateOperationsInput | AccountStatus
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: AddressUncheckedUpdateManyWithoutAccountNestedInput
    Invoice?: InvoiceUncheckedUpdateManyWithoutAccountNestedInput
    Vendor?: VendorUncheckedUpdateManyWithoutAccountNestedInput
    User?: UserUncheckedUpdateManyWithoutAccountNestedInput
  }

  export type InvoiceUpsertWithWhereUniqueWithoutProjectInput = {
    where: InvoiceWhereUniqueInput
    update: XOR<InvoiceUpdateWithoutProjectInput, InvoiceUncheckedUpdateWithoutProjectInput>
    create: XOR<InvoiceCreateWithoutProjectInput, InvoiceUncheckedCreateWithoutProjectInput>
  }

  export type InvoiceUpdateWithWhereUniqueWithoutProjectInput = {
    where: InvoiceWhereUniqueInput
    data: XOR<InvoiceUpdateWithoutProjectInput, InvoiceUncheckedUpdateWithoutProjectInput>
  }

  export type InvoiceUpdateManyWithWhereWithoutProjectInput = {
    where: InvoiceScalarWhereInput
    data: XOR<InvoiceUpdateManyMutationInput, InvoiceUncheckedUpdateManyWithoutInvoiceInput>
  }

  export type ProjectResourceUpsertWithWhereUniqueWithoutProjectInput = {
    where: ProjectResourceWhereUniqueInput
    update: XOR<ProjectResourceUpdateWithoutProjectInput, ProjectResourceUncheckedUpdateWithoutProjectInput>
    create: XOR<ProjectResourceCreateWithoutProjectInput, ProjectResourceUncheckedCreateWithoutProjectInput>
  }

  export type ProjectResourceUpdateWithWhereUniqueWithoutProjectInput = {
    where: ProjectResourceWhereUniqueInput
    data: XOR<ProjectResourceUpdateWithoutProjectInput, ProjectResourceUncheckedUpdateWithoutProjectInput>
  }

  export type ProjectResourceUpdateManyWithWhereWithoutProjectInput = {
    where: ProjectResourceScalarWhereInput
    data: XOR<ProjectResourceUpdateManyMutationInput, ProjectResourceUncheckedUpdateManyWithoutProjectResourceInput>
  }

  export type ProjectResourceScalarWhereInput = {
    AND?: Enumerable<ProjectResourceScalarWhereInput>
    OR?: Enumerable<ProjectResourceScalarWhereInput>
    NOT?: Enumerable<ProjectResourceScalarWhereInput>
    id?: IntFilter | number
    projectId?: IntNullableFilter | number | null
    userId?: IntNullableFilter | number | null
    unitPrice?: DecimalNullableFilter | Decimal | DecimalJsLike | number | string | null
    currency?: EnumCurrencyNullableFilter | Currency | null
    quantity?: IntNullableFilter | number | null
    uom?: EnumUnitOfMeasureNullableFilter | UnitOfMeasure | null
    budgetAllocated?: DecimalNullableFilter | Decimal | DecimalJsLike | number | string | null
  }

  export type AccountCreateWithoutUserInput = {
    name: string
    description: string
    ein: string
    bankId?: number | null
    email: string
    phone?: string
    status: AccountStatus
    createdDate?: Date | string
    lastUpdateDate?: Date | string
    address?: AddressCreateNestedManyWithoutAccountInput
    Invoice?: InvoiceCreateNestedManyWithoutAccountInput
    Vendor?: VendorCreateNestedManyWithoutAccountInput
    Project?: ProjectCreateNestedManyWithoutAccountInput
  }

  export type AccountUncheckedCreateWithoutUserInput = {
    id?: number
    name: string
    description: string
    ein: string
    bankId?: number | null
    email: string
    phone?: string
    status: AccountStatus
    createdDate?: Date | string
    lastUpdateDate?: Date | string
    address?: AddressUncheckedCreateNestedManyWithoutAccountInput
    Invoice?: InvoiceUncheckedCreateNestedManyWithoutAccountInput
    Vendor?: VendorUncheckedCreateNestedManyWithoutAccountInput
    Project?: ProjectUncheckedCreateNestedManyWithoutAccountInput
  }

  export type AccountCreateOrConnectWithoutUserInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type VendorCreateWithoutUserInput = {
    name: string
    description?: string | null
    email: string
    phone?: string
    type?: VendorType
    address?: AddressCreateNestedManyWithoutVendorInput
    account?: AccountCreateNestedOneWithoutVendorInput
    ein: string
    bankDetails?: string | null
    status: VendorStatus
    createdDate?: Date | string
    accountContactName?: string | null
    accountContactEmail?: string | null
    accountContactPhone?: string | null
    lastUpdateDate?: Date | string
    Invoice?: InvoiceCreateNestedManyWithoutVendorInput
    Project?: ProjectCreateNestedManyWithoutVendorInput
  }

  export type VendorUncheckedCreateWithoutUserInput = {
    id?: number
    name: string
    description?: string | null
    email: string
    phone?: string
    type?: VendorType
    address?: AddressUncheckedCreateNestedManyWithoutVendorInput
    accountId?: number | null
    ein: string
    bankDetails?: string | null
    status: VendorStatus
    createdDate?: Date | string
    accountContactName?: string | null
    accountContactEmail?: string | null
    accountContactPhone?: string | null
    lastUpdateDate?: Date | string
    Invoice?: InvoiceUncheckedCreateNestedManyWithoutVendorInput
    Project?: ProjectUncheckedCreateNestedManyWithoutVendorInput
  }

  export type VendorCreateOrConnectWithoutUserInput = {
    where: VendorWhereUniqueInput
    create: XOR<VendorCreateWithoutUserInput, VendorUncheckedCreateWithoutUserInput>
  }

  export type AddressCreateWithoutUserInput = {
    type?: AddressType
    address1: string
    address2?: string | null
    address3?: string | null
    county?: string | null
    city: string
    state: string
    zipCode: string
    country: string
    primary?: boolean
    createdDate?: Date | string
    lastUpdateDate?: Date | string
    status: AddressStatus
    account?: AccountCreateNestedOneWithoutAddressInput
    Vendor?: VendorCreateNestedOneWithoutAddressInput
    Project?: ProjectCreateNestedManyWithoutAddressInput
  }

  export type AddressUncheckedCreateWithoutUserInput = {
    id?: number
    type?: AddressType
    address1: string
    address2?: string | null
    address3?: string | null
    county?: string | null
    city: string
    state: string
    zipCode: string
    country: string
    primary?: boolean
    createdDate?: Date | string
    lastUpdateDate?: Date | string
    status: AddressStatus
    accountId?: number
    vendorId?: number | null
    Project?: ProjectUncheckedCreateNestedManyWithoutAddressInput
  }

  export type AddressCreateOrConnectWithoutUserInput = {
    where: AddressWhereUniqueInput
    create: XOR<AddressCreateWithoutUserInput, AddressUncheckedCreateWithoutUserInput>
  }

  export type AddressCreateManyUserInputEnvelope = {
    data: Enumerable<AddressCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type UserAttributesCreateWithoutUserInput = {
    userAttributeKey?: UserAttributeKeys
    userAttributeValue?: string | null
    createdDate?: Date | string
    lastUpdateDate?: Date | string
  }

  export type UserAttributesUncheckedCreateWithoutUserInput = {
    id?: number
    userAttributeKey?: UserAttributeKeys
    userAttributeValue?: string | null
    createdDate?: Date | string
    lastUpdateDate?: Date | string
  }

  export type UserAttributesCreateOrConnectWithoutUserInput = {
    where: UserAttributesWhereUniqueInput
    create: XOR<UserAttributesCreateWithoutUserInput, UserAttributesUncheckedCreateWithoutUserInput>
  }

  export type UserAttributesCreateManyUserInputEnvelope = {
    data: Enumerable<UserAttributesCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type InvoiceCreateWithoutUserInput = {
    description?: string
    type: InvoiceType
    vendor?: VendorCreateNestedOneWithoutInvoiceInput
    account?: AccountCreateNestedOneWithoutInvoiceInput
    project?: ProjectCreateNestedOneWithoutInvoiceInput
    invoiceDate?: Date | string
    dueDte?: Date | string | null
    transactionId?: string | null
    notes?: string | null
    total: Decimal | DecimalJsLike | number | string
    paidAmount?: Decimal | DecimalJsLike | number | string | null
    status: InvoiceStatus
    paymentTerms: PaymentTerms
    createdDate?: Date | string
    lastUpdateDate?: Date | string
  }

  export type InvoiceUncheckedCreateWithoutUserInput = {
    id?: number
    description?: string
    type: InvoiceType
    vendorId?: number | null
    accountId?: number | null
    projectId?: number | null
    invoiceDate?: Date | string
    dueDte?: Date | string | null
    transactionId?: string | null
    notes?: string | null
    total: Decimal | DecimalJsLike | number | string
    paidAmount?: Decimal | DecimalJsLike | number | string | null
    status: InvoiceStatus
    paymentTerms: PaymentTerms
    createdDate?: Date | string
    lastUpdateDate?: Date | string
  }

  export type InvoiceCreateOrConnectWithoutUserInput = {
    where: InvoiceWhereUniqueInput
    create: XOR<InvoiceCreateWithoutUserInput, InvoiceUncheckedCreateWithoutUserInput>
  }

  export type InvoiceCreateManyUserInputEnvelope = {
    data: Enumerable<InvoiceCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type InvoiceItemCreateWithoutUserInput = {
    description?: string | null
    type: InvoiceItemType
    unitPrice?: Decimal | DecimalJsLike | number | string
    currency: Currency
    quantity?: number
    uom: UnitOfMeasure
    total?: Decimal | DecimalJsLike | number | string
    status: InvoiceStatus
    generalNote?: string | null
    fromDate?: Date | string | null
    toDate?: Date | string | null
    createdDate?: Date | string
    lastUpdateDate?: Date | string
  }

  export type InvoiceItemUncheckedCreateWithoutUserInput = {
    id?: number
    description?: string | null
    type: InvoiceItemType
    unitPrice?: Decimal | DecimalJsLike | number | string
    currency: Currency
    quantity?: number
    uom: UnitOfMeasure
    total?: Decimal | DecimalJsLike | number | string
    status: InvoiceStatus
    generalNote?: string | null
    fromDate?: Date | string | null
    toDate?: Date | string | null
    createdDate?: Date | string
    lastUpdateDate?: Date | string
  }

  export type InvoiceItemCreateOrConnectWithoutUserInput = {
    where: InvoiceItemWhereUniqueInput
    create: XOR<InvoiceItemCreateWithoutUserInput, InvoiceItemUncheckedCreateWithoutUserInput>
  }

  export type InvoiceItemCreateManyUserInputEnvelope = {
    data: Enumerable<InvoiceItemCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type ProjectResourceCreateWithoutUserInput = {
    project?: ProjectCreateNestedOneWithoutProjectResourceInput
    unitPrice?: Decimal | DecimalJsLike | number | string | null
    currency?: Currency | null
    quantity?: number | null
    uom?: UnitOfMeasure | null
    budgetAllocated?: Decimal | DecimalJsLike | number | string | null
  }

  export type ProjectResourceUncheckedCreateWithoutUserInput = {
    id?: number
    projectId?: number | null
    unitPrice?: Decimal | DecimalJsLike | number | string | null
    currency?: Currency | null
    quantity?: number | null
    uom?: UnitOfMeasure | null
    budgetAllocated?: Decimal | DecimalJsLike | number | string | null
  }

  export type ProjectResourceCreateOrConnectWithoutUserInput = {
    where: ProjectResourceWhereUniqueInput
    create: XOR<ProjectResourceCreateWithoutUserInput, ProjectResourceUncheckedCreateWithoutUserInput>
  }

  export type ProjectResourceCreateManyUserInputEnvelope = {
    data: Enumerable<ProjectResourceCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type AccountUpsertWithoutUserInput = {
    update: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountUpdateWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    ein?: StringFieldUpdateOperationsInput | string
    bankId?: NullableIntFieldUpdateOperationsInput | number | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    status?: EnumAccountStatusFieldUpdateOperationsInput | AccountStatus
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: AddressUpdateManyWithoutAccountNestedInput
    Invoice?: InvoiceUpdateManyWithoutAccountNestedInput
    Vendor?: VendorUpdateManyWithoutAccountNestedInput
    Project?: ProjectUpdateManyWithoutAccountNestedInput
  }

  export type AccountUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    ein?: StringFieldUpdateOperationsInput | string
    bankId?: NullableIntFieldUpdateOperationsInput | number | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    status?: EnumAccountStatusFieldUpdateOperationsInput | AccountStatus
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: AddressUncheckedUpdateManyWithoutAccountNestedInput
    Invoice?: InvoiceUncheckedUpdateManyWithoutAccountNestedInput
    Vendor?: VendorUncheckedUpdateManyWithoutAccountNestedInput
    Project?: ProjectUncheckedUpdateManyWithoutAccountNestedInput
  }

  export type VendorUpsertWithoutUserInput = {
    update: XOR<VendorUpdateWithoutUserInput, VendorUncheckedUpdateWithoutUserInput>
    create: XOR<VendorCreateWithoutUserInput, VendorUncheckedCreateWithoutUserInput>
  }

  export type VendorUpdateWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    type?: EnumVendorTypeFieldUpdateOperationsInput | VendorType
    address?: AddressUpdateManyWithoutVendorNestedInput
    account?: AccountUpdateOneWithoutVendorNestedInput
    ein?: StringFieldUpdateOperationsInput | string
    bankDetails?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumVendorStatusFieldUpdateOperationsInput | VendorStatus
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    accountContactName?: NullableStringFieldUpdateOperationsInput | string | null
    accountContactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    accountContactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Invoice?: InvoiceUpdateManyWithoutVendorNestedInput
    Project?: ProjectUpdateManyWithoutVendorNestedInput
  }

  export type VendorUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    type?: EnumVendorTypeFieldUpdateOperationsInput | VendorType
    address?: AddressUncheckedUpdateManyWithoutVendorNestedInput
    accountId?: NullableIntFieldUpdateOperationsInput | number | null
    ein?: StringFieldUpdateOperationsInput | string
    bankDetails?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumVendorStatusFieldUpdateOperationsInput | VendorStatus
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    accountContactName?: NullableStringFieldUpdateOperationsInput | string | null
    accountContactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    accountContactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Invoice?: InvoiceUncheckedUpdateManyWithoutVendorNestedInput
    Project?: ProjectUncheckedUpdateManyWithoutVendorNestedInput
  }

  export type AddressUpsertWithWhereUniqueWithoutUserInput = {
    where: AddressWhereUniqueInput
    update: XOR<AddressUpdateWithoutUserInput, AddressUncheckedUpdateWithoutUserInput>
    create: XOR<AddressCreateWithoutUserInput, AddressUncheckedCreateWithoutUserInput>
  }

  export type AddressUpdateWithWhereUniqueWithoutUserInput = {
    where: AddressWhereUniqueInput
    data: XOR<AddressUpdateWithoutUserInput, AddressUncheckedUpdateWithoutUserInput>
  }

  export type AddressUpdateManyWithWhereWithoutUserInput = {
    where: AddressScalarWhereInput
    data: XOR<AddressUpdateManyMutationInput, AddressUncheckedUpdateManyWithoutAddressInput>
  }

  export type UserAttributesUpsertWithWhereUniqueWithoutUserInput = {
    where: UserAttributesWhereUniqueInput
    update: XOR<UserAttributesUpdateWithoutUserInput, UserAttributesUncheckedUpdateWithoutUserInput>
    create: XOR<UserAttributesCreateWithoutUserInput, UserAttributesUncheckedCreateWithoutUserInput>
  }

  export type UserAttributesUpdateWithWhereUniqueWithoutUserInput = {
    where: UserAttributesWhereUniqueInput
    data: XOR<UserAttributesUpdateWithoutUserInput, UserAttributesUncheckedUpdateWithoutUserInput>
  }

  export type UserAttributesUpdateManyWithWhereWithoutUserInput = {
    where: UserAttributesScalarWhereInput
    data: XOR<UserAttributesUpdateManyMutationInput, UserAttributesUncheckedUpdateManyWithoutUserAttributesInput>
  }

  export type UserAttributesScalarWhereInput = {
    AND?: Enumerable<UserAttributesScalarWhereInput>
    OR?: Enumerable<UserAttributesScalarWhereInput>
    NOT?: Enumerable<UserAttributesScalarWhereInput>
    id?: IntFilter | number
    userAttributeKey?: EnumUserAttributeKeysFilter | UserAttributeKeys
    userAttributeValue?: StringNullableFilter | string | null
    createdDate?: DateTimeFilter | Date | string
    lastUpdateDate?: DateTimeFilter | Date | string
    userId?: IntFilter | number
  }

  export type InvoiceUpsertWithWhereUniqueWithoutUserInput = {
    where: InvoiceWhereUniqueInput
    update: XOR<InvoiceUpdateWithoutUserInput, InvoiceUncheckedUpdateWithoutUserInput>
    create: XOR<InvoiceCreateWithoutUserInput, InvoiceUncheckedCreateWithoutUserInput>
  }

  export type InvoiceUpdateWithWhereUniqueWithoutUserInput = {
    where: InvoiceWhereUniqueInput
    data: XOR<InvoiceUpdateWithoutUserInput, InvoiceUncheckedUpdateWithoutUserInput>
  }

  export type InvoiceUpdateManyWithWhereWithoutUserInput = {
    where: InvoiceScalarWhereInput
    data: XOR<InvoiceUpdateManyMutationInput, InvoiceUncheckedUpdateManyWithoutInvoiceInput>
  }

  export type InvoiceItemUpsertWithWhereUniqueWithoutUserInput = {
    where: InvoiceItemWhereUniqueInput
    update: XOR<InvoiceItemUpdateWithoutUserInput, InvoiceItemUncheckedUpdateWithoutUserInput>
    create: XOR<InvoiceItemCreateWithoutUserInput, InvoiceItemUncheckedCreateWithoutUserInput>
  }

  export type InvoiceItemUpdateWithWhereUniqueWithoutUserInput = {
    where: InvoiceItemWhereUniqueInput
    data: XOR<InvoiceItemUpdateWithoutUserInput, InvoiceItemUncheckedUpdateWithoutUserInput>
  }

  export type InvoiceItemUpdateManyWithWhereWithoutUserInput = {
    where: InvoiceItemScalarWhereInput
    data: XOR<InvoiceItemUpdateManyMutationInput, InvoiceItemUncheckedUpdateManyWithoutInvoiceItemInput>
  }

  export type InvoiceItemScalarWhereInput = {
    AND?: Enumerable<InvoiceItemScalarWhereInput>
    OR?: Enumerable<InvoiceItemScalarWhereInput>
    NOT?: Enumerable<InvoiceItemScalarWhereInput>
    id?: IntFilter | number
    description?: StringNullableFilter | string | null
    type?: EnumInvoiceItemTypeFilter | InvoiceItemType
    unitPrice?: DecimalFilter | Decimal | DecimalJsLike | number | string
    currency?: EnumCurrencyFilter | Currency
    quantity?: IntFilter | number
    uom?: EnumUnitOfMeasureFilter | UnitOfMeasure
    total?: DecimalFilter | Decimal | DecimalJsLike | number | string
    status?: EnumInvoiceStatusFilter | InvoiceStatus
    generalNote?: StringNullableFilter | string | null
    userId?: IntNullableFilter | number | null
    fromDate?: DateTimeNullableFilter | Date | string | null
    toDate?: DateTimeNullableFilter | Date | string | null
    createdDate?: DateTimeFilter | Date | string
    lastUpdateDate?: DateTimeFilter | Date | string
  }

  export type ProjectResourceUpsertWithWhereUniqueWithoutUserInput = {
    where: ProjectResourceWhereUniqueInput
    update: XOR<ProjectResourceUpdateWithoutUserInput, ProjectResourceUncheckedUpdateWithoutUserInput>
    create: XOR<ProjectResourceCreateWithoutUserInput, ProjectResourceUncheckedCreateWithoutUserInput>
  }

  export type ProjectResourceUpdateWithWhereUniqueWithoutUserInput = {
    where: ProjectResourceWhereUniqueInput
    data: XOR<ProjectResourceUpdateWithoutUserInput, ProjectResourceUncheckedUpdateWithoutUserInput>
  }

  export type ProjectResourceUpdateManyWithWhereWithoutUserInput = {
    where: ProjectResourceScalarWhereInput
    data: XOR<ProjectResourceUpdateManyMutationInput, ProjectResourceUncheckedUpdateManyWithoutProjectResourceInput>
  }

  export type UserCreateWithoutUserAttributesInput = {
    firstName: string
    lastName: string
    role?: Role
    email: string
    phone?: string
    account?: AccountCreateNestedOneWithoutUserInput
    vendor?: VendorCreateNestedOneWithoutUserInput
    isTimeSheetEnabled?: boolean
    address?: AddressCreateNestedManyWithoutUserInput
    status?: UserStatus
    password?: string
    createdDate?: Date | string
    lastUpdateDate?: Date | string
    Invoice?: InvoiceCreateNestedManyWithoutUserInput
    InvoiceItem?: InvoiceItemCreateNestedManyWithoutUserInput
    ProjectResource?: ProjectResourceCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUserAttributesInput = {
    id?: number
    firstName: string
    lastName: string
    role?: Role
    email: string
    phone?: string
    accountId?: number | null
    vendorId?: number | null
    isTimeSheetEnabled?: boolean
    address?: AddressUncheckedCreateNestedManyWithoutUserInput
    status?: UserStatus
    password?: string
    createdDate?: Date | string
    lastUpdateDate?: Date | string
    Invoice?: InvoiceUncheckedCreateNestedManyWithoutUserInput
    InvoiceItem?: InvoiceItemUncheckedCreateNestedManyWithoutUserInput
    ProjectResource?: ProjectResourceUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUserAttributesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserAttributesInput, UserUncheckedCreateWithoutUserAttributesInput>
  }

  export type UserUpsertWithoutUserAttributesInput = {
    update: XOR<UserUpdateWithoutUserAttributesInput, UserUncheckedUpdateWithoutUserAttributesInput>
    create: XOR<UserCreateWithoutUserAttributesInput, UserUncheckedCreateWithoutUserAttributesInput>
  }

  export type UserUpdateWithoutUserAttributesInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    account?: AccountUpdateOneWithoutUserNestedInput
    vendor?: VendorUpdateOneWithoutUserNestedInput
    isTimeSheetEnabled?: BoolFieldUpdateOperationsInput | boolean
    address?: AddressUpdateManyWithoutUserNestedInput
    status?: EnumUserStatusFieldUpdateOperationsInput | UserStatus
    password?: StringFieldUpdateOperationsInput | string
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Invoice?: InvoiceUpdateManyWithoutUserNestedInput
    InvoiceItem?: InvoiceItemUpdateManyWithoutUserNestedInput
    ProjectResource?: ProjectResourceUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUserAttributesInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    accountId?: NullableIntFieldUpdateOperationsInput | number | null
    vendorId?: NullableIntFieldUpdateOperationsInput | number | null
    isTimeSheetEnabled?: BoolFieldUpdateOperationsInput | boolean
    address?: AddressUncheckedUpdateManyWithoutUserNestedInput
    status?: EnumUserStatusFieldUpdateOperationsInput | UserStatus
    password?: StringFieldUpdateOperationsInput | string
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Invoice?: InvoiceUncheckedUpdateManyWithoutUserNestedInput
    InvoiceItem?: InvoiceItemUncheckedUpdateManyWithoutUserNestedInput
    ProjectResource?: ProjectResourceUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ProjectCreateManyAddressInput = {
    id?: number
    name: string
    referenceCode: string
    description?: string
    type: InvoiceItemType
    invoiceCycle: InvoiceCycle
    vendorId?: number
    accountId?: number
    budget?: Decimal | DecimalJsLike | number | string
    totalHours?: number | null
    averageRate?: Decimal | DecimalJsLike | number | string | null
    status: ProjectStatus
    createdDate?: Date | string
    lastUpdateDate?: Date | string
  }

  export type ProjectUpdateWithoutAddressInput = {
    name?: StringFieldUpdateOperationsInput | string
    referenceCode?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: EnumInvoiceItemTypeFieldUpdateOperationsInput | InvoiceItemType
    invoiceCycle?: EnumInvoiceCycleFieldUpdateOperationsInput | InvoiceCycle
    vendor?: VendorUpdateOneWithoutProjectNestedInput
    account?: AccountUpdateOneWithoutProjectNestedInput
    budget?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalHours?: NullableIntFieldUpdateOperationsInput | number | null
    averageRate?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | ProjectStatus
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Invoice?: InvoiceUpdateManyWithoutProjectNestedInput
    ProjectResource?: ProjectResourceUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutAddressInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    referenceCode?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: EnumInvoiceItemTypeFieldUpdateOperationsInput | InvoiceItemType
    invoiceCycle?: EnumInvoiceCycleFieldUpdateOperationsInput | InvoiceCycle
    vendorId?: IntFieldUpdateOperationsInput | number
    accountId?: IntFieldUpdateOperationsInput | number
    budget?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalHours?: NullableIntFieldUpdateOperationsInput | number | null
    averageRate?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | ProjectStatus
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Invoice?: InvoiceUncheckedUpdateManyWithoutProjectNestedInput
    ProjectResource?: ProjectResourceUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateManyWithoutProjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    referenceCode?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: EnumInvoiceItemTypeFieldUpdateOperationsInput | InvoiceItemType
    invoiceCycle?: EnumInvoiceCycleFieldUpdateOperationsInput | InvoiceCycle
    vendorId?: IntFieldUpdateOperationsInput | number
    accountId?: IntFieldUpdateOperationsInput | number
    budget?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalHours?: NullableIntFieldUpdateOperationsInput | number | null
    averageRate?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | ProjectStatus
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AddressCreateManyAccountInput = {
    id?: number
    type?: AddressType
    address1: string
    address2?: string | null
    address3?: string | null
    county?: string | null
    city: string
    state: string
    zipCode: string
    country: string
    primary?: boolean
    createdDate?: Date | string
    lastUpdateDate?: Date | string
    status: AddressStatus
    userId?: number | null
    vendorId?: number | null
  }

  export type InvoiceCreateManyAccountInput = {
    id?: number
    description?: string
    type: InvoiceType
    vendorId?: number | null
    projectId?: number | null
    invoiceDate?: Date | string
    dueDte?: Date | string | null
    transactionId?: string | null
    notes?: string | null
    total: Decimal | DecimalJsLike | number | string
    paidAmount?: Decimal | DecimalJsLike | number | string | null
    status: InvoiceStatus
    paymentTerms: PaymentTerms
    createdDate?: Date | string
    lastUpdateDate?: Date | string
    userId?: number | null
  }

  export type VendorCreateManyAccountInput = {
    id?: number
    name: string
    description?: string | null
    email: string
    phone?: string
    type?: VendorType
    ein: string
    bankDetails?: string | null
    status: VendorStatus
    createdDate?: Date | string
    accountContactName?: string | null
    accountContactEmail?: string | null
    accountContactPhone?: string | null
    lastUpdateDate?: Date | string
  }

  export type UserCreateManyAccountInput = {
    id?: number
    firstName: string
    lastName: string
    role?: Role
    email: string
    phone?: string
    vendorId?: number | null
    isTimeSheetEnabled?: boolean
    status?: UserStatus
    password?: string
    createdDate?: Date | string
    lastUpdateDate?: Date | string
  }

  export type ProjectCreateManyAccountInput = {
    id?: number
    name: string
    referenceCode: string
    description?: string
    type: InvoiceItemType
    invoiceCycle: InvoiceCycle
    addressId?: number
    vendorId?: number
    budget?: Decimal | DecimalJsLike | number | string
    totalHours?: number | null
    averageRate?: Decimal | DecimalJsLike | number | string | null
    status: ProjectStatus
    createdDate?: Date | string
    lastUpdateDate?: Date | string
  }

  export type AddressUpdateWithoutAccountInput = {
    type?: EnumAddressTypeFieldUpdateOperationsInput | AddressType
    address1?: StringFieldUpdateOperationsInput | string
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    address3?: NullableStringFieldUpdateOperationsInput | string | null
    county?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    zipCode?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    primary?: BoolFieldUpdateOperationsInput | boolean
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAddressStatusFieldUpdateOperationsInput | AddressStatus
    User?: UserUpdateOneWithoutAddressNestedInput
    Vendor?: VendorUpdateOneWithoutAddressNestedInput
    Project?: ProjectUpdateManyWithoutAddressNestedInput
  }

  export type AddressUncheckedUpdateWithoutAccountInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: EnumAddressTypeFieldUpdateOperationsInput | AddressType
    address1?: StringFieldUpdateOperationsInput | string
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    address3?: NullableStringFieldUpdateOperationsInput | string | null
    county?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    zipCode?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    primary?: BoolFieldUpdateOperationsInput | boolean
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAddressStatusFieldUpdateOperationsInput | AddressStatus
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    vendorId?: NullableIntFieldUpdateOperationsInput | number | null
    Project?: ProjectUncheckedUpdateManyWithoutAddressNestedInput
  }

  export type AddressUncheckedUpdateManyWithoutAddressInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: EnumAddressTypeFieldUpdateOperationsInput | AddressType
    address1?: StringFieldUpdateOperationsInput | string
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    address3?: NullableStringFieldUpdateOperationsInput | string | null
    county?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    zipCode?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    primary?: BoolFieldUpdateOperationsInput | boolean
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAddressStatusFieldUpdateOperationsInput | AddressStatus
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    vendorId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type InvoiceUpdateWithoutAccountInput = {
    description?: StringFieldUpdateOperationsInput | string
    type?: EnumInvoiceTypeFieldUpdateOperationsInput | InvoiceType
    vendor?: VendorUpdateOneWithoutInvoiceNestedInput
    project?: ProjectUpdateOneWithoutInvoiceNestedInput
    invoiceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDte?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    total?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paidAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: EnumInvoiceStatusFieldUpdateOperationsInput | InvoiceStatus
    paymentTerms?: EnumPaymentTermsFieldUpdateOperationsInput | PaymentTerms
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutInvoiceNestedInput
  }

  export type InvoiceUncheckedUpdateWithoutAccountInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    type?: EnumInvoiceTypeFieldUpdateOperationsInput | InvoiceType
    vendorId?: NullableIntFieldUpdateOperationsInput | number | null
    projectId?: NullableIntFieldUpdateOperationsInput | number | null
    invoiceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDte?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    total?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paidAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: EnumInvoiceStatusFieldUpdateOperationsInput | InvoiceStatus
    paymentTerms?: EnumPaymentTermsFieldUpdateOperationsInput | PaymentTerms
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type InvoiceUncheckedUpdateManyWithoutInvoiceInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    type?: EnumInvoiceTypeFieldUpdateOperationsInput | InvoiceType
    vendorId?: NullableIntFieldUpdateOperationsInput | number | null
    projectId?: NullableIntFieldUpdateOperationsInput | number | null
    invoiceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDte?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    total?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paidAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: EnumInvoiceStatusFieldUpdateOperationsInput | InvoiceStatus
    paymentTerms?: EnumPaymentTermsFieldUpdateOperationsInput | PaymentTerms
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type VendorUpdateWithoutAccountInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    type?: EnumVendorTypeFieldUpdateOperationsInput | VendorType
    address?: AddressUpdateManyWithoutVendorNestedInput
    ein?: StringFieldUpdateOperationsInput | string
    bankDetails?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumVendorStatusFieldUpdateOperationsInput | VendorStatus
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    accountContactName?: NullableStringFieldUpdateOperationsInput | string | null
    accountContactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    accountContactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Invoice?: InvoiceUpdateManyWithoutVendorNestedInput
    User?: UserUpdateManyWithoutVendorNestedInput
    Project?: ProjectUpdateManyWithoutVendorNestedInput
  }

  export type VendorUncheckedUpdateWithoutAccountInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    type?: EnumVendorTypeFieldUpdateOperationsInput | VendorType
    address?: AddressUncheckedUpdateManyWithoutVendorNestedInput
    ein?: StringFieldUpdateOperationsInput | string
    bankDetails?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumVendorStatusFieldUpdateOperationsInput | VendorStatus
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    accountContactName?: NullableStringFieldUpdateOperationsInput | string | null
    accountContactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    accountContactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Invoice?: InvoiceUncheckedUpdateManyWithoutVendorNestedInput
    User?: UserUncheckedUpdateManyWithoutVendorNestedInput
    Project?: ProjectUncheckedUpdateManyWithoutVendorNestedInput
  }

  export type VendorUncheckedUpdateManyWithoutVendorInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    type?: EnumVendorTypeFieldUpdateOperationsInput | VendorType
    ein?: StringFieldUpdateOperationsInput | string
    bankDetails?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumVendorStatusFieldUpdateOperationsInput | VendorStatus
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    accountContactName?: NullableStringFieldUpdateOperationsInput | string | null
    accountContactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    accountContactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpdateWithoutAccountInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    vendor?: VendorUpdateOneWithoutUserNestedInput
    isTimeSheetEnabled?: BoolFieldUpdateOperationsInput | boolean
    address?: AddressUpdateManyWithoutUserNestedInput
    userAttributes?: UserAttributesUpdateManyWithoutUserNestedInput
    status?: EnumUserStatusFieldUpdateOperationsInput | UserStatus
    password?: StringFieldUpdateOperationsInput | string
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Invoice?: InvoiceUpdateManyWithoutUserNestedInput
    InvoiceItem?: InvoiceItemUpdateManyWithoutUserNestedInput
    ProjectResource?: ProjectResourceUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAccountInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    vendorId?: NullableIntFieldUpdateOperationsInput | number | null
    isTimeSheetEnabled?: BoolFieldUpdateOperationsInput | boolean
    address?: AddressUncheckedUpdateManyWithoutUserNestedInput
    userAttributes?: UserAttributesUncheckedUpdateManyWithoutUserNestedInput
    status?: EnumUserStatusFieldUpdateOperationsInput | UserStatus
    password?: StringFieldUpdateOperationsInput | string
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Invoice?: InvoiceUncheckedUpdateManyWithoutUserNestedInput
    InvoiceItem?: InvoiceItemUncheckedUpdateManyWithoutUserNestedInput
    ProjectResource?: ProjectResourceUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    vendorId?: NullableIntFieldUpdateOperationsInput | number | null
    isTimeSheetEnabled?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumUserStatusFieldUpdateOperationsInput | UserStatus
    password?: StringFieldUpdateOperationsInput | string
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectUpdateWithoutAccountInput = {
    name?: StringFieldUpdateOperationsInput | string
    referenceCode?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: EnumInvoiceItemTypeFieldUpdateOperationsInput | InvoiceItemType
    invoiceCycle?: EnumInvoiceCycleFieldUpdateOperationsInput | InvoiceCycle
    address?: AddressUpdateOneWithoutProjectNestedInput
    vendor?: VendorUpdateOneWithoutProjectNestedInput
    budget?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalHours?: NullableIntFieldUpdateOperationsInput | number | null
    averageRate?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | ProjectStatus
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Invoice?: InvoiceUpdateManyWithoutProjectNestedInput
    ProjectResource?: ProjectResourceUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutAccountInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    referenceCode?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: EnumInvoiceItemTypeFieldUpdateOperationsInput | InvoiceItemType
    invoiceCycle?: EnumInvoiceCycleFieldUpdateOperationsInput | InvoiceCycle
    addressId?: IntFieldUpdateOperationsInput | number
    vendorId?: IntFieldUpdateOperationsInput | number
    budget?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalHours?: NullableIntFieldUpdateOperationsInput | number | null
    averageRate?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | ProjectStatus
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Invoice?: InvoiceUncheckedUpdateManyWithoutProjectNestedInput
    ProjectResource?: ProjectResourceUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type AddressCreateManyVendorInput = {
    id?: number
    type?: AddressType
    address1: string
    address2?: string | null
    address3?: string | null
    county?: string | null
    city: string
    state: string
    zipCode: string
    country: string
    primary?: boolean
    createdDate?: Date | string
    lastUpdateDate?: Date | string
    status: AddressStatus
    accountId?: number
    userId?: number | null
  }

  export type InvoiceCreateManyVendorInput = {
    id?: number
    description?: string
    type: InvoiceType
    accountId?: number | null
    projectId?: number | null
    invoiceDate?: Date | string
    dueDte?: Date | string | null
    transactionId?: string | null
    notes?: string | null
    total: Decimal | DecimalJsLike | number | string
    paidAmount?: Decimal | DecimalJsLike | number | string | null
    status: InvoiceStatus
    paymentTerms: PaymentTerms
    createdDate?: Date | string
    lastUpdateDate?: Date | string
    userId?: number | null
  }

  export type UserCreateManyVendorInput = {
    id?: number
    firstName: string
    lastName: string
    role?: Role
    email: string
    phone?: string
    accountId?: number | null
    isTimeSheetEnabled?: boolean
    status?: UserStatus
    password?: string
    createdDate?: Date | string
    lastUpdateDate?: Date | string
  }

  export type ProjectCreateManyVendorInput = {
    id?: number
    name: string
    referenceCode: string
    description?: string
    type: InvoiceItemType
    invoiceCycle: InvoiceCycle
    addressId?: number
    accountId?: number
    budget?: Decimal | DecimalJsLike | number | string
    totalHours?: number | null
    averageRate?: Decimal | DecimalJsLike | number | string | null
    status: ProjectStatus
    createdDate?: Date | string
    lastUpdateDate?: Date | string
  }

  export type AddressUpdateWithoutVendorInput = {
    type?: EnumAddressTypeFieldUpdateOperationsInput | AddressType
    address1?: StringFieldUpdateOperationsInput | string
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    address3?: NullableStringFieldUpdateOperationsInput | string | null
    county?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    zipCode?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    primary?: BoolFieldUpdateOperationsInput | boolean
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAddressStatusFieldUpdateOperationsInput | AddressStatus
    account?: AccountUpdateOneRequiredWithoutAddressNestedInput
    User?: UserUpdateOneWithoutAddressNestedInput
    Project?: ProjectUpdateManyWithoutAddressNestedInput
  }

  export type AddressUncheckedUpdateWithoutVendorInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: EnumAddressTypeFieldUpdateOperationsInput | AddressType
    address1?: StringFieldUpdateOperationsInput | string
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    address3?: NullableStringFieldUpdateOperationsInput | string | null
    county?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    zipCode?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    primary?: BoolFieldUpdateOperationsInput | boolean
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAddressStatusFieldUpdateOperationsInput | AddressStatus
    accountId?: IntFieldUpdateOperationsInput | number
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    Project?: ProjectUncheckedUpdateManyWithoutAddressNestedInput
  }

  export type InvoiceUpdateWithoutVendorInput = {
    description?: StringFieldUpdateOperationsInput | string
    type?: EnumInvoiceTypeFieldUpdateOperationsInput | InvoiceType
    account?: AccountUpdateOneWithoutInvoiceNestedInput
    project?: ProjectUpdateOneWithoutInvoiceNestedInput
    invoiceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDte?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    total?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paidAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: EnumInvoiceStatusFieldUpdateOperationsInput | InvoiceStatus
    paymentTerms?: EnumPaymentTermsFieldUpdateOperationsInput | PaymentTerms
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutInvoiceNestedInput
  }

  export type InvoiceUncheckedUpdateWithoutVendorInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    type?: EnumInvoiceTypeFieldUpdateOperationsInput | InvoiceType
    accountId?: NullableIntFieldUpdateOperationsInput | number | null
    projectId?: NullableIntFieldUpdateOperationsInput | number | null
    invoiceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDte?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    total?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paidAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: EnumInvoiceStatusFieldUpdateOperationsInput | InvoiceStatus
    paymentTerms?: EnumPaymentTermsFieldUpdateOperationsInput | PaymentTerms
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UserUpdateWithoutVendorInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    account?: AccountUpdateOneWithoutUserNestedInput
    isTimeSheetEnabled?: BoolFieldUpdateOperationsInput | boolean
    address?: AddressUpdateManyWithoutUserNestedInput
    userAttributes?: UserAttributesUpdateManyWithoutUserNestedInput
    status?: EnumUserStatusFieldUpdateOperationsInput | UserStatus
    password?: StringFieldUpdateOperationsInput | string
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Invoice?: InvoiceUpdateManyWithoutUserNestedInput
    InvoiceItem?: InvoiceItemUpdateManyWithoutUserNestedInput
    ProjectResource?: ProjectResourceUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutVendorInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    accountId?: NullableIntFieldUpdateOperationsInput | number | null
    isTimeSheetEnabled?: BoolFieldUpdateOperationsInput | boolean
    address?: AddressUncheckedUpdateManyWithoutUserNestedInput
    userAttributes?: UserAttributesUncheckedUpdateManyWithoutUserNestedInput
    status?: EnumUserStatusFieldUpdateOperationsInput | UserStatus
    password?: StringFieldUpdateOperationsInput | string
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Invoice?: InvoiceUncheckedUpdateManyWithoutUserNestedInput
    InvoiceItem?: InvoiceItemUncheckedUpdateManyWithoutUserNestedInput
    ProjectResource?: ProjectResourceUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ProjectUpdateWithoutVendorInput = {
    name?: StringFieldUpdateOperationsInput | string
    referenceCode?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: EnumInvoiceItemTypeFieldUpdateOperationsInput | InvoiceItemType
    invoiceCycle?: EnumInvoiceCycleFieldUpdateOperationsInput | InvoiceCycle
    address?: AddressUpdateOneWithoutProjectNestedInput
    account?: AccountUpdateOneWithoutProjectNestedInput
    budget?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalHours?: NullableIntFieldUpdateOperationsInput | number | null
    averageRate?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | ProjectStatus
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Invoice?: InvoiceUpdateManyWithoutProjectNestedInput
    ProjectResource?: ProjectResourceUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutVendorInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    referenceCode?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: EnumInvoiceItemTypeFieldUpdateOperationsInput | InvoiceItemType
    invoiceCycle?: EnumInvoiceCycleFieldUpdateOperationsInput | InvoiceCycle
    addressId?: IntFieldUpdateOperationsInput | number
    accountId?: IntFieldUpdateOperationsInput | number
    budget?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalHours?: NullableIntFieldUpdateOperationsInput | number | null
    averageRate?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | ProjectStatus
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Invoice?: InvoiceUncheckedUpdateManyWithoutProjectNestedInput
    ProjectResource?: ProjectResourceUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type InvoiceCreateManyProjectInput = {
    id?: number
    description?: string
    type: InvoiceType
    vendorId?: number | null
    accountId?: number | null
    invoiceDate?: Date | string
    dueDte?: Date | string | null
    transactionId?: string | null
    notes?: string | null
    total: Decimal | DecimalJsLike | number | string
    paidAmount?: Decimal | DecimalJsLike | number | string | null
    status: InvoiceStatus
    paymentTerms: PaymentTerms
    createdDate?: Date | string
    lastUpdateDate?: Date | string
    userId?: number | null
  }

  export type ProjectResourceCreateManyProjectInput = {
    id?: number
    userId?: number | null
    unitPrice?: Decimal | DecimalJsLike | number | string | null
    currency?: Currency | null
    quantity?: number | null
    uom?: UnitOfMeasure | null
    budgetAllocated?: Decimal | DecimalJsLike | number | string | null
  }

  export type InvoiceUpdateWithoutProjectInput = {
    description?: StringFieldUpdateOperationsInput | string
    type?: EnumInvoiceTypeFieldUpdateOperationsInput | InvoiceType
    vendor?: VendorUpdateOneWithoutInvoiceNestedInput
    account?: AccountUpdateOneWithoutInvoiceNestedInput
    invoiceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDte?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    total?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paidAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: EnumInvoiceStatusFieldUpdateOperationsInput | InvoiceStatus
    paymentTerms?: EnumPaymentTermsFieldUpdateOperationsInput | PaymentTerms
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutInvoiceNestedInput
  }

  export type InvoiceUncheckedUpdateWithoutProjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    type?: EnumInvoiceTypeFieldUpdateOperationsInput | InvoiceType
    vendorId?: NullableIntFieldUpdateOperationsInput | number | null
    accountId?: NullableIntFieldUpdateOperationsInput | number | null
    invoiceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDte?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    total?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paidAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: EnumInvoiceStatusFieldUpdateOperationsInput | InvoiceStatus
    paymentTerms?: EnumPaymentTermsFieldUpdateOperationsInput | PaymentTerms
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ProjectResourceUpdateWithoutProjectInput = {
    user?: UserUpdateOneWithoutProjectResourceNestedInput
    unitPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    currency?: NullableEnumCurrencyFieldUpdateOperationsInput | Currency | null
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    uom?: NullableEnumUnitOfMeasureFieldUpdateOperationsInput | UnitOfMeasure | null
    budgetAllocated?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type ProjectResourceUncheckedUpdateWithoutProjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    unitPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    currency?: NullableEnumCurrencyFieldUpdateOperationsInput | Currency | null
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    uom?: NullableEnumUnitOfMeasureFieldUpdateOperationsInput | UnitOfMeasure | null
    budgetAllocated?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type ProjectResourceUncheckedUpdateManyWithoutProjectResourceInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    unitPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    currency?: NullableEnumCurrencyFieldUpdateOperationsInput | Currency | null
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    uom?: NullableEnumUnitOfMeasureFieldUpdateOperationsInput | UnitOfMeasure | null
    budgetAllocated?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type AddressCreateManyUserInput = {
    id?: number
    type?: AddressType
    address1: string
    address2?: string | null
    address3?: string | null
    county?: string | null
    city: string
    state: string
    zipCode: string
    country: string
    primary?: boolean
    createdDate?: Date | string
    lastUpdateDate?: Date | string
    status: AddressStatus
    accountId?: number
    vendorId?: number | null
  }

  export type UserAttributesCreateManyUserInput = {
    id?: number
    userAttributeKey?: UserAttributeKeys
    userAttributeValue?: string | null
    createdDate?: Date | string
    lastUpdateDate?: Date | string
  }

  export type InvoiceCreateManyUserInput = {
    id?: number
    description?: string
    type: InvoiceType
    vendorId?: number | null
    accountId?: number | null
    projectId?: number | null
    invoiceDate?: Date | string
    dueDte?: Date | string | null
    transactionId?: string | null
    notes?: string | null
    total: Decimal | DecimalJsLike | number | string
    paidAmount?: Decimal | DecimalJsLike | number | string | null
    status: InvoiceStatus
    paymentTerms: PaymentTerms
    createdDate?: Date | string
    lastUpdateDate?: Date | string
  }

  export type InvoiceItemCreateManyUserInput = {
    id?: number
    description?: string | null
    type: InvoiceItemType
    unitPrice?: Decimal | DecimalJsLike | number | string
    currency: Currency
    quantity?: number
    uom: UnitOfMeasure
    total?: Decimal | DecimalJsLike | number | string
    status: InvoiceStatus
    generalNote?: string | null
    fromDate?: Date | string | null
    toDate?: Date | string | null
    createdDate?: Date | string
    lastUpdateDate?: Date | string
  }

  export type ProjectResourceCreateManyUserInput = {
    id?: number
    projectId?: number | null
    unitPrice?: Decimal | DecimalJsLike | number | string | null
    currency?: Currency | null
    quantity?: number | null
    uom?: UnitOfMeasure | null
    budgetAllocated?: Decimal | DecimalJsLike | number | string | null
  }

  export type AddressUpdateWithoutUserInput = {
    type?: EnumAddressTypeFieldUpdateOperationsInput | AddressType
    address1?: StringFieldUpdateOperationsInput | string
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    address3?: NullableStringFieldUpdateOperationsInput | string | null
    county?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    zipCode?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    primary?: BoolFieldUpdateOperationsInput | boolean
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAddressStatusFieldUpdateOperationsInput | AddressStatus
    account?: AccountUpdateOneRequiredWithoutAddressNestedInput
    Vendor?: VendorUpdateOneWithoutAddressNestedInput
    Project?: ProjectUpdateManyWithoutAddressNestedInput
  }

  export type AddressUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: EnumAddressTypeFieldUpdateOperationsInput | AddressType
    address1?: StringFieldUpdateOperationsInput | string
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    address3?: NullableStringFieldUpdateOperationsInput | string | null
    county?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    zipCode?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    primary?: BoolFieldUpdateOperationsInput | boolean
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAddressStatusFieldUpdateOperationsInput | AddressStatus
    accountId?: IntFieldUpdateOperationsInput | number
    vendorId?: NullableIntFieldUpdateOperationsInput | number | null
    Project?: ProjectUncheckedUpdateManyWithoutAddressNestedInput
  }

  export type UserAttributesUpdateWithoutUserInput = {
    userAttributeKey?: EnumUserAttributeKeysFieldUpdateOperationsInput | UserAttributeKeys
    userAttributeValue?: NullableStringFieldUpdateOperationsInput | string | null
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserAttributesUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    userAttributeKey?: EnumUserAttributeKeysFieldUpdateOperationsInput | UserAttributeKeys
    userAttributeValue?: NullableStringFieldUpdateOperationsInput | string | null
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserAttributesUncheckedUpdateManyWithoutUserAttributesInput = {
    id?: IntFieldUpdateOperationsInput | number
    userAttributeKey?: EnumUserAttributeKeysFieldUpdateOperationsInput | UserAttributeKeys
    userAttributeValue?: NullableStringFieldUpdateOperationsInput | string | null
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InvoiceUpdateWithoutUserInput = {
    description?: StringFieldUpdateOperationsInput | string
    type?: EnumInvoiceTypeFieldUpdateOperationsInput | InvoiceType
    vendor?: VendorUpdateOneWithoutInvoiceNestedInput
    account?: AccountUpdateOneWithoutInvoiceNestedInput
    project?: ProjectUpdateOneWithoutInvoiceNestedInput
    invoiceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDte?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    total?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paidAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: EnumInvoiceStatusFieldUpdateOperationsInput | InvoiceStatus
    paymentTerms?: EnumPaymentTermsFieldUpdateOperationsInput | PaymentTerms
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InvoiceUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    type?: EnumInvoiceTypeFieldUpdateOperationsInput | InvoiceType
    vendorId?: NullableIntFieldUpdateOperationsInput | number | null
    accountId?: NullableIntFieldUpdateOperationsInput | number | null
    projectId?: NullableIntFieldUpdateOperationsInput | number | null
    invoiceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDte?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    total?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paidAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: EnumInvoiceStatusFieldUpdateOperationsInput | InvoiceStatus
    paymentTerms?: EnumPaymentTermsFieldUpdateOperationsInput | PaymentTerms
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InvoiceItemUpdateWithoutUserInput = {
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumInvoiceItemTypeFieldUpdateOperationsInput | InvoiceItemType
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: EnumCurrencyFieldUpdateOperationsInput | Currency
    quantity?: IntFieldUpdateOperationsInput | number
    uom?: EnumUnitOfMeasureFieldUpdateOperationsInput | UnitOfMeasure
    total?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumInvoiceStatusFieldUpdateOperationsInput | InvoiceStatus
    generalNote?: NullableStringFieldUpdateOperationsInput | string | null
    fromDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    toDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InvoiceItemUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumInvoiceItemTypeFieldUpdateOperationsInput | InvoiceItemType
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: EnumCurrencyFieldUpdateOperationsInput | Currency
    quantity?: IntFieldUpdateOperationsInput | number
    uom?: EnumUnitOfMeasureFieldUpdateOperationsInput | UnitOfMeasure
    total?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumInvoiceStatusFieldUpdateOperationsInput | InvoiceStatus
    generalNote?: NullableStringFieldUpdateOperationsInput | string | null
    fromDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    toDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InvoiceItemUncheckedUpdateManyWithoutInvoiceItemInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumInvoiceItemTypeFieldUpdateOperationsInput | InvoiceItemType
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: EnumCurrencyFieldUpdateOperationsInput | Currency
    quantity?: IntFieldUpdateOperationsInput | number
    uom?: EnumUnitOfMeasureFieldUpdateOperationsInput | UnitOfMeasure
    total?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumInvoiceStatusFieldUpdateOperationsInput | InvoiceStatus
    generalNote?: NullableStringFieldUpdateOperationsInput | string | null
    fromDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    toDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdateDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectResourceUpdateWithoutUserInput = {
    project?: ProjectUpdateOneWithoutProjectResourceNestedInput
    unitPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    currency?: NullableEnumCurrencyFieldUpdateOperationsInput | Currency | null
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    uom?: NullableEnumUnitOfMeasureFieldUpdateOperationsInput | UnitOfMeasure | null
    budgetAllocated?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type ProjectResourceUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    projectId?: NullableIntFieldUpdateOperationsInput | number | null
    unitPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    currency?: NullableEnumCurrencyFieldUpdateOperationsInput | Currency | null
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    uom?: NullableEnumUnitOfMeasureFieldUpdateOperationsInput | UnitOfMeasure | null
    budgetAllocated?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}