// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Address {
  id             Int           @id @default(autoincrement())
  type           AddressType   @default(D)
  address1       String
  addressName    String        @default("")
  address2       String?
  address3       String?
  county         String?
  city           String
  state          String
  zipCode        String
  country        String
  primary        Boolean       @default(false)
  createdDate    DateTime      @default(now())
  lastUpdateDate DateTime      @updatedAt
  status         AddressStatus
  account        Account       @relation(fields: [accountId], references: [id])
  accountId      Int           @default(0)
  User           User?         @relation(fields: [userId], references: [id])
  userId         Int?
  Vendor         Vendor?       @relation(fields: [vendorId], references: [id])
  vendorId       Int?
  project        Project[]

  @@index([accountId])
  @@index([accountId, vendorId, userId])
  @@index([vendorId, userId])
}

model Account {
  id             Int             @id @default(autoincrement())
  name           String
  description    String
  ein            String          @unique
  bankId         Int?
  email          String
  phone          String          @default("111-111-1111")
  status         AccountStatus
  createdDate    DateTime        @default(now())
  lastUpdateDate DateTime        @updatedAt
  address        Address[]
  invoice        Invoice[]
  vendor         Vendor[]
  user           User[]
  project        Project[]
  accountConfig  AccountConfig[]
}

model Vendor {
  id                  Int           @id @default(autoincrement())
  name                String
  description         String?
  email               String
  phone               String        @default("111-111-1111")
  type                VendorType    @default(Staffing)
  address             Address[]
  account             Account?      @relation(fields: [accountId], references: [id])
  accountId           Int?          @default(0)
  ein                 String        @unique
  bankDetails         String?
  status              VendorStatus
  createdDate         DateTime      @default(now())
  accountContactName  String?
  accountContactEmail String?
  accountContactPhone String?
  lastUpdateDate      DateTime      @updatedAt
  invoice             Invoice[]
  user                User[]
  project             Project[]
  vendorUsers         VendorUsers[]
}

model ProjectResource {
  id                  Int            @id @default(autoincrement())
  project             Project?       @relation(fields: [projectId], references: [id])
  projectId           Int?           @default(1)
  user                User?          @relation(fields: [userId], references: [id])
  userId              Int?           @default(1)
  unitPrice           Decimal?
  currency            Currency?
  quantity            Int?
  billable            Boolean        @default(false)
  uom                 UnitOfMeasure?
  budgetAllocated     Decimal?       @default(0)
  usedBudget          Decimal?       @default(0)
  remainingBudget     Decimal?       @default(0)
  isTimesheetApprover Boolean        @default(false)
  fromDate            DateTime?
  toDate              DateTime?

  @@unique([projectId, userId, billable])
}

model Invoice {
  id                 Int                  @id @default(autoincrement())
  description        String               @default("")
  type               InvoiceType
  vendor             Vendor?              @relation(fields: [vendorId], references: [id])
  vendorId           Int?                 @default(0)
  account            Account?             @relation(fields: [accountId], references: [id])
  accountId          Int?                 @default(0)
  project            Project?             @relation(fields: [projectId], references: [id])
  projectId          Int?                 @default(0)
  invoiceDate        DateTime             @default(now())
  dueDte             DateTime?
  invoiceEmailTo     String[]
  total              Decimal
  paidAmount         Decimal?
  status             InvoiceStatus
  paymentTerms       PaymentTerms
  createdDate        DateTime             @default(now())
  lastUpdateDate     DateTime             @updatedAt
  invoiceItems       InvoiceItem[]
  invoiceTransaction InvoiceTransaction[]
}

model InvoiceItem {
  id               Int               @id @default(autoincrement())
  description      String?           @default("")
  type             InvoiceItemType
  unitPrice        Decimal           @default(0)
  currency         Currency
  quantity         Int               @default(1)
  uom              UnitOfMeasure
  total            Decimal           @default(0)
  status           InvoiceStatus
  generalNote      String?
  user             User?             @relation(fields: [userId], references: [id])
  userId           Int?
  timesheetEntry   TimesheetEntries? @relation(fields: [timesheetEntryId], references: [id])
  timesheetEntryId Int?
  invoice          Invoice?          @relation(fields: [invoiceId], references: [id])
  invoiceId        Int?
  fromDate         DateTime?
  toDate           DateTime?
  createdDate      DateTime          @default(now())
  lastUpdateDate   DateTime          @updatedAt
  markForDelete    Boolean           @default(false)
}

model InvoiceTransaction {
  id              Int                      @id @default(autoincrement())
  amount          Decimal
  transactionId   String
  transactionData String
  invoice         Invoice?                 @relation(fields: [invoiceId], references: [id])
  invoiceId       Int?
  status          InvoiceTransactionStatus
  createdDate     DateTime                 @default(now())
  lastUpdatedDate DateTime                 @updatedAt
}

model Project {
  id                        Int               @id @default(autoincrement())
  name                      String
  referenceCode             String
  description               String            @default("")
  type                      InvoiceItemType
  invoiceCycle              InvoiceCycle
  addressId                 Int               @default(0)
  address                   Address?          @relation(fields: [addressId], references: [id])
  vendorId                  Int               @default(0)
  vendor                    Vendor?           @relation(fields: [vendorId], references: [id])
  accountId                 Int               @default(0)
  account                   Account?          @relation(fields: [accountId], references: [id])
  budget                    Decimal           @default(0)
  miscBudget                Decimal?          @default(0)
  usedMiscBudget            Decimal?          @default(0)
  remainingBudgetToAllocate Decimal           @default(0)
  usedBudget                Decimal           @default(0)
  totalHours                Int?              @default(0)
  averageRate               Decimal?
  timeSheetNotesRequired    Boolean           @default(false)
  status                    ProjectStatus
  contactName               String?
  contactEmail              String?
  contactPhone              String?
  paymentTerms              PaymentTerms      @default(Net60)
  createdDate               DateTime          @default(now())
  lastUpdateDate            DateTime          @updatedAt
  invoice                   Invoice[]
  projectResource           ProjectResource[]

  timesheetEntries TimesheetEntries[]
  expense          Expense[]
}

model User {
  id                 Int                @id @default(autoincrement())
  firstName          String
  lastName           String
  type               UserType           @default(Employee)
  userRole           Role[]
  email              String             @unique
  phone              String             @default("111-111-1111")
  account            Account?           @relation(fields: [accountId], references: [id])
  accountId          Int?               @default(0)
  vendor             Vendor?            @relation(fields: [vendorId], references: [id])
  vendorId           Int?               @default(0)
  isTimeSheetEnabled Boolean            @default(false)
  address            Address[]
  userAttributes     UserAttributes[]
  status             UserStatus         @default(Active)
  password           String             @default("passw0rd")
  passwordExpired    Boolean            @default(false)
  passwordRetries    Int                @default(1)
  passwordSalt       String             @default("123456xyz")
  lastSignIn         DateTime           @default(now())
  createdDate        DateTime           @default(now())
  lastUpdateDate     DateTime           @updatedAt
  invoiceItem        InvoiceItem[]
  projectResource    ProjectResource[]
  timesheet          Timesheet[]
  timesheetEntries   TimesheetEntries[]
  notes              Notes[]
  vendorUsers        VendorUsers[]
  expenses           Expense[]          @relation("CreatedExpenses")
  expensesApproved   Expense[]          @relation("ApprovedExpenses")
  Document           Document[]
}

model UserAttributes {
  id             Int      @id @default(autoincrement())
  key            String
  name           String
  value          String?
  createdDate    DateTime @default(now())
  lastUpdateDate DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id])
  userId Int
}

model VendorUsers {
  id             Int              @id @default(autoincrement())
  vendor         Vendor?          @relation(fields: [vendorId], references: [id])
  vendorId       Int?             @default(0)
  user           User?            @relation(fields: [userId], references: [id])
  userId         Int?             @default(0)
  status         VendorUserStatus
  createdDate    DateTime         @default(now())
  lastUpdateDate DateTime         @updatedAt

  @@unique([vendorId, userId])
}

model Timesheet {
  id               Int                @id @default(autoincrement())
  name             String             @default("")
  type             TimesheetType
  user             User?              @relation(fields: [userId], references: [id])
  userId           Int?               @default(1)
  status           TimesheetStatus
  createdDate      DateTime           @default(now())
  lastUpdateDate   DateTime           @updatedAt
  timesheetEntries TimesheetEntries[]
  startDate        DateTime?

  @@unique([userId, name])
}

model Expense {
  id                 Int                  @id @default(autoincrement())
  name               String
  description        String?
  billable           Boolean
  total              Decimal              @default(0)
  paidAmount         Decimal              @default(0)
  project            Project?             @relation(fields: [projectId], references: [id])
  projectId          Int?                 @default(1)
  status             ExpenseStatus
  approvedBy         User?                @relation("ApprovedExpenses", fields: [approvedById], references: [id])
  approvedById       Int?                 @default(1)
  approvedDate       DateTime?
  user               User?                @relation("CreatedExpenses", fields: [userId], references: [id])
  userId             Int?                 @default(1)
  createdDate        DateTime             @default(now())
  lastUpdateDate     DateTime             @updatedAt
  expenseTransaction ExpenseTransaction[]
  expenseEntries     ExpenseEntry[]
}

model ExpenseTransaction {
  id              Int                      @id @default(autoincrement())
  amount          Decimal
  transactionId   String
  transactionData String
  expense         Expense?                 @relation(fields: [expenseId], references: [id])
  expenseId       Int?
  status          ExpenseTransactionStatus
  createdDate     DateTime                 @default(now())
  lastUpdatedDate DateTime                 @updatedAt
}

model ExpenseEntry {
  id             Int                @id @default(autoincrement())
  type           ExpenseType
  billable       Boolean
  expenseDate    DateTime
  date           DateTime?
  amount         Decimal
  attachments    String[]
  status         ExpenseEntryStatus
  notes          String?
  createdDate    DateTime           @default(now())
  lastUpdateDate DateTime           @updatedAt
  expense        Expense?           @relation(fields: [expenseId], references: [id])
  expenseId      Int?
}

model Calendar {
  dateDimId            Int      @id
  dateActual           DateTime
  epoch                BigInt
  daySuffix            String
  dayName              String
  dayOfWeek            Int
  dayOfMonth           Int
  dayOfQuarter         Int
  dayOfYear            Int
  weekOfMonth          Int
  weekOfYear           Int
  weekOfYearISO        String
  monthActual          Int
  monthName            String
  monthNameAbbreviated String
  quarterActual        Int
  yearActual           Int
  firstDayOfWeek       DateTime
  lastDayOfWeek        DateTime
  firstDayOfMonth      DateTime
  lastDayOfMonth       DateTime
  firstDayOfQuarter    DateTime
  lastDayOfQuarter     DateTime
  firstDayOfYear       DateTime
  lastDayOfYear        DateTime
  mmyyyy               String
  mmddyyyy             String
  mmdd                 String
  weekend              Boolean
  currentWeekDates     Json

  @@index([dateActual])
}

model Document {
  id             Int            @id @default(autoincrement())
  name           String
  type           DocumentType
  typeId         Int
  urlPath        String
  status         DocumentStatus
  createdUser    User?          @relation(fields: [createdBy], references: [id])
  createdBy      Int?
  createdDate    DateTime       @default(now())
  lastUpdateDate DateTime       @default(now()) @updatedAt

  @@index([createdBy])
  @@index([createdBy, status])
  @@index([type])
  @@index([type, status])
  @@index([type, typeId])
  @@index([type, typeId, status])
}

model TimesheetEntries {
  id             Int             @id @default(autoincrement())
  timesheet      Timesheet?      @relation(fields: [timesheetId], references: [id])
  timesheetId    Int?
  project        Project?        @relation(fields: [projectId], references: [id])
  projectId      Int?            @default(1)
  status         TimesheetStatus
  approvedDate   DateTime?
  approvedUser   User?           @relation(fields: [approvedBy], references: [id])
  approvedBy     Int?
  entries        Json
  unitPrice      Decimal?
  createdDate    DateTime        @default(now())
  lastUpdateDate DateTime        @default(now()) @updatedAt
  InvoiceItem    InvoiceItem[]
}

model Notes {
  id              Int        @id @default(autoincrement())
  mode            NotesMode  @default(New)
  type            NotesType
  subTyle         NotesType?
  typeId          Int
  notes           String
  replies         Notes[]    @relation("replies")
  repliesRelation Notes[]    @relation("replies")
  createdUser     User?      @relation(fields: [createdBy], references: [id])
  createdBy       Int?
  createdDate     DateTime   @default(now())
  lastUpdateDate  DateTime   @default(now()) @updatedAt

  @@index([type, typeId])
}

model AppConfig {
  id             Int          @id @default(autoincrement())
  name           String
  configKey      String
  configValue    String
  status         ConfigStatus
  createdBy      String
  createdDate    DateTime     @default(now())
  lastUpdateDate DateTime     @default(now()) @updatedAt
}

model AccountConfig {
  id             Int          @id @default(autoincrement())
  name           String
  accountId      Int          @default(0)
  account        Account?     @relation(fields: [accountId], references: [id])
  configKey      String
  configValue    String
  status         ConfigStatus
  createdBy      String
  createdDate    DateTime     @default(now())
  lastUpdateDate DateTime     @default(now()) @updatedAt
}

enum AddressType {
  D
  U
  A
  V
}

enum UserAttributeKeys {
  default
  rate
  startDate
  endDate
}

enum UserStatus {
  Active
  Inactive
  Approved
  Rejected
  Error
}

enum Role {
  SUPER_ADMIN
  ACCOUNT_ADMIN
  ACCOUNT_VENDOR_REP
  ACCOUNT_USER
  ACCOUNT_VENDOR_EMPLOYEE
  ACCOUNT_VENDOR_CONTRACTOR
  ACCOUNT_MANAGER
  DEVELOPER
}

enum VendorType {
  Staffing
  Product
  Project
}

enum VendorStatus {
  Approved
  Rejected
  Active
  Inactive
  Fraud
}

enum AccountStatus {
  Active
  Inactive
  Fraud
}

enum AddressStatus {
  A
  I
  D
}

enum InvoiceType {
  General
  Staffing
  Product
  Project
  Timesheet
  Expense
  Misc
}

enum InvoiceCycle {
  Weekly
  BiWeekly
  Monthly
  Quarterly
  HalfYearly
  Yearly
}

enum InvoiceStatus {
  Draft
  Submitted
  Pending
  PartiallyPaid
  Paid
  Cancelled
}

enum PaymentTerms {
  Net7
  Net15
  Net30
  Net45
  Net60
  Net90
  Net180
  Net365
}

enum InvoiceItemType {
  General
  Staffing
  Product
  Project
  Services
  Timesheet
  Expense
  Misc
}

enum UnitOfMeasure {
  Hours
  Item
}

enum Currency {
  USD
  INR
}

enum ProjectStatus {
  Created
  Open
  Closed
  Settled
}

enum TimesheetType {
  Weekly
  Monthly
  Quarterly
}

enum TimesheetStatus {
  Draft
  Saved
  Submitted
  Approved
  Rejected
  Invoiced
}

enum DocumentType {
  Account
  Invoice
  Vendor
  Project
  User
  TimesheetEntry
  TimesheetApproval
  Expense
  ExpenseEntry
}

enum NotesType {
  Timesheet
  Account
  Invoice
  Vendor
  Project
  User
  TimesheetEntry
  TimesheetApproval
  Expense
  ExpenseEntry
}

enum ConfigStatus {
  Active
  Inactive
  MarkForDelete
}

enum InvoiceTransactionStatus {
  Pending
  Paid
  Refund
  Cancelled
}

enum UserType {
  Employee
  Contractor
  LeadContact
}

enum VendorUserStatus {
  Active
  Inactive
}

enum NotesMode {
  New
  Reply
}

enum ExpenseType {
  Meals
  Taxi
  Cost
}

enum ExpenseEntryStatus {
  Draft
  Saved
  Submitted
  Approved
  Rejected
  Paid
  PartiallyPaid
  Pending
  Cancelled
}

enum ExpenseStatus {
  Draft
  Saved
  Submitted
  Approved
  Rejected
  Paid
  PartiallyPaid
  Pending
  Cancelled
}

enum ExpenseTransactionStatus {
  Pending
  Paid
  Refund
  Cancelled
}

enum DocumentStatus {
  Active
  Inactive
  Delete
}
