generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Address {
  id             Int           @id @default(autoincrement())
  type           AddressType   @default(D)
  address1       String
  addressName    String        @default("")
  address2       String?
  address3       String?
  county         String?
  city           String
  state          String
  zipCode        String
  country        String
  primary        Boolean       @default(false)
  createdDate    DateTime      @default(now())
  lastUpdateDate DateTime      @updatedAt
  status         AddressStatus
  accountId      Int           @default(0)
  userId         Int?
  vendorId       Int?
  contactId      Int?
  account        Account       @relation(fields: [accountId], references: [id])
  contact        Contact?      @relation(fields: [contactId], references: [id])
  User           User?         @relation(fields: [userId], references: [id])
  Vendor         Vendor?       @relation(fields: [vendorId], references: [id])
  project        Project[]

  @@index([accountId])
  @@index([accountId, vendorId, userId])
  @@index([vendorId, userId])
}

model Account {
  id                Int              @id @default(autoincrement())
  name              String
  description       String
  ein               String?          @unique
  bankId            Int?
  email             String
  phone             String           @default("111-111-1111")
  status            AccountStatus
  createdDate       DateTime         @default(now())
  lastUpdateDate    DateTime         @updatedAt
  updatedById       Int?             @default(1)
  type              AccountType      @default(Trial)
  logoPath          String?
  paymentCustomerId String?
  updatedBy         User?            @relation("AccountUpdatedUser", fields: [updatedById], references: [id])
  accountConfig     AccountConfig[]
  accoutFeatures    AccoutFeatures[]
  address           Address[]
  contact           Contact[]
  exportTemplate    ExportTemplate[]
  invoice           Invoice[]
  project           Project[]
  user              User[]           @relation("UserAccount")
  vendor            Vendor[]
  workFlowTasks     WorkFlowTask[]
  workFlow          WorkFlow[]
  paymentMethods    PaymentMethod[]

  @@index([name])
}

model Vendor {
  id                  Int               @id @default(autoincrement())
  name                String
  description         String?
  email               String
  phone               String            @default("111-111-1111")
  type                VendorType        @default(Staffing)
  accountId           Int?              @default(0)
  ein                 String            @unique
  bankDetails         String?
  status              VendorStatus
  createdDate         DateTime          @default(now())
  vendorContactName   String?
  accountContactName  String?
  accountContactEmail String?
  accountContactPhone String?
  lastUpdateDate      DateTime          @updatedAt
  updatedById         Int?              @default(1)
  paymentTerms        PaymentTerms      @default(Net30)
  workFlowEnabled     Boolean           @default(false)
  address             Address[]
  invoice             Invoice[]
  project             Project[]
  account             Account?          @relation(fields: [accountId], references: [id])
  updatedBy           User?             @relation("VendorUpdatedUser", fields: [updatedById], references: [id])
  vendorUsers         VendorUsers[]
  paymentMethod       PaymentMethod[]
  projectResource     ProjectResource[]
  expense             Expense[]
  vendorSetting       VendorSetting[]
}

model VendorSetting {
  id             Int                 @id @default(autoincrement())
  key            String
  displayName    String
  value          Json
  vendorId       Int
  vendor         Vendor?             @relation(fields: [vendorId], references: [id])
  status         VendorSettingStatus
  createdDate    DateTime            @default(now())
  lastUpdateDate DateTime            @updatedAt

  @@unique([vendorId, key])
  @@index([vendorId])
  @@index([vendorId, key])
  @@index([vendorId, status])
}

model ProjectResource {
  id                  Int            @id @default(autoincrement())
  projectId           Int?           @default(1)
  userId              Int?           @default(1)
  unitPrice           Decimal?       @default(0)
  currency            Currency?
  quantity            Int?
  uom                 UnitOfMeasure?
  budgetAllocated     Decimal?       @default(0)
  billable            Boolean        @default(false)
  isTimesheetApprover Boolean        @default(false)
  remainingBudget     Decimal?       @default(0)
  usedBudget          Decimal?       @default(0)
  fromDate            DateTime?
  toDate              DateTime?
  cost                Decimal?       @default(0)
  supplier            Vendor?        @relation(fields: [supplierId], references: [id])
  supplierId          Int?
  project             Project?       @relation(fields: [projectId], references: [id])
  user                User?          @relation(fields: [userId], references: [id])

  @@unique([projectId, userId, billable])
}

model Invoice {
  id                 Int                  @id @default(autoincrement())
  description        String               @default("")
  type               InvoiceType
  vendorId           Int?                 @default(0)
  accountId          Int?                 @default(0)
  projectId          Int?                 @default(0)
  invoiceDate        DateTime             @default(now())
  dueDte             DateTime?
  total              Decimal              @default(0)
  paidAmount         Decimal?             @default(0)
  status             InvoiceStatus
  paymentTerms       PaymentTerms
  createdDate        DateTime             @default(now())
  lastUpdateDate     DateTime             @updatedAt
  invoiceEmailTo     String[]
  workFlowEnabled    Boolean              @default(false)
  account            Account?             @relation(fields: [accountId], references: [id])
  project            Project?             @relation(fields: [projectId], references: [id])
  vendor             Vendor?              @relation(fields: [vendorId], references: [id])
  invoiceItems       InvoiceItem[]
  invoiceTransaction InvoiceTransaction[]

  @@index([lastUpdateDate])
  @@index([paidAmount])
  @@index([dueDte])
  @@index([accountId])
  @@index([accountId, status])
}

model InvoiceItem {
  id               Int               @id @default(autoincrement())
  description      String?           @default("")
  type             InvoiceItemType
  unitPrice        Decimal           @default(0)
  currency         Currency
  quantity         Int               @default(1)
  uom              UnitOfMeasure
  total            Decimal           @default(0)
  status           InvoiceStatus
  generalNote      String?
  userId           Int?
  fromDate         DateTime?
  toDate           DateTime?
  createdDate      DateTime          @default(now())
  lastUpdateDate   DateTime          @updatedAt
  invoiceId        Int?
  timesheetEntryId Int?
  markForDelete    Boolean           @default(false)
  expenseId        Int?
  expense          Expense?          @relation(fields: [expenseId], references: [id])
  invoice          Invoice?          @relation(fields: [invoiceId], references: [id])
  timesheetEntry   TimesheetEntries? @relation(fields: [timesheetEntryId], references: [id])
  user             User?             @relation(fields: [userId], references: [id])
}

model InvoiceTransaction {
  id              Int                      @id @default(autoincrement())
  amount          Decimal                  @default(0)
  transactionData String
  invoiceId       Int?
  createdDate     DateTime                 @default(now())
  lastUpdatedDate DateTime                 @updatedAt
  status          InvoiceTransactionStatus
  transactionId   String
  invoice         Invoice?                 @relation(fields: [invoiceId], references: [id])

  @@unique([transactionId])
  @@index([invoiceId, status])
  @@index([lastUpdatedDate, status])
}

model Project {
  id                        Int                @id @default(autoincrement())
  name                      String
  referenceCode             String
  description               String             @default("")
  type                      InvoiceItemType
  invoiceCycle              InvoiceCycle
  addressId                 Int                @default(0)
  vendorId                  Int                @default(0)
  accountId                 Int                @default(0)
  budget                    Decimal            @default(0)
  totalHours                Int?               @default(0)
  averageRate               Decimal?           @default(0)
  status                    ProjectStatus
  contactName               String?
  contactEmail              String?
  contactPhone              String?
  createdDate               DateTime           @default(now())
  lastUpdateDate            DateTime           @updatedAt
  remainingBudgetToAllocate Decimal            @default(0)
  usedBudget                Decimal            @default(0)
  paymentTerms              PaymentTerms       @default(Net60)
  miscBudget                Decimal?           @default(0)
  usedMiscBudget            Decimal?           @default(0)
  timesheetNotesRequired    Boolean            @default(false)
  workFlowEnabled           Boolean            @default(false)
  expense                   Expense[]
  invoice                   Invoice[]
  account                   Account            @relation(fields: [accountId], references: [id])
  address                   Address            @relation(fields: [addressId], references: [id])
  vendor                    Vendor             @relation(fields: [vendorId], references: [id])
  child                     ProjectRelation[]  @relation("ChildProject")
  parent                    ProjectRelation[]  @relation("ParentProject")
  projectResource           ProjectResource[]
  timesheetEntries          TimesheetEntries[]
  purchaseOrder             PurchaseOrder[]

  @@index([accountId, status])
  @@index([name, accountId])
}

model User {
  id                 Int                @id @default(autoincrement())
  firstName          String
  lastName           String
  email              String             @unique
  phone              String             @default("111-111-1111")
  accountId          Int?               @default(0)
  isTimeSheetEnabled Boolean            @default(false)
  status             UserStatus         @default(Active)
  password           String             @default("passw0rd")
  createdDate        DateTime           @default(now())
  lastUpdateDate     DateTime           @updatedAt
  passwordExpired    Boolean            @default(false)
  passwordRetries    Int                @default(1)
  passwordSalt       String             @default("123456xyz")
  lastSignIn         DateTime           @default(now())
  type               UserType           @default(Employee)
  userRole           Role[]
  cost               Decimal?           @default(0)
  workFlowEnabled    Boolean            @default(false)
  accountOwner       Boolean            @default(false)
  accountUpdatedUser Account[]          @relation("AccountUpdatedUser")
  accountConfig      AccountConfig[]
  address            Address[]
  appConfig          AppConfig[]
  appConfigLookup    AppConfigLookup[]
  document           Document[]
  expensesApproved   Expense[]          @relation("ApprovedExpenses")
  expenses           Expense[]          @relation("CreatedExpenses")
  invoiceItem        InvoiceItem[]
  notes              Notes[]
  projectResource    ProjectResource[]
  timesheet          Timesheet[]
  timesheetEntries   TimesheetEntries[]
  account            Account?           @relation("UserAccount", fields: [accountId], references: [id])
  userAttributes     UserAttributes[]
  vendorUpdatedUser  Vendor[]           @relation("VendorUpdatedUser")
  vendorUsers        VendorUsers[]
  workFlowTasks      WorkFlowTask[]
  workFlow           WorkFlow[]
  workFlowSteps      WorkFlowStep[]
  paymentMethods     PaymentMethod[]

  @@index([accountId, accountOwner])
  @@index([email])
  @@index([email, status])
  @@index([accountId])
}

model UserAttributes {
  id             Int      @id @default(autoincrement())
  createdDate    DateTime @default(now())
  lastUpdateDate DateTime @updatedAt
  userId         Int
  key            String
  name           String
  value          String?
  user           User     @relation(fields: [userId], references: [id])
}

model VendorUsers {
  id             Int              @id @default(autoincrement())
  vendorId       Int?             @default(0)
  userId         Int?             @default(0)
  status         VendorUserStatus
  createdDate    DateTime         @default(now())
  lastUpdateDate DateTime         @updatedAt
  user           User?            @relation(fields: [userId], references: [id])
  vendor         Vendor?          @relation(fields: [vendorId], references: [id])

  @@unique([vendorId, userId])
}

model Timesheet {
  id               Int                @id @default(autoincrement())
  name             String             @default("")
  type             TimesheetType
  userId           Int?               @default(1)
  createdDate      DateTime           @default(now())
  lastUpdateDate   DateTime           @updatedAt
  status           TimesheetStatus
  startDate        DateTime?
  user             User?              @relation(fields: [userId], references: [id])
  timesheetEntries TimesheetEntries[]

  @@unique([userId, name])
}

model Expense {
  id                 Int                  @id @default(autoincrement())
  name               String
  billable           Boolean?             @default(false)
  total              Decimal              @default(0)
  paidAmount         Decimal              @default(0)
  projectId          Int?                 @default(1)
  status             ExpenseStatus
  approvedById       Int?                 @default(1)
  userId             Int?                 @default(1)
  supplierId         Int?
  createdDate        DateTime             @default(now())
  lastUpdateDate     DateTime             @updatedAt
  approvedDate       DateTime?
  description        String?
  category           ExpenseCategory      @default(General)
  approvedBy         User?                @relation("ApprovedExpenses", fields: [approvedById], references: [id])
  project            Project?             @relation(fields: [projectId], references: [id])
  supplier           Vendor?              @relation(fields: [supplierId], references: [id])
  user               User?                @relation("CreatedExpenses", fields: [userId], references: [id])
  expenseEntries     ExpenseEntry[]
  expenseTransaction ExpenseTransaction[]
  InvoiceItem        InvoiceItem[]

  @@index([projectId, status])
}

model ExpenseTransaction {
  id                    Int                      @id @default(autoincrement())
  amount                Decimal                  @default(0)
  transactionId         String
  transactionData       String
  expenseId             Int?
  externalTransactionID String[]
  status                ExpenseTransactionStatus
  createdDate           DateTime                 @default(now())
  lastUpdatedDate       DateTime                 @updatedAt
  expense               Expense?                 @relation(fields: [expenseId], references: [id])

  @@unique([transactionId])
  @@index([expenseId, id, status, createdDate])
  @@index([expenseId, id, status])
}

model ExpenseEntry {
  id             Int                @id @default(autoincrement())
  type           ExpenseType
  billable       Boolean            @default(false)
  expenseDate    DateTime
  amount         Decimal            @default(0)
  status         ExpenseEntryStatus
  createdDate    DateTime           @default(now())
  lastUpdateDate DateTime           @updatedAt
  expenseId      Int?
  notes          String?
  date           DateTime?
  attachments    String[]
  expense        Expense?           @relation(fields: [expenseId], references: [id])
}

model Calendar {
  dateActual           DateTime
  dateDimId            Int      @id
  dayName              String
  dayOfMonth           Int
  dayOfQuarter         Int
  dayOfWeek            Int
  dayOfYear            Int
  daySuffix            String
  epoch                BigInt
  firstDayOfMonth      DateTime
  firstDayOfQuarter    DateTime
  firstDayOfWeek       DateTime
  firstDayOfYear       DateTime
  lastDayOfMonth       DateTime
  lastDayOfQuarter     DateTime
  lastDayOfWeek        DateTime
  lastDayOfYear        DateTime
  mmddyyyy             String
  mmyyyy               String
  monthActual          Int
  monthName            String
  monthNameAbbreviated String
  quarterActual        Int
  weekOfMonth          Int
  weekOfYear           Int
  weekOfYearISO        String
  weekend              Boolean
  yearActual           Int
  mmdd                 String
  currentWeekDates     Json

  @@index([dateActual])
}

model Document {
  id             Int              @id @default(autoincrement())
  name           String
  type           DocumentType
  typeId         Int
  urlPath        String
  status         DocumentStatus
  createdBy      Int?
  createdDate    DateTime         @default(now())
  lastUpdateDate DateTime         @default(now()) @updatedAt
  category       DocumentCategory @default(Upload)
  emailTo        String[]
  configData     Json?
  createdUser    User?            @relation(fields: [createdBy], references: [id])

  @@index([createdBy])
  @@index([createdBy, status])
  @@index([type])
  @@index([type, status])
  @@index([type, typeId])
  @@index([type, typeId, status])
}

model TimesheetEntries {
  id             Int             @id @default(autoincrement())
  timesheetId    Int?
  projectId      Int             @default(1)
  status         TimesheetStatus
  approvedDate   DateTime?
  entries        Json
  createdDate    DateTime        @default(now())
  lastUpdateDate DateTime        @default(now()) @updatedAt
  approvedBy     Int?
  unitPrice      Decimal?        @default(0)
  notesRequired  Boolean         @default(false)
  billable       Boolean?        @default(false)
  settled        Boolean?        @default(false)
  cost           Decimal?        @default(0)
  invoiceItem    InvoiceItem[]
  approvedUser   User?           @relation(fields: [approvedBy], references: [id])
  project        Project?        @relation(fields: [projectId], references: [id])
  timesheet      Timesheet?      @relation(fields: [timesheetId], references: [id])

  @@unique([timesheetId, projectId, billable])
}

model Notes {
  id              Int        @id @default(autoincrement())
  type            NotesType
  typeId          Int
  notes           String
  createdDate     DateTime   @default(now())
  lastUpdateDate  DateTime   @default(now()) @updatedAt
  createdBy       Int?
  mode            NotesMode  @default(New)
  subTyle         NotesType?
  createdUser     User?      @relation(fields: [createdBy], references: [id])
  replies         Notes[]    @relation("replies")
  repliesRelation Notes[]    @relation("replies")

  @@index([type, typeId])
}

model AppConfigLookup {
  id                Int             @id @default(autoincrement())
  name              String
  displayName       String
  configDescription String
  type              ConfigType
  status            ConfigStatus
  configInputType   ConfigInputType
  updatedBy         Int?
  createdDate       DateTime        @default(now())
  lastUpdateDate    DateTime        @default(now()) @updatedAt
  value             Json
  updatedUser       User?           @relation(fields: [updatedBy], references: [id])
}

model AppConfig {
  id             Int          @id @default(autoincrement())
  name           String
  status         ConfigStatus
  createdDate    DateTime     @default(now())
  lastUpdateDate DateTime     @default(now()) @updatedAt
  key            String
  updatedBy      Int?
  value          String[]
  updatedUser    User?        @relation(fields: [updatedBy], references: [id])

  @@index([key])
  @@index([name])
  @@index([status])
  @@index([key, status])
}

model AccountConfig {
  id             Int          @id @default(autoincrement())
  name           String
  accountId      Int          @default(0)
  configKey      String
  configValue    String
  status         ConfigStatus
  lastUpdateDate DateTime     @default(now()) @updatedAt
  updatedBy      Int?
  account        Account      @relation(fields: [accountId], references: [id])
  updatedUser    User?        @relation(fields: [updatedBy], references: [id])
}

model Contact {
  id           Int           @id @default(autoincrement())
  firstName    String
  lastName     String
  email        String
  phone        String
  status       ContactStatus
  accountId    Int           @default(0)
  receiveEmail Boolean       @default(false)
  address      Address[]
  account      Account       @relation(fields: [accountId], references: [id])
}

model ContactAssociation {
  id     Int                      @id @default(autoincrement())
  type   ContactType
  typeId Int
  status ContactAssociationStatus
}

model ProjectRelation {
  id             Int      @id @default(autoincrement())
  parentId       Int?     @default(1)
  childId        Int?     @default(1)
  createdDate    DateTime @default(now())
  lastUpdateDate DateTime @default(now()) @updatedAt
  child          Project? @relation("ChildProject", fields: [childId], references: [id])
  parent         Project? @relation("ParentProject", fields: [parentId], references: [id])
}

model ExportTemplate {
  id             Int                  @id @default(autoincrement())
  name           String
  accountId      Int?                 @default(0)
  fileType       ExportFileType?
  status         ExportTemplateStatus
  createdDate    DateTime             @default(now())
  lastUpdateDate DateTime             @default(now()) @updatedAt
  queryMeta      Json
  type           ExportTemplateType
  fileName       String               @default("fileName")
  template       String?
  emailTemplate  String?
  schedule       Boolean              @default(false)

  account Account? @relation(fields: [accountId], references: [id])

  @@index([name])
  @@index([accountId])
  @@index([type])
  @@index([accountId, type])
  @@index([accountId, type, schedule])
}

model Feature {
  id             Int              @id @default(autoincrement())
  name           String
  description    String
  status         FeatureStatus
  accoutFeatures AccoutFeatures[]
}

model AccoutFeatures {
  id             Int                  @id @default(autoincrement())
  accountId      Int                  @default(0)
  featureId      Int                  @default(0)
  status         AccountFeatureStatus
  createdDate    DateTime             @default(now())
  lastUpdateDate DateTime             @default(now()) @updatedAt
  configuration  Json?
  account        Account              @relation(fields: [accountId], references: [id])
  feature        Feature              @relation(fields: [featureId], references: [id])

  @@unique([accountId, featureId])
  @@index([accountId, status])
  @@index([featureId, status])
}

model WorkFlowTask {
  id             Int                @id @default(autoincrement())
  type           WorkFlowTaskType
  name           String
  description    String?
  account        Account            @relation(fields: [accountId], references: [id])
  accountId      Int                @default(0)
  status         WorkFlowTaskStatus @default(Draft)
  configData     Json?
  updatedBy      Int?
  updatedUser    User?              @relation(fields: [updatedBy], references: [id])
  createdDate    DateTime           @default(now())
  lastUpdateDate DateTime           @default(now()) @updatedAt
  workFlowSteps  WorkFlowStep[]

  @@unique([type, name, accountId])
  @@index([accountId, status])
  @@index([accountId])
  @@index([type, status])
  @@index([type])
}

model WorkFlow {
  id             Int            @id @default(autoincrement())
  type           WorkFlowType
  typeId         Int
  account        Account        @relation(fields: [accountId], references: [id])
  accountId      Int            @default(0)
  name           String
  status         WorkFlowStatus
  updatedBy      Int?
  updatedUser    User?          @relation(fields: [updatedBy], references: [id])
  completedDate  DateTime?
  createdDate    DateTime       @default(now())
  lastUpdateDate DateTime       @default(now()) @updatedAt
  workFlowSteps  WorkFlowStep[]

  @@unique([type, typeId, accountId])
  @@index([accountId, status])
  @@index([type])
  @@index([type, typeId, status])
  @@index([type, typeId, accountId, status])
}

model WorkFlowStep {
  id             Int                @id @default(autoincrement())
  workFlow       WorkFlow           @relation(fields: [workFlowId], references: [id])
  workFlowId     Int                @default(0)
  stepNumber     Int                @default(0)
  task           WorkFlowTask       @relation(fields: [taskId], references: [id])
  taskId         Int                @default(0)
  assigned       User?              @relation(fields: [assignedTo], references: [id])
  assignedTo     Int?
  dueDate        DateTime?
  configData     Json?
  status         WorkFlowStepStatus
  completedDate  DateTime?
  createdDate    DateTime           @default(now())
  lastUpdateDate DateTime           @default(now()) @updatedAt

  @@index([workFlowId])
  @@index([assignedTo])
  @@index([assignedTo, status])
  @@index([assignedTo, status, dueDate])
}

model PaymentMethod {
  id                 Int                 @id @default(autoincrement())
  type               PaymentMethodType
  account            Account             @relation(fields: [accountId], references: [id])
  accountId          Int                 @default(0)
  vendor             Vendor?             @relation(fields: [vendorId], references: [id])
  vendorId           Int?
  token              String?
  processorToken     String?
  processCustomerId  String?
  processorPaymentId String?
  itemId             String?
  status             PaymentMethodStatus
  updatedBy          Int?
  updatedUser        User?               @relation(fields: [updatedBy], references: [id])
  createdDate        DateTime            @default(now())
  lastUpdateDate     DateTime            @default(now()) @updatedAt
}

model PurchaseOrder {
  id             Int                 @id @default(autoincrement())
  project        Project             @relation(fields: [projectId], references: [id])
  projectId      Int                 @default(0)
  number         String
  status         PurchaseOrderStatus
  amount         Decimal
  createdDate    DateTime            @default(now())
  lastUpdateDate DateTime            @default(now()) @updatedAt
}

model qrtz_blob_triggers {
  trigger_name  String        @db.VarChar(80)
  trigger_group String        @db.VarChar(80)
  blob_data     String?
  sched_name    String        @default("TestScheduler") @db.VarChar(120)
  qrtz_triggers qrtz_triggers @relation(fields: [sched_name, trigger_name, trigger_group], references: [sched_name, trigger_name, trigger_group], onDelete: NoAction, onUpdate: NoAction, map: "qrtz_blob_triggers_sched_name_fkey")

  @@id([sched_name, trigger_name, trigger_group])
}

model qrtz_calendars {
  calendar_name String @db.VarChar(80)
  calendar      String
  sched_name    String @default("TestScheduler") @db.VarChar(120)

  @@id([sched_name, calendar_name])
}

model qrtz_cron_triggers {
  trigger_name    String        @db.VarChar(80)
  trigger_group   String        @db.VarChar(80)
  cron_expression String        @db.VarChar(80)
  time_zone_id    String?       @db.VarChar(80)
  sched_name      String        @default("TestScheduler") @db.VarChar(120)
  qrtz_triggers   qrtz_triggers @relation(fields: [sched_name, trigger_name, trigger_group], references: [sched_name, trigger_name, trigger_group], onDelete: NoAction, onUpdate: NoAction, map: "qrtz_cron_triggers_sched_name_fkey")

  @@id([sched_name, trigger_name, trigger_group])
}

model qrtz_fired_triggers {
  entry_id          String   @db.VarChar(95)
  trigger_name      String   @db.VarChar(80)
  trigger_group     String   @db.VarChar(80)
  instance_name     String   @db.VarChar(80)
  fired_time        BigInt
  priority          Int
  state             String   @db.VarChar(16)
  job_name          String?  @db.VarChar(80)
  job_group         String?  @db.VarChar(80)
  is_nonconcurrent  Boolean?
  is_update_data    Boolean?
  sched_name        String   @default("TestScheduler") @db.VarChar(120)
  sched_time        BigInt
  requests_recovery Boolean?

  @@id([sched_name, entry_id])
  @@index([sched_name, job_name, job_group], map: "idx_qrtz_ft_j_g")
  @@index([sched_name, job_group], map: "idx_qrtz_ft_jg")
  @@index([sched_name, trigger_name, trigger_group], map: "idx_qrtz_ft_t_g")
  @@index([sched_name, trigger_group], map: "idx_qrtz_ft_tg")
  @@index([sched_name, instance_name], map: "idx_qrtz_ft_trig_inst_name")
}

model qrtz_job_details {
  job_name          String          @db.VarChar(128)
  job_group         String          @db.VarChar(80)
  description       String?         @db.VarChar(120)
  job_class_name    String          @db.VarChar(200)
  is_durable        Boolean?
  is_nonconcurrent  Boolean?
  is_update_data    Boolean?
  sched_name        String          @default("TestScheduler") @db.VarChar(120)
  requests_recovery Boolean?
  job_data          Bytes?
  qrtz_triggers     qrtz_triggers[]

  @@id([sched_name, job_name, job_group])
  @@index([sched_name, job_group], map: "idx_qrtz_j_grp")
}

model qrtz_locks {
  lock_name  String @db.VarChar(40)
  sched_name String @default("TestScheduler") @db.VarChar(120)

  @@id([sched_name, lock_name])
}

model qrtz_paused_trigger_grps {
  trigger_group String @db.VarChar(80)
  sched_name    String @default("TestScheduler") @db.VarChar(120)

  @@id([sched_name, trigger_group])
}

model qrtz_scheduler_state {
  instance_name     String  @db.VarChar(200)
  last_checkin_time BigInt?
  checkin_interval  BigInt?
  sched_name        String  @default("TestScheduler") @db.VarChar(120)

  @@id([sched_name, instance_name])
}

model qrtz_simple_triggers {
  trigger_name    String        @db.VarChar(80)
  trigger_group   String        @db.VarChar(80)
  repeat_count    BigInt
  repeat_interval BigInt
  times_triggered BigInt
  sched_name      String        @default("TestScheduler") @db.VarChar(120)
  qrtz_triggers   qrtz_triggers @relation(fields: [sched_name, trigger_name, trigger_group], references: [sched_name, trigger_name, trigger_group], onDelete: NoAction, onUpdate: NoAction, map: "qrtz_simple_triggers_sched_name_fkey")

  @@id([sched_name, trigger_name, trigger_group])
  @@index([trigger_name, trigger_group], map: "fki_qrtz_simple_triggers_qrtz_triggers")
}

model qrtz_simprop_triggers {
  sched_name    String        @db.VarChar(120)
  trigger_name  String        @db.VarChar(200)
  trigger_group String        @db.VarChar(200)
  str_prop_1    String?       @db.VarChar(512)
  str_prop_2    String?       @db.VarChar(512)
  str_prop_3    String?       @db.VarChar(512)
  int_prop_1    Int?
  int_prop_2    Int?
  long_prop_1   BigInt?
  long_prop_2   BigInt?
  dec_prop_1    Decimal?      @db.Decimal(13, 4)
  dec_prop_2    Decimal?      @db.Decimal(13, 4)
  bool_prop_1   Boolean?
  bool_prop_2   Boolean?
  qrtz_triggers qrtz_triggers @relation(fields: [sched_name, trigger_name, trigger_group], references: [sched_name, trigger_name, trigger_group], onDelete: NoAction, onUpdate: NoAction, map: "qrtz_simprop_triggers_sched_name_fkey")

  @@id([sched_name, trigger_name, trigger_group])
}

model qrtz_triggers {
  trigger_name          String                 @db.VarChar(80)
  trigger_group         String                 @db.VarChar(80)
  job_name              String                 @db.VarChar(80)
  job_group             String                 @db.VarChar(80)
  description           String?                @db.VarChar(120)
  next_fire_time        BigInt?
  prev_fire_time        BigInt?
  priority              Int?
  trigger_state         String                 @db.VarChar(16)
  trigger_type          String                 @db.VarChar(8)
  start_time            BigInt
  end_time              BigInt?
  calendar_name         String?                @db.VarChar(80)
  misfire_instr         Int?                   @db.SmallInt
  job_data              Bytes?
  sched_name            String                 @default("TestScheduler") @db.VarChar(120)
  qrtz_blob_triggers    qrtz_blob_triggers?
  qrtz_cron_triggers    qrtz_cron_triggers?
  qrtz_simple_triggers  qrtz_simple_triggers?
  qrtz_simprop_triggers qrtz_simprop_triggers?
  qrtz_job_details      qrtz_job_details       @relation(fields: [sched_name, job_name, job_group], references: [sched_name, job_name, job_group], onDelete: NoAction, onUpdate: NoAction, map: "qrtz_triggers_sched_name_fkey")

  @@id([sched_name, trigger_name, trigger_group])
  @@index([job_name, job_group], map: "fki_qrtz_simple_triggers_job_details_name_group")
  @@index([sched_name, calendar_name], map: "idx_qrtz_t_c")
  @@index([sched_name, trigger_group], map: "idx_qrtz_t_g")
  @@index([sched_name, job_name, job_group], map: "idx_qrtz_t_j")
  @@index([sched_name, job_group], map: "idx_qrtz_t_jg")
  @@index([sched_name, trigger_group, trigger_state], map: "idx_qrtz_t_n_g_state")
  @@index([sched_name, trigger_name, trigger_group, trigger_state], map: "idx_qrtz_t_n_state")
  @@index([sched_name, next_fire_time], map: "idx_qrtz_t_next_fire_time")
  @@index([sched_name, misfire_instr, next_fire_time], map: "idx_qrtz_t_nft_misfire")
  @@index([sched_name, trigger_state, next_fire_time], map: "idx_qrtz_t_nft_st")
  @@index([sched_name, misfire_instr, next_fire_time, trigger_state], map: "idx_qrtz_t_nft_st_misfire")
  @@index([sched_name, misfire_instr, next_fire_time, trigger_group, trigger_state], map: "idx_qrtz_t_nft_st_misfire_grp")
  @@index([sched_name, trigger_state], map: "idx_qrtz_t_state")
}

enum AccountFeatureStatus {
  Active
  Inactive
}

enum FeatureStatus {
  Active
  Inactive
}

enum ExportTemplateStatus {
  Active
  Inactive
  MarkForDelete
}

enum ExportTemplateType {
  System
  User
}

enum ExportFileType {
  PDF
  CSV
}

enum ContactAssociationStatus {
  Active
  Inactive
  MarkForDelete
}

enum ContactStatus {
  Active
  Inactive
  MarkForDelete
}

enum ContactType {
  Vendor
  Project
}

enum AddressType {
  D
  U
  A
  V
}

enum UserAttributeKeys {
  default
  rate
  startDate
  endDate
  enableTimesheetApprovalEmail
}

enum UserStatus {
  Active
  Inactive
  Approved
  Rejected
  Error
  MarkForDelete
}

enum Role {
  SUPER_ADMIN
  ACCOUNT_ADMIN
  ACCOUNT_VENDOR_REP
  ACCOUNT_USER
  ACCOUNT_VENDOR_EMPLOYEE
  ACCOUNT_VENDOR_CONTRACTOR
  DEVELOPER
  ACCOUNT_MANAGER
  WORKFLOW_ADMIN
  WORKFLOW_CONTRIBUTOR
  SCHEDULE_JOB_ADMIN
  PAYMENT_ADMIN
}

enum VendorType {
  Staffing
  Product
  Project
  Supplier
}

enum VendorStatus {
  Approved
  Rejected
  Active
  Inactive
  Fraud
  MarkForDelete
}

enum AccountStatus {
  Active
  Inactive
  Fraud
  MarkForDelete
  Approved
}

enum AddressStatus {
  A
  I
  D
}

enum InvoiceType {
  Staffing
  Product
  Project
  Timesheet
  General
  Expense
  Misc
}

enum InvoiceCycle {
  Weekly
  BiWeekly
  Monthly
  Quarterly
  HalfYearly
  Yearly
}

enum InvoiceStatus {
  Draft
  Submitted
  Pending
  PartiallyPaid
  Paid
  Cancelled
  MarkForDelete
}

enum PaymentTerms {
  Net30
  Net45
  Net60
  Net90
  Net180
  Net365
  Net7
  Net15
}

enum InvoiceItemType {
  General
  Project
  Staffing
  Timesheet
  Product
  Expense
  Misc
  Services
}

enum UnitOfMeasure {
  Hours
  Item
  Expense
}

enum Currency {
  USD
  INR
}

enum ProjectStatus {
  Created
  Open
  Closed
  Settled
  MarkForDelete
}

enum TimesheetType {
  Weekly
  Monthly
  Quarterly
}

enum TimesheetStatus {
  Draft
  Saved
  Approved
  Rejected
  Invoiced
  Submitted
  MarkForDelete
  Settled
}

enum DocumentType {
  Account
  Invoice
  Vendor
  Project
  User
  TimesheetEntry
  TimesheetApproval
  Expense
  ExpenseEntry
  Template
}

enum NotesType {
  Timesheet
  Account
  Invoice
  Project
  User
  TimesheetEntry
  Vendor
  TimesheetApproval
  Expense
  ExpenseEntry
  WorkFlowTask
  WorkFlowTaskStep
}

enum ConfigStatus {
  Active
  Inactive
  MarkForDelete
}

enum InvoiceTransactionStatus {
  Pending
  Paid
  Refund
  Cancelled
  MarkForDelete
}

enum UserType {
  Employee
  Contractor
  LeadContact
}

enum VendorUserStatus {
  Active
  Inactive
  MarkForDelete
}

enum NotesMode {
  New
  Reply
}

enum ExpenseType {
  Airfare_C
  Airfare_E
  Baggage
  Breakfast
  CarRental
  Cellular
  Dinner
  Dues
  Education
  Exam
  Entertaintment_M
  Entertaintment_O
  Gas
  Hotel
  Hotel_Tax
  Internet
  Laundry
  Lunch
  Meals
  Mileage
  Others
  Parking_Tolls
  Passport_Visa_Fee
  Postage
  Resource_Cost
  Shipping
  Subscription
  Supplies
  Taxi
  Tips
}

enum ExpenseEntryStatus {
  Draft
  Submitted
  Approved
  Rejected
  Paid
  PartiallyPaid
  Pending
  Cancelled
  Saved
  MarkForDelete
}

enum ExpenseStatus {
  Draft
  Submitted
  Approved
  Rejected
  Paid
  PartiallyPaid
  Pending
  Cancelled
  Saved
  Invoiced
  MarkForDelete
}

enum ExpenseTransactionStatus {
  Pending
  Paid
  Refund
  Cancelled
  MarkForDelete
}

enum DocumentStatus {
  Active
  Inactive
  Delete
  MarkForDelete
}

enum ConfigType {
  App
  Account
  User
}

enum ConfigInputType {
  TextBox
  Toggle
  DropDown
  Checkbox
  CheckboxMultiSelect
}

enum ExpenseCategory {
  General
  Cost
}

enum AccountType {
  Trial
  Full
}

enum DocumentCategory {
  Upload
  Signature
}

enum WorkFlowTaskType {
  Vendor
  User
  Project
  Invoice
}

enum WorkFlowTaskStatus {
  Draft
  Active
  Inactive
  MarkForDelete
}

enum WorkFlowType {
  Vendor
  User
  Project
  Invoice
}

enum WorkFlowStatus {
  Draft
  Active
  Inactive
}

enum WorkFlowStepStatus {
  Pending
  InProgress
  Complete
  Delayed
  Skipped
}

enum PaymentMethodType {
  Account
  Vendor
}

enum PaymentMethodStatus {
  Active
  Inactive
}

enum PurchaseOrderStatus {
  Created
  Active
  Inactive
  Closed
}

enum VendorSettingStatus {
  Active
  Inactive
  MarkForDelete
}
